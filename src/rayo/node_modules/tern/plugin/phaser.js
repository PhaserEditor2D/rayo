(function(mod) {
	if (typeof exports == "object" && typeof module == "object") // CommonJS
		return mod(require("tern/lib/infer"), require("tern/lib/tern"));
	if (typeof define == "function" && define.amd) // AMD
		return define([ "tern/lib/infer", "tern/lib/tern" ], mod);
	mod(tern, tern);
})(function(infer, tern) {
	"use strict";

	tern.registerPlugin("phaser", function(server, options) {
		server.addDefs(defs);
	});

	var defs =     {
			  "WebGLGraphics": {
				    "!doc": "WebGLGraphics",
				    "!type": "fn()",
				    "prototype": {}
				  },
				  "CanvasTinter": {
				    "!doc": "CanvasTinter",
				    "!type": "fn()",
				    "prototype": {}
				  },
				  "WebGLGraphicsData": {
				    "!doc": "WebGLGraphicsData",
				    "!type": "fn()",
				    "prototype": {}
				  },
				  "CanvasPool": {
				    "!doc": "CanvasPool",
				    "!type": "fn()",
				    "prototype": {}
				  },
				  "module:PIXI": {"PIXI": {
				    "!doc": "module:PIXI.PIXI",
				    "!type": "fn()",
				    "prototype": {}
				  }},
				  "Phaser": {
				    "Easing": {
				      "!doc": "Phaser.Easing",
				      "Exponential": {
				        "!doc": "Phaser.Easing.Exponential",
				        "!type": "fn()",
				        "prototype": {
				          "In": {
				            "!doc": "Phaser.Easing.Exponential.In",
				            "!type": "fn(k: +Number) -> +Number"
				          },
				          "InOut": {
				            "!doc": "Phaser.Easing.Exponential.InOut",
				            "!type": "fn(k: +Number) -> +Number"
				          },
				          "Out": {
				            "!doc": "Phaser.Easing.Exponential.Out",
				            "!type": "fn(k: +Number) -> +Number"
				          }
				        }
				      },
				      "Cubic": {
				        "!doc": "Phaser.Easing.Cubic",
				        "!type": "fn()",
				        "prototype": {
				          "In": {
				            "!doc": "Phaser.Easing.Cubic.In",
				            "!type": "fn(k: +Number) -> +Number"
				          },
				          "InOut": {
				            "!doc": "Phaser.Easing.Cubic.InOut",
				            "!type": "fn(k: +Number) -> +Number"
				          },
				          "Out": {
				            "!doc": "Phaser.Easing.Cubic.Out",
				            "!type": "fn(k: +Number) -> +Number"
				          }
				        }
				      },
				      "prototype": {},
				      "Linear": {
				        "!doc": "Phaser.Easing.Linear",
				        "!type": "fn()",
				        "prototype": {"None": {
				          "!doc": "Phaser.Easing.Linear.None",
				          "!type": "fn(k: +Number) -> +Number"
				        }}
				      },
				      "Circular": {
				        "!doc": "Phaser.Easing.Circular",
				        "!type": "fn()",
				        "prototype": {
				          "In": {
				            "!doc": "Phaser.Easing.Circular.In",
				            "!type": "fn(k: +Number) -> +Number"
				          },
				          "InOut": {
				            "!doc": "Phaser.Easing.Circular.InOut",
				            "!type": "fn(k: +Number) -> +Number"
				          },
				          "Out": {
				            "!doc": "Phaser.Easing.Circular.Out",
				            "!type": "fn(k: +Number) -> +Number"
				          }
				        }
				      },
				      "Elastic": {
				        "!doc": "Phaser.Easing.Elastic",
				        "!type": "fn()",
				        "prototype": {
				          "In": {
				            "!doc": "Phaser.Easing.Elastic.In",
				            "!type": "fn(k: +Number) -> +Number"
				          },
				          "InOut": {
				            "!doc": "Phaser.Easing.Elastic.InOut",
				            "!type": "fn(k: +Number) -> +Number"
				          },
				          "Out": {
				            "!doc": "Phaser.Easing.Elastic.Out",
				            "!type": "fn(k: +Number) -> +Number"
				          }
				        }
				      },
				      "Quartic": {
				        "!doc": "Phaser.Easing.Quartic",
				        "!type": "fn()",
				        "prototype": {
				          "In": {
				            "!doc": "Phaser.Easing.Quartic.In",
				            "!type": "fn(k: +Number) -> +Number"
				          },
				          "InOut": {
				            "!doc": "Phaser.Easing.Quartic.InOut",
				            "!type": "fn(k: +Number) -> +Number"
				          },
				          "Out": {
				            "!doc": "Phaser.Easing.Quartic.Out",
				            "!type": "fn(k: +Number) -> +Number"
				          }
				        }
				      },
				      "Back": {
				        "!doc": "Phaser.Easing.Back",
				        "!type": "fn()",
				        "prototype": {
				          "In": {
				            "!doc": "Phaser.Easing.Back.In",
				            "!type": "fn(k: +Number) -> +Number"
				          },
				          "InOut": {
				            "!doc": "Phaser.Easing.Back.InOut",
				            "!type": "fn(k: +Number) -> +Number"
				          },
				          "Out": {
				            "!doc": "Phaser.Easing.Back.Out",
				            "!type": "fn(k: +Number) -> +Number"
				          }
				        }
				      },
				      "Sinusoidal": {
				        "!doc": "Phaser.Easing.Sinusoidal",
				        "!type": "fn()",
				        "prototype": {
				          "In": {
				            "!doc": "Phaser.Easing.Sinusoidal.In",
				            "!type": "fn(k: +Number) -> +Number"
				          },
				          "InOut": {
				            "!doc": "Phaser.Easing.Sinusoidal.InOut",
				            "!type": "fn(k: +Number) -> +Number"
				          },
				          "Out": {
				            "!doc": "Phaser.Easing.Sinusoidal.Out",
				            "!type": "fn(k: +Number) -> +Number"
				          }
				        }
				      },
				      "Bounce": {
				        "!doc": "Phaser.Easing.Bounce",
				        "!type": "fn()",
				        "prototype": {
				          "In": {
				            "!doc": "Phaser.Easing.Bounce.In",
				            "!type": "fn(k: +Number) -> +Number"
				          },
				          "InOut": {
				            "!doc": "Phaser.Easing.Bounce.InOut",
				            "!type": "fn(k: +Number) -> +Number"
				          },
				          "Out": {
				            "!doc": "Phaser.Easing.Bounce.Out",
				            "!type": "fn(k: +Number) -> +Number"
				          }
				        }
				      },
				      "!type": "fn()",
				      "Quintic": {
				        "!doc": "Phaser.Easing.Quintic",
				        "!type": "fn()",
				        "prototype": {
				          "In": {
				            "!doc": "Phaser.Easing.Quintic.In",
				            "!type": "fn(k: +Number) -> +Number"
				          },
				          "InOut": {
				            "!doc": "Phaser.Easing.Quintic.InOut",
				            "!type": "fn(k: +Number) -> +Number"
				          },
				          "Out": {
				            "!doc": "Phaser.Easing.Quintic.Out",
				            "!type": "fn(k: +Number) -> +Number"
				          }
				        }
				      },
				      "Quadratic": {
				        "!doc": "Phaser.Easing.Quadratic",
				        "!type": "fn()",
				        "prototype": {
				          "In": {
				            "!doc": "Phaser.Easing.Quadratic.In",
				            "!type": "fn(k: +Number) -> +Number"
				          },
				          "InOut": {
				            "!doc": "Phaser.Easing.Quadratic.InOut",
				            "!type": "fn(k: +Number) -> +Number"
				          },
				          "Out": {
				            "!doc": "Phaser.Easing.Quadratic.Out",
				            "!type": "fn(k: +Number) -> +Number"
				          }
				        }
				      }
				    },
				    "SignalBinding": {
				      "!doc": "Phaser.SignalBinding",
				      "!type": "fn(signal: +Phaser.Signal, listener: +Function, isOnce: +Boolean, listenerContext: +Object, priority: +Number, args: +Object)",
				      "prototype": {
				        "getSignal": {
				          "!doc": "Phaser.SignalBinding.getSignal",
				          "!type": "fn() -> +Phaser.Signal"
				        },
				        "isBound": {
				          "!doc": "Phaser.SignalBinding.isBound",
				          "!type": "fn() -> +Boolean"
				        },
				        "context": {
				          "!doc": "Phaser.SignalBinding.context",
				          "!type": "+Object"
				        },
				        "callCount": {
				          "!doc": "Phaser.SignalBinding.callCount",
				          "!type": "+Number"
				        },
				        "detach": {
				          "!doc": "Phaser.SignalBinding.detach",
				          "!type": "fn() -> +Function"
				        },
				        "active": {
				          "!doc": "Phaser.SignalBinding.active",
				          "!type": "+Boolean"
				        },
				        "toString": {
				          "!doc": "Phaser.SignalBinding.toString",
				          "!type": "fn() -> +String"
				        },
				        "params": {
				          "!doc": "Phaser.SignalBinding.params",
				          "!type": "+Array"
				        },
				        "execute": {
				          "!doc": "Phaser.SignalBinding.execute",
				          "!type": "fn(paramsArr: +Array._any_) -> +Object"
				        },
				        "isOnce": {
				          "!doc": "Phaser.SignalBinding.isOnce",
				          "!type": "fn() -> +Boolean"
				        },
				        "getListener": {
				          "!doc": "Phaser.SignalBinding.getListener",
				          "!type": "fn() -> +Function"
				        }
				      }
				    },
				    "QuadTree": {
				      "!doc": "Phaser.QuadTree",
				      "!type": "fn(x: +Number, y: +Number, width: +Number, height: +Number, maxObjects: +Number, maxLevels: +Number, level: +Number)",
				      "prototype": {
				        "getIndex": {
				          "!doc": "Phaser.QuadTree.getIndex",
				          "!type": "fn(rect: +Phaser.Rectangle) -> +Number"
				        },
				        "maxLevels": {
				          "!doc": "Phaser.QuadTree.maxLevels",
				          "!type": "+Number"
				        },
				        "level": {
				          "!doc": "Phaser.QuadTree.level",
				          "!type": "+Number"
				        },
				        "objects": {
				          "!doc": "Phaser.QuadTree.objects",
				          "!type": "+Array"
				        },
				        "clear": {
				          "!doc": "Phaser.QuadTree.clear",
				          "!type": "fn()"
				        },
				        "insert": {
				          "!doc": "Phaser.QuadTree.insert",
				          "!type": "fn(body: +Phaser.Physics.Arcade.Body)"
				        },
				        "populate": {
				          "!doc": "Phaser.QuadTree.populate",
				          "!type": "fn(group: +Phaser.Group)"
				        },
				        "split": {
				          "!doc": "Phaser.QuadTree.split",
				          "!type": "fn()"
				        },
				        "nodes": {
				          "!doc": "Phaser.QuadTree.nodes",
				          "!type": "+Array"
				        },
				        "populateHandler": {
				          "!doc": "Phaser.QuadTree.populateHandler",
				          "!type": "fn(sprite: +Phaser.Sprite)"
				        },
				        "bounds": {
				          "!doc": "Phaser.QuadTree.bounds",
				          "!type": "+Object"
				        },
				        "reset": {
				          "!doc": "Phaser.QuadTree.reset",
				          "!type": "fn(x: +Number, y: +Number, width: +Number, height: +Number, maxObjects: +Number, maxLevels: +Number, level: +Number)"
				        },
				        "retrieve": {
				          "!doc": "Phaser.QuadTree.retrieve",
				          "!type": "fn(source: +Phaser.Sprite) -> +Array"
				        },
				        "maxObjects": {
				          "!doc": "Phaser.QuadTree.maxObjects",
				          "!type": "+Number"
				        }
				      }
				    },
				    "TilemapParser": {
				      "INSERT_NULL": "+Boolean",
				      "getEmptyData": {
				        "!doc": "Phaser.TilemapParser.getEmptyData",
				        "!type": "fn() -> +Object"
				      },
				      "parseJSON": {
				        "!doc": "Phaser.TilemapParser.parseJSON",
				        "!type": "fn(json: +Object) -> +Object"
				      },
				      "!doc": "Phaser.TilemapParser",
				      "parse": {
				        "!doc": "Phaser.TilemapParser.parse",
				        "!type": "fn(game: +Phaser.Game, key: +String, tileWidth: +Number, tileHeight: +Number, width: +Number, height: +Number) -> +Object"
				      },
				      "!type": "fn()",
				      "prototype": {},
				      "parseCSV": {
				        "!doc": "Phaser.TilemapParser.parseCSV",
				        "!type": "fn(data: +String, tileWidth: +Number, tileHeight: +Number) -> +Object"
				      }
				    },
				    "Creature": {
				      "init": {
				        "!doc": "Phaser.Creature.init",
				        "!type": "fn()"
				      },
				      "install": {
				        "!doc": "Phaser.Creature.install",
				        "!type": "fn()"
				      },
				      "!doc": "Phaser.Creature",
				      "!type": "fn(game: +Phaser.Game, x: +Number, y: +Number, key: +String, mesh: +String, animation: +String)",
				      "prototype": {
				        "play": {
				          "!doc": "Phaser.Creature.play",
				          "!type": "fn(loop: +Boolean)"
				        },
				        "parent": {
				          "!doc": "Phaser.Creature.parent",
				          "!type": "+PIXI.DisplayObjectContainer"
				        },
				        "lifespan": {
				          "!doc": "Phaser.Creature.lifespan",
				          "!type": "+Number"
				        },
				        "type": {
				          "!doc": "Phaser.Creature.type",
				          "!type": "+Number"
				        },
				        "inCamera": {
				          "!doc": "Phaser.Creature.inCamera",
				          "!type": "+Boolean"
				        },
				        "children": {
				          "!doc": "Phaser.Creature.children",
				          "!type": "+Array_DisplayObject_"
				        },
				        "loop": {
				          "!doc": "Phaser.Creature.loop",
				          "!type": "+Boolean"
				        },
				        "pivot": {
				          "!doc": "Phaser.Creature.pivot",
				          "!type": "+Phaser.Point"
				        },
				        "revive": {
				          "!doc": "Phaser.Creature.revive",
				          "!type": "fn(health: +Number) -> +PIXI.DisplayObject"
				        },
				        "fixedToCamera": {
				          "!doc": "Phaser.Creature.fixedToCamera",
				          "!type": "+Boolean"
				        },
				        "renderOrderID": {
				          "!doc": "Phaser.Creature.renderOrderID",
				          "!type": "+Number"
				        },
				        "bringToTop": {
				          "!doc": "Phaser.Creature.bringToTop",
				          "!type": "fn() -> +PIXI.DisplayObject"
				        },
				        "events": {
				          "!doc": "Phaser.Creature.events",
				          "!type": "+Phaser.Events"
				        },
				        "moveUp": {
				          "!doc": "Phaser.Creature.moveUp",
				          "!type": "fn() -> +PIXI.DisplayObject"
				        },
				        "previousRotation": {
				          "!doc": "Phaser.Creature.previousRotation",
				          "!type": "+Number"
				        },
				        "isPlaying": {
				          "!doc": "Phaser.Creature.isPlaying",
				          "!type": "+Boolean"
				        },
				        "visible": {
				          "!doc": "Phaser.Creature.visible",
				          "!type": "+Boolean"
				        },
				        "postUpdate": {
				          "!doc": "Phaser.Creature.postUpdate",
				          "!type": "fn()"
				        },
				        "cameraOffset": {
				          "!doc": "Phaser.Creature.cameraOffset",
				          "!type": "+Phaser.Point"
				        },
				        "destroy": {
				          "!doc": "Phaser.Creature.destroy",
				          "!type": "fn(destroyChildren: +Boolean)"
				        },
				        "moveDown": {
				          "!doc": "Phaser.Creature.moveDown",
				          "!type": "fn() -> +PIXI.DisplayObject"
				        },
				        "setAnimation": {
				          "!doc": "Phaser.Creature.setAnimation",
				          "!type": "fn(key: +String)"
				        },
				        "animation": {
				          "!doc": "Phaser.Creature.animation",
				          "!type": "+CreatureAnimation"
				        },
				        "worldPosition": {
				          "!doc": "Phaser.Creature.worldPosition",
				          "!type": "+Phaser.Point"
				        },
				        "stop": {
				          "!doc": "Phaser.Creature.stop",
				          "!type": "fn()"
				        },
				        "name": {
				          "!doc": "Phaser.Creature.name",
				          "!type": "+String"
				        },
				        "reset": {
				          "!doc": "Phaser.Creature.reset",
				          "!type": "fn(x: +Number, y: +Number, health: +Number) -> +PIXI.DisplayObject"
				        },
				        "position": {
				          "!doc": "Phaser.Creature.position",
				          "!type": "+Phaser.Point"
				        },
				        "preUpdate": {
				          "!doc": "Phaser.Creature.preUpdate",
				          "!type": "fn()"
				        },
				        "worldRotation": {
				          "!doc": "Phaser.Creature.worldRotation",
				          "!type": "+Number"
				        },
				        "filterArea": {
				          "!doc": "Phaser.Creature.filterArea",
				          "!type": "+Phaser.Rectangle"
				        },
				        "game": {
				          "!doc": "Phaser.Creature.game",
				          "!type": "+Phaser.Game"
				        },
				        "components": {
				          "!doc": "Phaser.Creature.components",
				          "!type": "+Object"
				        },
				        "renderable": {
				          "!doc": "Phaser.Creature.renderable",
				          "!type": "+Boolean"
				        },
				        "worldScale": {
				          "!doc": "Phaser.Creature.worldScale",
				          "!type": "+Phaser.Point"
				        },
				        "alive": {
				          "!doc": "Phaser.Creature.alive",
				          "!type": "+Boolean"
				        },
				        "vertices": {
				          "!doc": "Phaser.Creature.vertices",
				          "!type": "+PIXI.Float32Array"
				        },
				        "timeDelta": {
				          "!doc": "Phaser.Creature.timeDelta",
				          "!type": "+Number"
				        },
				        "update": {
				          "!doc": "Phaser.Creature.update",
				          "!type": "fn()"
				        },
				        "scale": {
				          "!doc": "Phaser.Creature.scale",
				          "!type": "+Phaser.Point"
				        },
				        "colors": {
				          "!doc": "Phaser.Creature.colors",
				          "!type": "+PIXI.Uint16Array"
				        },
				        "worldAlpha": {
				          "!doc": "Phaser.Creature.worldAlpha",
				          "!type": "+Number"
				        },
				        "creatureBoundsMin": {
				          "!doc": "Phaser.Creature.creatureBoundsMin",
				          "!type": "+Phaser.Point"
				        },
				        "world": {
				          "!doc": "Phaser.Creature.world",
				          "!type": "+Phaser.Point"
				        },
				        "animations": {
				          "!doc": "Phaser.Creature.animations",
				          "!type": "+Phaser.AnimationManager"
				        },
				        "alpha": {
				          "!doc": "Phaser.Creature.alpha",
				          "!type": "+Number"
				        },
				        "angle": {
				          "!doc": "Phaser.Creature.angle",
				          "!type": "+Number"
				        },
				        "key": {
				          "!doc": "Phaser.Creature.key",
				          "!type": "+String"
				        },
				        "debug": {
				          "!doc": "Phaser.Creature.debug",
				          "!type": "+Boolean"
				        },
				        "manager": {
				          "!doc": "Phaser.Creature.manager",
				          "!type": "+CreatureManager"
				        },
				        "texture": {
				          "!doc": "Phaser.Creature.texture",
				          "!type": "+PIXI.Texture"
				        },
				        "rotation": {
				          "!doc": "Phaser.Creature.rotation",
				          "!type": "+Number"
				        },
				        "sendToBack": {
				          "!doc": "Phaser.Creature.sendToBack",
				          "!type": "fn() -> +PIXI.DisplayObject"
				        },
				        "destroyPhase": {
				          "!doc": "Phaser.Creature.destroyPhase",
				          "!type": "+Boolean"
				        },
				        "kill": {
				          "!doc": "Phaser.Creature.kill",
				          "!type": "fn() -> +PIXI.DisplayObject"
				        },
				        "previousPosition": {
				          "!doc": "Phaser.Creature.previousPosition",
				          "!type": "+Phaser.Point"
				        },
				        "indices": {
				          "!doc": "Phaser.Creature.indices",
				          "!type": "+PIXI.Uint16Array"
				        },
				        "pendingDestroy": {
				          "!doc": "Phaser.Creature.pendingDestroy",
				          "!type": "+Boolean"
				        },
				        "uvs": {
				          "!doc": "Phaser.Creature.uvs",
				          "!type": "+PIXI.Float32Array"
				        },
				        "stage": {
				          "!doc": "Phaser.Creature.stage",
				          "!type": "+Phaser.Stage"
				        },
				        "hitArea": {
				          "!doc": "Phaser.Creature.hitArea",
				          "!type": "+Phaser.Rectangle"
				        },
				        "autoCull": {
				          "!doc": "Phaser.Creature.autoCull",
				          "!type": "+Boolean"
				        },
				        "exists": {
				          "!doc": "Phaser.Creature.exists",
				          "!type": "+Boolean"
				        },
				        "z": {
				          "!doc": "Phaser.Creature.z",
				          "!type": "+Number"
				        },
				        "creatureBoundsMax": {
				          "!doc": "Phaser.Creature.creatureBoundsMax",
				          "!type": "+Phaser.Point"
				        },
				        "fresh": {
				          "!doc": "Phaser.Creature.fresh",
				          "!type": "+Boolean"
				        }
				      }
				    },
				    "POLYGON": {
				      "!doc": "Phaser.POLYGON",
				      "!type": "+Number"
				    },
				    "Rectangle": {
				      "inflatePoint": {
				        "!doc": "Phaser.Rectangle.inflatePoint",
				        "!type": "fn(a: +Phaser.Rectangle, point: +Phaser.Point) -> +Phaser.Rectangle"
				      },
				      "!doc": "Phaser.Rectangle",
				      "sameDimensions": {
				        "!doc": "Phaser.Rectangle.sameDimensions",
				        "!type": "fn(a: +Rectangle_like, b: +Rectangle_like) -> +Boolean"
				      },
				      "!type": "fn(x: +Number, y: +Number, width: +Number, height: +Number)",
				      "containsPoint": {
				        "!doc": "Phaser.Rectangle.containsPoint",
				        "!type": "fn(a: +Phaser.Rectangle, point: +Phaser.Point) -> +Boolean"
				      },
				      "prototype": {
				        "ceilAll": {
				          "!doc": "Phaser.Rectangle.ceilAll",
				          "!type": "fn()"
				        },
				        "centerY": {
				          "!doc": "Phaser.Rectangle.centerY",
				          "!type": "+Number"
				        },
				        "intersects": {
				          "!doc": "Phaser.Rectangle.intersects",
				          "!type": "fn(b: +Phaser.Rectangle) -> +Boolean"
				        },
				        "centerX": {
				          "!doc": "Phaser.Rectangle.centerX",
				          "!type": "+Number"
				        },
				        "bottomRight": {
				          "!doc": "Phaser.Rectangle.bottomRight",
				          "!type": "+Phaser.Point"
				        },
				        "offsetPoint": {
				          "!doc": "Phaser.Rectangle.offsetPoint",
				          "!type": "fn(point: +Phaser.Point) -> +Phaser.Rectangle"
				        },
				        "scale": {
				          "!doc": "Phaser.Rectangle.scale",
				          "!type": "fn(x: +Number, y: +Number) -> +Phaser.Rectangle"
				        },
				        "type": {
				          "!doc": "Phaser.Rectangle.type",
				          "!type": "+Number"
				        },
				        "aabb": {
				          "!doc": "Phaser.Rectangle.aabb",
				          "!type": "fn(points: +Array._Phaser.Point_, out: +Phaser.Rectangle) -> +Phaser.Rectangle"
				        },
				        "empty": {
				          "!doc": "Phaser.Rectangle.empty",
				          "!type": "+Boolean"
				        },
				        "copyTo": {
				          "!doc": "Phaser.Rectangle.copyTo",
				          "!type": "fn(source: +Object) -> +Object"
				        },
				        "random": {
				          "!doc": "Phaser.Rectangle.random",
				          "!type": "fn(out: +Phaser.Point) -> +Phaser.Point"
				        },
				        "top": {
				          "!doc": "Phaser.Rectangle.top",
				          "!type": "+Number"
				        },
				        "intersection": {
				          "!doc": "Phaser.Rectangle.intersection",
				          "!type": "fn(b: +Phaser.Rectangle, out: +Phaser.Rectangle) -> +Phaser.Rectangle"
				        },
				        "halfWidth": {
				          "!doc": "Phaser.Rectangle.halfWidth",
				          "!type": "+Number"
				        },
				        "floor": {
				          "!doc": "Phaser.Rectangle.floor",
				          "!type": "fn()"
				        },
				        "height": {
				          "!doc": "Phaser.Rectangle.height",
				          "!type": "+Number"
				        },
				        "bottomLeft": {
				          "!doc": "Phaser.Rectangle.bottomLeft",
				          "!type": "+Phaser.Point"
				        },
				        "offset": {
				          "!doc": "Phaser.Rectangle.offset",
				          "!type": "fn(dx: +Number, dy: +Number) -> +Phaser.Rectangle"
				        },
				        "centerOn": {
				          "!doc": "Phaser.Rectangle.centerOn",
				          "!type": "fn(x: +Number, y: +Number) -> +Phaser.Rectangle"
				        },
				        "floorAll": {
				          "!doc": "Phaser.Rectangle.floorAll",
				          "!type": "fn()"
				        },
				        "halfHeight": {
				          "!doc": "Phaser.Rectangle.halfHeight",
				          "!type": "+Number"
				        },
				        "bottom": {
				          "!doc": "Phaser.Rectangle.bottom",
				          "!type": "+Number"
				        },
				        "topRight": {
				          "!doc": "Phaser.Rectangle.topRight",
				          "!type": "+Phaser.Point"
				        },
				        "ceil": {
				          "!doc": "Phaser.Rectangle.ceil",
				          "!type": "fn()"
				        },
				        "union": {
				          "!doc": "Phaser.Rectangle.union",
				          "!type": "fn(b: +Phaser.Rectangle, out: +Phaser.Rectangle) -> +Phaser.Rectangle"
				        },
				        "right": {
				          "!doc": "Phaser.Rectangle.right",
				          "!type": "+Number"
				        },
				        "copyFrom": {
				          "!doc": "Phaser.Rectangle.copyFrom",
				          "!type": "fn(source: +Object) -> +Phaser.Rectangle"
				        },
				        "volume": {
				          "!doc": "Phaser.Rectangle.volume",
				          "!type": "+Number"
				        },
				        "contains": {
				          "!doc": "Phaser.Rectangle.contains",
				          "!type": "fn(x: +Number, y: +Number) -> +Boolean"
				        },
				        "size": {
				          "!doc": "Phaser.Rectangle.size",
				          "!type": "fn(output: +Phaser.Point) -> +Phaser.Point"
				        },
				        "inflate": {
				          "!doc": "Phaser.Rectangle.inflate",
				          "!type": "fn(dx: +Number, dy: +Number) -> +Phaser.Rectangle"
				        },
				        "left": {
				          "!doc": "Phaser.Rectangle.left",
				          "!type": "+Number"
				        },
				        "equals": {
				          "!doc": "Phaser.Rectangle.equals",
				          "!type": "fn(b: +Phaser.Rectangle) -> +Boolean"
				        },
				        "perimeter": {
				          "!doc": "Phaser.Rectangle.perimeter",
				          "!type": "+Number"
				        },
				        "topLeft": {
				          "!doc": "Phaser.Rectangle.topLeft",
				          "!type": "+Phaser.Point"
				        },
				        "clone": {
				          "!doc": "Phaser.Rectangle.clone",
				          "!type": "fn(output: +Phaser.Rectangle) -> +Phaser.Rectangle"
				        },
				        "x": {
				          "!doc": "Phaser.Rectangle.x",
				          "!type": "+Number"
				        },
				        "width": {
				          "!doc": "Phaser.Rectangle.width",
				          "!type": "+Number"
				        },
				        "setTo": {
				          "!doc": "Phaser.Rectangle.setTo",
				          "!type": "fn(x: +Number, y: +Number, width: +Number, height: +Number) -> +Phaser.Rectangle"
				        },
				        "resize": {
				          "!doc": "Phaser.Rectangle.resize",
				          "!type": "fn(width: +Number, height: +Number) -> +Phaser.Rectangle"
				        },
				        "y": {
				          "!doc": "Phaser.Rectangle.y",
				          "!type": "+Number"
				        },
				        "toString": {
				          "!doc": "Phaser.Rectangle.toString",
				          "!type": "fn() -> +String"
				        },
				        "randomX": {
				          "!doc": "Phaser.Rectangle.randomX",
				          "!type": "+Number"
				        },
				        "containsRect": {
				          "!doc": "Phaser.Rectangle.containsRect",
				          "!type": "fn(b: +Phaser.Rectangle) -> +Boolean"
				        },
				        "intersectsRaw": {
				          "!doc": "Phaser.Rectangle.intersectsRaw",
				          "!type": "fn(left: +Number, right: +Number, top: +Number, bottom: +Number, tolerance: +Number) -> +Boolean"
				        },
				        "randomY": {
				          "!doc": "Phaser.Rectangle.randomY",
				          "!type": "+Number"
				        }
				      },
				      "containsRaw": {
				        "!doc": "Phaser.Rectangle.containsRaw",
				        "!type": "fn(rx: +Number, ry: +Number, rw: +Number, rh: +Number, x: +Number, y: +Number) -> +Boolean"
				      }
				    },
				    "TEXT": {
				      "!doc": "Phaser.TEXT",
				      "!type": "+Number"
				    },
				    "Image": {
				      "init": {
				        "!doc": "Phaser.Image.init",
				        "!type": "fn()"
				      },
				      "install": {
				        "!doc": "Phaser.Image.install",
				        "!type": "fn()"
				      },
				      "!doc": "Phaser.Image",
				      "!type": "fn(game: +Phaser.Game, x: +Number, y: +Number, key: +String, frame: +String)",
				      "prototype": {
				        "play": {
				          "!doc": "Phaser.Image.play",
				          "!type": "fn(name: +String, frameRate: +Number, loop: +Boolean, killOnComplete: +Boolean) -> +Phaser.Animation"
				        },
				        "parent": {
				          "!doc": "Phaser.Image.parent",
				          "!type": "+PIXI.DisplayObjectContainer"
				        },
				        "lifespan": {
				          "!doc": "Phaser.Image.lifespan",
				          "!type": "+Number"
				        },
				        "type": {
				          "!doc": "Phaser.Image.type",
				          "!type": "+Number"
				        },
				        "inCamera": {
				          "!doc": "Phaser.Image.inCamera",
				          "!type": "+Boolean"
				        },
				        "offsetX": {
				          "!doc": "Phaser.Image.offsetX",
				          "!type": "+Number"
				        },
				        "resizeFrame": {
				          "!doc": "Phaser.Image.resizeFrame",
				          "!type": "fn(parent: +Object, width: +Number, height: +Number)"
				        },
				        "tintedTexture": {
				          "!doc": "Phaser.Image.tintedTexture",
				          "!type": "+Phaser.Canvas"
				        },
				        "offsetY": {
				          "!doc": "Phaser.Image.offsetY",
				          "!type": "+Number"
				        },
				        "children": {
				          "!doc": "Phaser.Image.children",
				          "!type": "+Array_DisplayObject_"
				        },
				        "pivot": {
				          "!doc": "Phaser.Image.pivot",
				          "!type": "+Phaser.Point"
				        },
				        "revive": {
				          "!doc": "Phaser.Image.revive",
				          "!type": "fn(health: +Number) -> +PIXI.DisplayObject"
				        },
				        "fixedToCamera": {
				          "!doc": "Phaser.Image.fixedToCamera",
				          "!type": "+Boolean"
				        },
				        "renderOrderID": {
				          "!doc": "Phaser.Image.renderOrderID",
				          "!type": "+Number"
				        },
				        "bringToTop": {
				          "!doc": "Phaser.Image.bringToTop",
				          "!type": "fn() -> +PIXI.DisplayObject"
				        },
				        "events": {
				          "!doc": "Phaser.Image.events",
				          "!type": "+Phaser.Events"
				        },
				        "moveUp": {
				          "!doc": "Phaser.Image.moveUp",
				          "!type": "fn() -> +PIXI.DisplayObject"
				        },
				        "previousRotation": {
				          "!doc": "Phaser.Image.previousRotation",
				          "!type": "+Number"
				        },
				        "visible": {
				          "!doc": "Phaser.Image.visible",
				          "!type": "+Boolean"
				        },
				        "postUpdate": {
				          "!doc": "Phaser.Image.postUpdate",
				          "!type": "fn()"
				        },
				        "bottom": {
				          "!doc": "Phaser.Image.bottom",
				          "!type": "+Number"
				        },
				        "cameraOffset": {
				          "!doc": "Phaser.Image.cameraOffset",
				          "!type": "+Phaser.Point"
				        },
				        "smoothed": {
				          "!doc": "Phaser.Image.smoothed",
				          "!type": "+Boolean"
				        },
				        "destroy": {
				          "!doc": "Phaser.Image.destroy",
				          "!type": "fn(destroyChildren: +Boolean)"
				        },
				        "moveDown": {
				          "!doc": "Phaser.Image.moveDown",
				          "!type": "fn() -> +PIXI.DisplayObject"
				        },
				        "updateCrop": {
				          "!doc": "Phaser.Image.updateCrop",
				          "!type": "fn()"
				        },
				        "input": {
				          "!doc": "Phaser.Image.input",
				          "!type": "+Phaser.InputHandler"
				        },
				        "worldPosition": {
				          "!doc": "Phaser.Image.worldPosition",
				          "!type": "+Phaser.Point"
				        },
				        "overlap": {
				          "!doc": "Phaser.Image.overlap",
				          "!type": "fn(displayObject: +Phaser.Sprite) -> +Boolean"
				        },
				        "left": {
				          "!doc": "Phaser.Image.left",
				          "!type": "+Number"
				        },
				        "loadTexture": {
				          "!doc": "Phaser.Image.loadTexture",
				          "!type": "fn(key: +String, frame: +String, stopAnimation: +Boolean)"
				        },
				        "name": {
				          "!doc": "Phaser.Image.name",
				          "!type": "+String"
				        },
				        "reset": {
				          "!doc": "Phaser.Image.reset",
				          "!type": "fn(x: +Number, y: +Number, health: +Number) -> +PIXI.DisplayObject"
				        },
				        "position": {
				          "!doc": "Phaser.Image.position",
				          "!type": "+Phaser.Point"
				        },
				        "preUpdate": {
				          "!doc": "Phaser.Image.preUpdate",
				          "!type": "fn()"
				        },
				        "crop": {
				          "!doc": "Phaser.Image.crop",
				          "!type": "fn(rect: +Phaser.Rectangle, copy: +Boolean)"
				        },
				        "frame": {
				          "!doc": "Phaser.Image.frame",
				          "!type": "+Number"
				        },
				        "worldRotation": {
				          "!doc": "Phaser.Image.worldRotation",
				          "!type": "+Number"
				        },
				        "filterArea": {
				          "!doc": "Phaser.Image.filterArea",
				          "!type": "+Phaser.Rectangle"
				        },
				        "shader": {
				          "!doc": "Phaser.Image.shader",
				          "!type": "+PIXI.AbstractFilter"
				        },
				        "cropRect": {
				          "!doc": "Phaser.Image.cropRect",
				          "!type": "+Phaser.Rectangle"
				        },
				        "game": {
				          "!doc": "Phaser.Image.game",
				          "!type": "+Phaser.Game"
				        },
				        "components": {
				          "!doc": "Phaser.Image.components",
				          "!type": "+Object"
				        },
				        "renderable": {
				          "!doc": "Phaser.Image.renderable",
				          "!type": "+Boolean"
				        },
				        "worldScale": {
				          "!doc": "Phaser.Image.worldScale",
				          "!type": "+Phaser.Point"
				        },
				        "alive": {
				          "!doc": "Phaser.Image.alive",
				          "!type": "+Boolean"
				        },
				        "update": {
				          "!doc": "Phaser.Image.update",
				          "!type": "fn()"
				        },
				        "scale": {
				          "!doc": "Phaser.Image.scale",
				          "!type": "+Phaser.Point"
				        },
				        "tint": {
				          "!doc": "Phaser.Image.tint",
				          "!type": "+Number"
				        },
				        "inputEnabled": {
				          "!doc": "Phaser.Image.inputEnabled",
				          "!type": "+Boolean"
				        },
				        "worldAlpha": {
				          "!doc": "Phaser.Image.worldAlpha",
				          "!type": "+Number"
				        },
				        "world": {
				          "!doc": "Phaser.Image.world",
				          "!type": "+Phaser.Point"
				        },
				        "top": {
				          "!doc": "Phaser.Image.top",
				          "!type": "+Number"
				        },
				        "setFrame": {
				          "!doc": "Phaser.Image.setFrame",
				          "!type": "fn(frame: +Phaser.Frame)"
				        },
				        "animations": {
				          "!doc": "Phaser.Image.animations",
				          "!type": "+Phaser.AnimationManager"
				        },
				        "alpha": {
				          "!doc": "Phaser.Image.alpha",
				          "!type": "+Number"
				        },
				        "angle": {
				          "!doc": "Phaser.Image.angle",
				          "!type": "+Number"
				        },
				        "key": {
				          "!doc": "Phaser.Image.key",
				          "!type": "+String"
				        },
				        "debug": {
				          "!doc": "Phaser.Image.debug",
				          "!type": "+Boolean"
				        },
				        "frameName": {
				          "!doc": "Phaser.Image.frameName",
				          "!type": "+String"
				        },
				        "texture": {
				          "!doc": "Phaser.Image.texture",
				          "!type": "+PIXI.Texture"
				        },
				        "rotation": {
				          "!doc": "Phaser.Image.rotation",
				          "!type": "+Number"
				        },
				        "sendToBack": {
				          "!doc": "Phaser.Image.sendToBack",
				          "!type": "fn() -> +PIXI.DisplayObject"
				        },
				        "destroyPhase": {
				          "!doc": "Phaser.Image.destroyPhase",
				          "!type": "+Boolean"
				        },
				        "right": {
				          "!doc": "Phaser.Image.right",
				          "!type": "+Number"
				        },
				        "kill": {
				          "!doc": "Phaser.Image.kill",
				          "!type": "fn() -> +PIXI.DisplayObject"
				        },
				        "resetFrame": {
				          "!doc": "Phaser.Image.resetFrame",
				          "!type": "fn()"
				        },
				        "previousPosition": {
				          "!doc": "Phaser.Image.previousPosition",
				          "!type": "+Phaser.Point"
				        },
				        "pendingDestroy": {
				          "!doc": "Phaser.Image.pendingDestroy",
				          "!type": "+Boolean"
				        },
				        "stage": {
				          "!doc": "Phaser.Image.stage",
				          "!type": "+Phaser.Stage"
				        },
				        "blendMode": {
				          "!doc": "Phaser.Image.blendMode",
				          "!type": "+Number"
				        },
				        "hitArea": {
				          "!doc": "Phaser.Image.hitArea",
				          "!type": "+Phaser.Rectangle"
				        },
				        "anchor": {
				          "!doc": "Phaser.Image.anchor",
				          "!type": "+Phaser.Point"
				        },
				        "autoCull": {
				          "!doc": "Phaser.Image.autoCull",
				          "!type": "+Boolean"
				        },
				        "exists": {
				          "!doc": "Phaser.Image.exists",
				          "!type": "+Boolean"
				        },
				        "z": {
				          "!doc": "Phaser.Image.z",
				          "!type": "+Number"
				        },
				        "fresh": {
				          "!doc": "Phaser.Image.fresh",
				          "!type": "+Boolean"
				        }
				      }
				    },
				    "Math": {
				      "!doc": "Phaser.Math",
				      "Phaser.Math#PI2": {
				        "!doc": "Phaser.Math.Phaser.Math#PI2",
				        "!type": "+Number"
				      },
				      "!type": "fn()",
				      "prototype": {
				        "smoothstep": {
				          "!doc": "Phaser.Math.smoothstep",
				          "!type": "fn(x: +Number, min: +Number, max: +Number) -> +Number"
				        },
				        "sinCosGenerator": {
				          "!doc": "Phaser.Math.sinCosGenerator",
				          "!type": "fn(length: +Number, sinAmplitude: +Number, cosAmplitude: +Number, frequency: +Number) -> +Object"
				        },
				        "sign": {
				          "!doc": "Phaser.Math.sign",
				          "!type": "fn(x: +Number) -> +Number"
				        },
				        "radToDeg": {
				          "!doc": "Phaser.Math.radToDeg",
				          "!type": "fn(radians: +Number) -> +Number"
				        },
				        "snapToCeil": {
				          "!doc": "Phaser.Math.snapToCeil",
				          "!type": "fn(input: +Number, gap: +Number, start: +Number) -> +Number"
				        },
				        "angleBetween": {
				          "!doc": "Phaser.Math.angleBetween",
				          "!type": "fn(x1: +Number, y1: +Number, x2: +Number, y2: +Number) -> +Number"
				        },
				        "angleBetweenPointsY": {
				          "!doc": "Phaser.Math.angleBetweenPointsY",
				          "!type": "fn(point1: +Phaser.Point, point2: +Phaser.Point) -> +Number"
				        },
				        "wrapAngle": {
				          "!doc": "Phaser.Math.wrapAngle",
				          "!type": "fn(angle: +Number, radians: +Boolean) -> +Number"
				        },
				        "reverseAngle": {
				          "!doc": "Phaser.Math.reverseAngle",
				          "!type": "fn(angleRad: +Number) -> +Number"
				        },
				        "maxAdd": {
				          "!doc": "Phaser.Math.maxAdd",
				          "!type": "fn(value: +Number, amount: +Number, max: +Number) -> +Number"
				        },
				        "snapToFloor": {
				          "!doc": "Phaser.Math.snapToFloor",
				          "!type": "fn(input: +Number, gap: +Number, start: +Number) -> +Number"
				        },
				        "Phaser.Math#PI2": {
				          "!doc": "Phaser.Math.Phaser.Math#PI2",
				          "!type": "+Number"
				        },
				        "snapTo": {
				          "!doc": "Phaser.Math.snapTo",
				          "!type": "fn(input: +Number, gap: +Number, start: +Number) -> +Number"
				        },
				        "wrapValue": {
				          "!doc": "Phaser.Math.wrapValue",
				          "!type": "fn(value: +Number, amount: +Number, max: +Number) -> +Number"
				        },
				        "clamp": {
				          "!doc": "Phaser.Math.clamp",
				          "!type": "fn(x: +Number, a: +Number, b: +Number) -> +Number"
				        },
				        "clampBottom": {
				          "!doc": "Phaser.Math.clampBottom",
				          "!type": "fn(x: +Number, a: +Number) -> +Number"
				        },
				        "bernstein": {
				          "!doc": "Phaser.Math.bernstein",
				          "!type": "fn(n: +Number, i: +Number) -> +Number"
				        },
				        "fuzzyLessThan": {
				          "!doc": "Phaser.Math.fuzzyLessThan",
				          "!type": "fn(a: +Number, b: +Number, epsilon: +Number) -> +Boolean"
				        },
				        "maxProperty": {
				          "!doc": "Phaser.Math.maxProperty",
				          "!type": "fn() -> +Number"
				        },
				        "smootherstep": {
				          "!doc": "Phaser.Math.smootherstep",
				          "!type": "fn(x: +Number, min: +Number, max: +Number) -> +Number"
				        },
				        "catmullRomInterpolation": {
				          "!doc": "Phaser.Math.catmullRomInterpolation",
				          "!type": "fn(v: +Array, k: +Number) -> +Number"
				        },
				        "normalizeAngle": {
				          "!doc": "Phaser.Math.normalizeAngle",
				          "!type": "fn(angleRad: +Number) -> +Number"
				        },
				        "difference": {
				          "!doc": "Phaser.Math.difference",
				          "!type": "fn(a: +Number, b: +Number) -> +Number"
				        },
				        "fuzzyFloor": {
				          "!doc": "Phaser.Math.fuzzyFloor",
				          "!type": "fn(val: +Number, epsilon: +Number) -> +Number"
				        },
				        "roundTo": {
				          "!doc": "Phaser.Math.roundTo",
				          "!type": "fn(value: +Number, place: +Number, base: +Number) -> +Number"
				        },
				        "average": {
				          "!doc": "Phaser.Math.average",
				          "!type": "fn() -> +Number"
				        },
				        "roundAwayFromZero": {
				          "!doc": "Phaser.Math.roundAwayFromZero",
				          "!type": "fn(value: +Number) -> +Number"
				        },
				        "distance": {
				          "!doc": "Phaser.Math.distance",
				          "!type": "fn(x1: +Number, y1: +Number, x2: +Number, y2: +Number) -> +Number"
				        },
				        "angleBetweenPoints": {
				          "!doc": "Phaser.Math.angleBetweenPoints",
				          "!type": "fn(point1: +Phaser.Point, point2: +Phaser.Point) -> +Number"
				        },
				        "isEven": {
				          "!doc": "Phaser.Math.isEven",
				          "!type": "fn(n: +Number) -> +Boolean"
				        },
				        "fuzzyEqual": {
				          "!doc": "Phaser.Math.fuzzyEqual",
				          "!type": "fn(a: +Number, b: +Number, epsilon: +Number) -> +Boolean"
				        },
				        "factorial": {
				          "!doc": "Phaser.Math.factorial",
				          "!type": "fn(value: +Number) -> +Number"
				        },
				        "minProperty": {
				          "!doc": "Phaser.Math.minProperty",
				          "!type": "fn() -> +Number"
				        },
				        "chanceRoll": {
				          "!doc": "Phaser.Math.chanceRoll",
				          "!type": "fn(chance: +Number) -> +Boolean"
				        },
				        "distanceSq": {
				          "!doc": "Phaser.Math.distanceSq",
				          "!type": "fn(x1: +Number, y1: +Number, x2: +Number, y2: +Number) -> +Number"
				        },
				        "percent": {
				          "!doc": "Phaser.Math.percent",
				          "!type": "fn(a: +Number, b: +Number, base: +Number) -> +Number"
				        },
				        "angleBetweenY": {
				          "!doc": "Phaser.Math.angleBetweenY",
				          "!type": "fn(x1: +Number, y1: +Number, x2: +Number, y2: +Number) -> +Number"
				        },
				        "ceilTo": {
				          "!doc": "Phaser.Math.ceilTo",
				          "!type": "fn(value: +Number, place: +Number, base: +Number) -> +Number"
				        },
				        "min": {
				          "!doc": "Phaser.Math.min",
				          "!type": "fn() -> +Number"
				        },
				        "degToRad": {
				          "!doc": "Phaser.Math.degToRad",
				          "!type": "fn(degrees: +Number) -> +Number"
				        },
				        "isOdd": {
				          "!doc": "Phaser.Math.isOdd",
				          "!type": "fn(n: +Number) -> +Boolean"
				        },
				        "catmullRom": {
				          "!doc": "Phaser.Math.catmullRom",
				          "!type": "fn(p0: +Number, p1: +Number, p2: +Number, p3: +Number, t: +Number) -> +Number"
				        },
				        "fuzzyGreaterThan": {
				          "!doc": "Phaser.Math.fuzzyGreaterThan",
				          "!type": "fn(a: +Number, b: +Number, epsilon: +Number) -> +Boolean"
				        },
				        "bezierInterpolation": {
				          "!doc": "Phaser.Math.bezierInterpolation",
				          "!type": "fn(v: +Array, k: +Number) -> +Number"
				        },
				        "linearInterpolation": {
				          "!doc": "Phaser.Math.linearInterpolation",
				          "!type": "fn(v: +Array, k: +Number) -> +Number"
				        },
				        "linear": {
				          "!doc": "Phaser.Math.linear",
				          "!type": "fn(p0: +Number, p1: +Number, t: +Number) -> +Number"
				        },
				        "shear": {
				          "!doc": "Phaser.Math.shear",
				          "!type": "fn(n: +Number) -> +Number"
				        },
				        "max": {
				          "!doc": "Phaser.Math.max",
				          "!type": "fn() -> +Number"
				        },
				        "within": {
				          "!doc": "Phaser.Math.within",
				          "!type": "fn(a: +Number, b: +Number, tolerance: +Number) -> +Boolean"
				        },
				        "distancePow": {
				          "!doc": "Phaser.Math.distancePow",
				          "!type": "fn(x1: +Number, y1: +Number, x2: +Number, y2: +Number, pow: +Number) -> +Number"
				        },
				        "floorTo": {
				          "!doc": "Phaser.Math.floorTo",
				          "!type": "fn(value: +Number, place: +Number, base: +Number) -> +Number"
				        },
				        "fuzzyCeil": {
				          "!doc": "Phaser.Math.fuzzyCeil",
				          "!type": "fn(val: +Number, epsilon: +Number) -> +Number"
				        },
				        "minSub": {
				          "!doc": "Phaser.Math.minSub",
				          "!type": "fn(value: +Number, amount: +Number, min: +Number) -> +Number"
				        },
				        "mapLinear": {
				          "!doc": "Phaser.Math.mapLinear",
				          "!type": "fn(x: +Number, a1: +Number, a2: +Number, b1: +Number, b2: +Number) -> +Number"
				        },
				        "wrap": {
				          "!doc": "Phaser.Math.wrap",
				          "!type": "fn(value: +Number, min: +Number, max: +Number) -> +Number"
				        }
				      }
				    },
				    "Tileset": {
				      "!doc": "Phaser.Tileset",
				      "!type": "fn(name: +String, firstgid: +Number, width: +Number, height: +Number, margin: +Number, spacing: +Number, properties: +Object)",
				      "prototype": {
				        "image": {
				          "!doc": "Phaser.Tileset.image",
				          "!type": "+Object"
				        },
				        "columns": {
				          "!doc": "Phaser.Tileset.columns",
				          "!type": "+Number"
				        },
				        "tileSpacing": {
				          "!doc": "Phaser.Tileset.tileSpacing",
				          "!type": "+Number"
				        },
				        "draw": {
				          "!doc": "Phaser.Tileset.draw",
				          "!type": "fn(context: +CanvasRenderingContext2D, x: +Number, y: +Number, index: +Number)"
				        },
				        "firstgid": {
				          "!doc": "Phaser.Tileset.firstgid",
				          "!type": "+Number"
				        },
				        "tileWidth": {
				          "!doc": "Phaser.Tileset.tileWidth",
				          "!type": "+Number"
				        },
				        "rows": {
				          "!doc": "Phaser.Tileset.rows",
				          "!type": "+Number"
				        },
				        "tileMarge": {
				          "!doc": "Phaser.Tileset.tileMarge",
				          "!type": "+Number"
				        },
				        "setSpacing": {
				          "!doc": "Phaser.Tileset.setSpacing",
				          "!type": "fn(margin: +Number, spacing: +Number)"
				        },
				        "total": {
				          "!doc": "Phaser.Tileset.total",
				          "!type": "+Number"
				        },
				        "name": {
				          "!doc": "Phaser.Tileset.name",
				          "!type": "+String"
				        },
				        "containsTileIndex": {
				          "!doc": "Phaser.Tileset.containsTileIndex",
				          "!type": "fn() -> +Boolean"
				        },
				        "properties": {
				          "!doc": "Phaser.Tileset.properties",
				          "!type": "+Object"
				        },
				        "setImage": {
				          "!doc": "Phaser.Tileset.setImage",
				          "!type": "fn(image: +Image)"
				        },
				        "tileHeight": {
				          "!doc": "Phaser.Tileset.tileHeight",
				          "!type": "+Number"
				        }
				      }
				    },
				    "SoundManager": {
				      "!doc": "Phaser.SoundManager",
				      "!type": "fn(game: +Phaser.Game)",
				      "prototype": {
				        "play": {
				          "!doc": "Phaser.SoundManager.play",
				          "!type": "fn(key: +String, volume: +Number, loop: +Boolean) -> +Phaser.Sound"
				        },
				        "game": {
				          "!doc": "Phaser.SoundManager.game",
				          "!type": "+Phaser.Game"
				        },
				        "onMute": {
				          "!doc": "Phaser.SoundManager.onMute",
				          "!type": "+Phaser.Signal"
				        },
				        "update": {
				          "!doc": "Phaser.SoundManager.update",
				          "!type": "fn()"
				        },
				        "decode": {
				          "!doc": "Phaser.SoundManager.decode",
				          "!type": "fn(key: +String, sound: +Phaser.Sound)"
				        },
				        "removeByKey": {
				          "!doc": "Phaser.SoundManager.removeByKey",
				          "!type": "fn(key: +String) -> +Number"
				        },
				        "remove": {
				          "!doc": "Phaser.SoundManager.remove",
				          "!type": "fn(sound: +Phaser.Sound) -> +Boolean"
				        },
				        "stopAll": {
				          "!doc": "Phaser.SoundManager.stopAll",
				          "!type": "fn()"
				        },
				        "usingAudioTag": {
				          "!doc": "Phaser.SoundManager.usingAudioTag",
				          "!type": "+Boolean"
				        },
				        "addSprite": {
				          "!doc": "Phaser.SoundManager.addSprite",
				          "!type": "fn(key: +String) -> +Phaser.AudioSprite"
				        },
				        "context": {
				          "!doc": "Phaser.SoundManager.context",
				          "!type": "+AudioContext"
				        },
				        "setDecodedCallback": {
				          "!doc": "Phaser.SoundManager.setDecodedCallback",
				          "!type": "fn(files: +String, callback: +Function, callbackContext: +Object)"
				        },
				        "boot": {
				          "!doc": "Phaser.SoundManager.boot",
				          "!type": "fn()"
				        },
				        "onSoundDecode": {
				          "!doc": "Phaser.SoundManager.onSoundDecode",
				          "!type": "+Phaser.Signal"
				        },
				        "onUnMute": {
				          "!doc": "Phaser.SoundManager.onUnMute",
				          "!type": "+Phaser.Signal"
				        },
				        "add": {
				          "!doc": "Phaser.SoundManager.add",
				          "!type": "fn(key: +String, volume: +Number, loop: +Boolean, connect: +Boolean) -> +Phaser.Sound"
				        },
				        "pauseAll": {
				          "!doc": "Phaser.SoundManager.pauseAll",
				          "!type": "fn()"
				        },
				        "unlock": {
				          "!doc": "Phaser.SoundManager.unlock",
				          "!type": "fn() -> +Boolean"
				        },
				        "setTouchLock": {
				          "!doc": "Phaser.SoundManager.setTouchLock",
				          "!type": "fn()"
				        },
				        "resumeAll": {
				          "!doc": "Phaser.SoundManager.resumeAll",
				          "!type": "fn()"
				        },
				        "destroy": {
				          "!doc": "Phaser.SoundManager.destroy",
				          "!type": "fn()"
				        },
				        "mute": {
				          "!doc": "Phaser.SoundManager.mute",
				          "!type": "+Boolean"
				        },
				        "onVolumeChange": {
				          "!doc": "Phaser.SoundManager.onVolumeChange",
				          "!type": "+Phaser.Signal"
				        },
				        "volume": {
				          "!doc": "Phaser.SoundManager.volume",
				          "!type": "+Number"
				        },
				        "usingWebAudio": {
				          "!doc": "Phaser.SoundManager.usingWebAudio",
				          "!type": "+Boolean"
				        },
				        "channels": {
				          "!doc": "Phaser.SoundManager.channels",
				          "!type": "+Number"
				        },
				        "connectToMaster": {
				          "!doc": "Phaser.SoundManager.connectToMaster",
				          "!type": "+Boolean"
				        },
				        "noAudio": {
				          "!doc": "Phaser.SoundManager.noAudio",
				          "!type": "+Boolean"
				        },
				        "touchLocked": {
				          "!doc": "Phaser.SoundManager.touchLocked",
				          "!type": "+Boolean"
				        }
				      }
				    },
				    "Particle": {
				      "init": {
				        "!doc": "Phaser.Particle.init",
				        "!type": "fn()"
				      },
				      "install": {
				        "!doc": "Phaser.Particle.install",
				        "!type": "fn()"
				      },
				      "!doc": "Phaser.Particle",
				      "!type": "fn(game: +Phaser.Game, x: +Number, y: +Number, key: +String, frame: +String)",
				      "prototype": {
				        "play": {
				          "!doc": "Phaser.Particle.play",
				          "!type": "fn(name: +String, frameRate: +Number, loop: +Boolean, killOnComplete: +Boolean) -> +Phaser.Animation"
				        },
				        "parent": {
				          "!doc": "Phaser.Particle.parent",
				          "!type": "+PIXI.DisplayObjectContainer"
				        },
				        "lifespan": {
				          "!doc": "Phaser.Particle.lifespan",
				          "!type": "+Number"
				        },
				        "outOfBoundsKill": {
				          "!doc": "Phaser.Particle.outOfBoundsKill",
				          "!type": "+Boolean"
				        },
				        "type": {
				          "!doc": "Phaser.Particle.type",
				          "!type": "+Number"
				        },
				        "resizeFrame": {
				          "!doc": "Phaser.Particle.resizeFrame",
				          "!type": "fn(parent: +Object, width: +Number, height: +Number)"
				        },
				        "children": {
				          "!doc": "Phaser.Particle.children",
				          "!type": "+Array_DisplayObject_"
				        },
				        "setScaleData": {
				          "!doc": "Phaser.Particle.setScaleData",
				          "!type": "fn()"
				        },
				        "pivot": {
				          "!doc": "Phaser.Particle.pivot",
				          "!type": "+Phaser.Point"
				        },
				        "maxHealth": {
				          "!doc": "Phaser.Particle.maxHealth",
				          "!type": "+Number"
				        },
				        "revive": {
				          "!doc": "Phaser.Particle.revive",
				          "!type": "fn(health: +Number) -> +PIXI.DisplayObject"
				        },
				        "scaleData": {
				          "!doc": "Phaser.Particle.scaleData",
				          "!type": "+Array"
				        },
				        "bringToTop": {
				          "!doc": "Phaser.Particle.bringToTop",
				          "!type": "fn() -> +PIXI.DisplayObject"
				        },
				        "events": {
				          "!doc": "Phaser.Particle.events",
				          "!type": "+Phaser.Events"
				        },
				        "moveUp": {
				          "!doc": "Phaser.Particle.moveUp",
				          "!type": "fn() -> +PIXI.DisplayObject"
				        },
				        "physicsType": {
				          "!doc": "Phaser.Particle.physicsType",
				          "!type": "+Number"
				        },
				        "postUpdate": {
				          "!doc": "Phaser.Particle.postUpdate",
				          "!type": "fn()"
				        },
				        "smoothed": {
				          "!doc": "Phaser.Particle.smoothed",
				          "!type": "+Boolean"
				        },
				        "destroy": {
				          "!doc": "Phaser.Particle.destroy",
				          "!type": "fn(destroyChildren: +Boolean)"
				        },
				        "input": {
				          "!doc": "Phaser.Particle.input",
				          "!type": "+Phaser.InputHandler"
				        },
				        "worldPosition": {
				          "!doc": "Phaser.Particle.worldPosition",
				          "!type": "+Phaser.Point"
				        },
				        "left": {
				          "!doc": "Phaser.Particle.left",
				          "!type": "+Number"
				        },
				        "reset": {
				          "!doc": "Phaser.Particle.reset",
				          "!type": "fn(x: +Number, y: +Number, health: +Number) -> +_Phaser.Particle__This_instance."
				        },
				        "preUpdate": {
				          "!doc": "Phaser.Particle.preUpdate",
				          "!type": "fn() -> +Boolean"
				        },
				        "filterArea": {
				          "!doc": "Phaser.Particle.filterArea",
				          "!type": "+Phaser.Rectangle"
				        },
				        "damage": {
				          "!doc": "Phaser.Particle.damage",
				          "!type": "fn(amount: +Number) -> +Phaser.Sprite"
				        },
				        "components": {
				          "!doc": "Phaser.Particle.components",
				          "!type": "+Object"
				        },
				        "worldScale": {
				          "!doc": "Phaser.Particle.worldScale",
				          "!type": "+Phaser.Point"
				        },
				        "alive": {
				          "!doc": "Phaser.Particle.alive",
				          "!type": "+Boolean"
				        },
				        "transformCallback": {
				          "!doc": "Phaser.Particle.transformCallback",
				          "!type": "+Function"
				        },
				        "inWorld": {
				          "!doc": "Phaser.Particle.inWorld",
				          "!type": "+Boolean"
				        },
				        "worldAlpha": {
				          "!doc": "Phaser.Particle.worldAlpha",
				          "!type": "+Number"
				        },
				        "world": {
				          "!doc": "Phaser.Particle.world",
				          "!type": "+Phaser.Point"
				        },
				        "top": {
				          "!doc": "Phaser.Particle.top",
				          "!type": "+Number"
				        },
				        "angle": {
				          "!doc": "Phaser.Particle.angle",
				          "!type": "+Number"
				        },
				        "setScaleMinMax": {
				          "!doc": "Phaser.Particle.setScaleMinMax",
				          "!type": "fn(minX: +Number, minY: +Number, maxX: +Number, maxY: +Number)"
				        },
				        "checkWorldBounds": {
				          "!doc": "Phaser.Particle.checkWorldBounds",
				          "!type": "+Boolean"
				        },
				        "key": {
				          "!doc": "Phaser.Particle.key",
				          "!type": "+String"
				        },
				        "texture": {
				          "!doc": "Phaser.Particle.texture",
				          "!type": "+PIXI.Texture"
				        },
				        "health": {
				          "!doc": "Phaser.Particle.health",
				          "!type": "+Number"
				        },
				        "destroyPhase": {
				          "!doc": "Phaser.Particle.destroyPhase",
				          "!type": "+Boolean"
				        },
				        "right": {
				          "!doc": "Phaser.Particle.right",
				          "!type": "+Number"
				        },
				        "kill": {
				          "!doc": "Phaser.Particle.kill",
				          "!type": "fn() -> +PIXI.DisplayObject"
				        },
				        "previousPosition": {
				          "!doc": "Phaser.Particle.previousPosition",
				          "!type": "+Phaser.Point"
				        },
				        "scaleMax": {
				          "!doc": "Phaser.Particle.scaleMax",
				          "!type": "+Phaser.Point"
				        },
				        "stage": {
				          "!doc": "Phaser.Particle.stage",
				          "!type": "+Phaser.Stage"
				        },
				        "anchor": {
				          "!doc": "Phaser.Particle.anchor",
				          "!type": "+Phaser.Point"
				        },
				        "autoCull": {
				          "!doc": "Phaser.Particle.autoCull",
				          "!type": "+Boolean"
				        },
				        "x": {
				          "!doc": "Phaser.Particle.x",
				          "!type": "+Number"
				        },
				        "exists": {
				          "!doc": "Phaser.Particle.exists",
				          "!type": "+Boolean"
				        },
				        "y": {
				          "!doc": "Phaser.Particle.y",
				          "!type": "+Number"
				        },
				        "z": {
				          "!doc": "Phaser.Particle.z",
				          "!type": "+Number"
				        },
				        "scaleMin": {
				          "!doc": "Phaser.Particle.scaleMin",
				          "!type": "+Phaser.Point"
				        },
				        "body": {
				          "!doc": "Phaser.Particle.body",
				          "!type": "+Phaser.Physics.Arcade.Body"
				        },
				        "inCamera": {
				          "!doc": "Phaser.Particle.inCamera",
				          "!type": "+Boolean"
				        },
				        "autoScale": {
				          "!doc": "Phaser.Particle.autoScale",
				          "!type": "+Boolean"
				        },
				        "offsetX": {
				          "!doc": "Phaser.Particle.offsetX",
				          "!type": "+Number"
				        },
				        "tintedTexture": {
				          "!doc": "Phaser.Particle.tintedTexture",
				          "!type": "+Phaser.Canvas"
				        },
				        "offsetY": {
				          "!doc": "Phaser.Particle.offsetY",
				          "!type": "+Number"
				        },
				        "fixedToCamera": {
				          "!doc": "Phaser.Particle.fixedToCamera",
				          "!type": "+Boolean"
				        },
				        "renderOrderID": {
				          "!doc": "Phaser.Particle.renderOrderID",
				          "!type": "+Number"
				        },
				        "previousRotation": {
				          "!doc": "Phaser.Particle.previousRotation",
				          "!type": "+Number"
				        },
				        "visible": {
				          "!doc": "Phaser.Particle.visible",
				          "!type": "+Boolean"
				        },
				        "bottom": {
				          "!doc": "Phaser.Particle.bottom",
				          "!type": "+Number"
				        },
				        "cameraOffset": {
				          "!doc": "Phaser.Particle.cameraOffset",
				          "!type": "+Phaser.Point"
				        },
				        "moveDown": {
				          "!doc": "Phaser.Particle.moveDown",
				          "!type": "fn() -> +PIXI.DisplayObject"
				        },
				        "updateCrop": {
				          "!doc": "Phaser.Particle.updateCrop",
				          "!type": "fn()"
				        },
				        "setAlphaData": {
				          "!doc": "Phaser.Particle.setAlphaData",
				          "!type": "fn()"
				        },
				        "overlap": {
				          "!doc": "Phaser.Particle.overlap",
				          "!type": "fn(displayObject: +Phaser.Sprite) -> +Boolean"
				        },
				        "autoAlpha": {
				          "!doc": "Phaser.Particle.autoAlpha",
				          "!type": "+Boolean"
				        },
				        "loadTexture": {
				          "!doc": "Phaser.Particle.loadTexture",
				          "!type": "fn(key: +String, frame: +String, stopAnimation: +Boolean)"
				        },
				        "name": {
				          "!doc": "Phaser.Particle.name",
				          "!type": "+String"
				        },
				        "position": {
				          "!doc": "Phaser.Particle.position",
				          "!type": "+Phaser.Point"
				        },
				        "crop": {
				          "!doc": "Phaser.Particle.crop",
				          "!type": "fn(rect: +Phaser.Rectangle, copy: +Boolean)"
				        },
				        "alphaData": {
				          "!doc": "Phaser.Particle.alphaData",
				          "!type": "+Array"
				        },
				        "frame": {
				          "!doc": "Phaser.Particle.frame",
				          "!type": "+Number"
				        },
				        "worldRotation": {
				          "!doc": "Phaser.Particle.worldRotation",
				          "!type": "+Number"
				        },
				        "shader": {
				          "!doc": "Phaser.Particle.shader",
				          "!type": "+PIXI.AbstractFilter"
				        },
				        "cropRect": {
				          "!doc": "Phaser.Particle.cropRect",
				          "!type": "+Phaser.Rectangle"
				        },
				        "game": {
				          "!doc": "Phaser.Particle.game",
				          "!type": "+Phaser.Game"
				        },
				        "renderable": {
				          "!doc": "Phaser.Particle.renderable",
				          "!type": "+Boolean"
				        },
				        "deltaZ": {
				          "!doc": "Phaser.Particle.deltaZ",
				          "!type": "+Number"
				        },
				        "transformCallbackContext": {
				          "!doc": "Phaser.Particle.transformCallbackContext",
				          "!type": "+Object"
				        },
				        "deltaX": {
				          "!doc": "Phaser.Particle.deltaX",
				          "!type": "+Number"
				        },
				        "deltaY": {
				          "!doc": "Phaser.Particle.deltaY",
				          "!type": "+Number"
				        },
				        "update": {
				          "!doc": "Phaser.Particle.update",
				          "!type": "fn()"
				        },
				        "scale": {
				          "!doc": "Phaser.Particle.scale",
				          "!type": "+Phaser.Point"
				        },
				        "onEmit": {
				          "!doc": "Phaser.Particle.onEmit",
				          "!type": "fn()"
				        },
				        "tint": {
				          "!doc": "Phaser.Particle.tint",
				          "!type": "+Number"
				        },
				        "inputEnabled": {
				          "!doc": "Phaser.Particle.inputEnabled",
				          "!type": "+Boolean"
				        },
				        "setFrame": {
				          "!doc": "Phaser.Particle.setFrame",
				          "!type": "fn(frame: +Phaser.Frame)"
				        },
				        "animations": {
				          "!doc": "Phaser.Particle.animations",
				          "!type": "+Phaser.AnimationManager"
				        },
				        "alpha": {
				          "!doc": "Phaser.Particle.alpha",
				          "!type": "+Number"
				        },
				        "heal": {
				          "!doc": "Phaser.Particle.heal",
				          "!type": "fn(amount: +Number) -> +Phaser.Sprite"
				        },
				        "debug": {
				          "!doc": "Phaser.Particle.debug",
				          "!type": "+Boolean"
				        },
				        "frameName": {
				          "!doc": "Phaser.Particle.frameName",
				          "!type": "+String"
				        },
				        "rotation": {
				          "!doc": "Phaser.Particle.rotation",
				          "!type": "+Number"
				        },
				        "sendToBack": {
				          "!doc": "Phaser.Particle.sendToBack",
				          "!type": "fn() -> +PIXI.DisplayObject"
				        },
				        "resetFrame": {
				          "!doc": "Phaser.Particle.resetFrame",
				          "!type": "fn()"
				        },
				        "pendingDestroy": {
				          "!doc": "Phaser.Particle.pendingDestroy",
				          "!type": "+Boolean"
				        },
				        "blendMode": {
				          "!doc": "Phaser.Particle.blendMode",
				          "!type": "+Number"
				        },
				        "hitArea": {
				          "!doc": "Phaser.Particle.hitArea",
				          "!type": "+Phaser.Rectangle"
				        },
				        "fresh": {
				          "!doc": "Phaser.Particle.fresh",
				          "!type": "+Boolean"
				        }
				      }
				    },
				    "PluginManager": {
				      "!doc": "Phaser.PluginManager",
				      "!type": "fn(game: +Phaser.Game)",
				      "prototype": {
				        "add": {
				          "!doc": "Phaser.PluginManager.add",
				          "!type": "fn(plugin: +Object, parameter: +any) -> +Phaser.Plugin"
				        },
				        "postRender": {
				          "!doc": "Phaser.PluginManager.postRender",
				          "!type": "fn()"
				        },
				        "removeAll": {
				          "!doc": "Phaser.PluginManager.removeAll",
				          "!type": "fn()"
				        },
				        "game": {
				          "!doc": "Phaser.PluginManager.game",
				          "!type": "+Phaser.Game"
				        },
				        "postUpdate": {
				          "!doc": "Phaser.PluginManager.postUpdate",
				          "!type": "fn()"
				        },
				        "plugins": {
				          "!doc": "Phaser.PluginManager.plugins",
				          "!type": "+Array._Phaser.Plugin_"
				        },
				        "update": {
				          "!doc": "Phaser.PluginManager.update",
				          "!type": "fn()"
				        },
				        "destroy": {
				          "!doc": "Phaser.PluginManager.destroy",
				          "!type": "fn()"
				        },
				        "preUpdate": {
				          "!doc": "Phaser.PluginManager.preUpdate",
				          "!type": "fn()"
				        },
				        "render": {
				          "!doc": "Phaser.PluginManager.render",
				          "!type": "fn()"
				        },
				        "remove": {
				          "!doc": "Phaser.PluginManager.remove",
				          "!type": "fn(plugin: +Phaser.Plugin)"
				        }
				      }
				    },
				    "CANVAS_FILTER": {
				      "!doc": "Phaser.CANVAS_FILTER",
				      "!type": "+Number"
				    },
				    "Matrix": {
				      "!doc": "Phaser.Matrix",
				      "!type": "fn(a: +Number, b: +Number, c: +Number, d: +Number, tx: +Number, ty: +Number)",
				      "prototype": {
				        "rotate": {
				          "!doc": "Phaser.Matrix.rotate",
				          "!type": "fn(angle: +Number) -> +Phaser.Matrix"
				        },
				        "a": {
				          "!doc": "Phaser.Matrix.a",
				          "!type": "+Number"
				        },
				        "b": {
				          "!doc": "Phaser.Matrix.b",
				          "!type": "+Number"
				        },
				        "c": {
				          "!doc": "Phaser.Matrix.c",
				          "!type": "+Number"
				        },
				        "d": {
				          "!doc": "Phaser.Matrix.d",
				          "!type": "+Number"
				        },
				        "tx": {
				          "!doc": "Phaser.Matrix.tx",
				          "!type": "+Number"
				        },
				        "apply": {
				          "!doc": "Phaser.Matrix.apply",
				          "!type": "fn(pos: +Phaser.Point, newPos: +Phaser.Point) -> +Phaser.Point"
				        },
				        "ty": {
				          "!doc": "Phaser.Matrix.ty",
				          "!type": "+Number"
				        },
				        "fromArray": {
				          "!doc": "Phaser.Matrix.fromArray",
				          "!type": "fn(array: +Array) -> +Phaser.Matrix"
				        },
				        "scale": {
				          "!doc": "Phaser.Matrix.scale",
				          "!type": "fn(x: +Number, y: +Number) -> +Phaser.Matrix"
				        },
				        "type": {
				          "!doc": "Phaser.Matrix.type",
				          "!type": "+Number"
				        },
				        "copyFrom": {
				          "!doc": "Phaser.Matrix.copyFrom",
				          "!type": "fn(matrix: +Phaser.Matrix) -> +Phaser.Matrix"
				        },
				        "translate": {
				          "!doc": "Phaser.Matrix.translate",
				          "!type": "fn(x: +Number, y: +Number) -> +Phaser.Matrix"
				        },
				        "copyTo": {
				          "!doc": "Phaser.Matrix.copyTo",
				          "!type": "fn(matrix: +Phaser.Matrix) -> +Phaser.Matrix"
				        },
				        "applyInverse": {
				          "!doc": "Phaser.Matrix.applyInverse",
				          "!type": "fn(pos: +Phaser.Point, newPos: +Phaser.Point) -> +Phaser.Point"
				        },
				        "identity": {
				          "!doc": "Phaser.Matrix.identity",
				          "!type": "fn() -> +Phaser.Matrix"
				        },
				        "clone": {
				          "!doc": "Phaser.Matrix.clone",
				          "!type": "fn(output: +Phaser.Matrix) -> +Phaser.Matrix"
				        },
				        "toArray": {
				          "!doc": "Phaser.Matrix.toArray",
				          "!type": "fn(transpose: +Boolean, array: +PIXI.Float32Array) -> +PIXI.Float32Array"
				        },
				        "setTo": {
				          "!doc": "Phaser.Matrix.setTo",
				          "!type": "fn(a: +Number, b: +Number, c: +Number, d: +Number, tx: +Number, ty: +Number) -> +Phaser.Matrix"
				        },
				        "append": {
				          "!doc": "Phaser.Matrix.append",
				          "!type": "fn(matrix: +Phaser.Matrix) -> +Phaser.Matrix"
				        }
				      }
				    },
				    "IMAGE": {
				      "!doc": "Phaser.IMAGE",
				      "!type": "+Number"
				    },
				    "StateManager": {
				      "!doc": "Phaser.StateManager",
				      "!type": "fn(game: +Phaser.Game, pendingState: +Phaser.State)",
				      "prototype": {
				        "onLoadUpdateCallback": {
				          "!doc": "Phaser.StateManager.onLoadUpdateCallback",
				          "!type": "+Function"
				        },
				        "game": {
				          "!doc": "Phaser.StateManager.game",
				          "!type": "+Phaser.Game"
				        },
				        "onLoadRenderCallback": {
				          "!doc": "Phaser.StateManager.onLoadRenderCallback",
				          "!type": "+Function"
				        },
				        "onPreRenderCallback": {
				          "!doc": "Phaser.StateManager.onPreRenderCallback",
				          "!type": "+Function"
				        },
				        "link": {
				          "!doc": "Phaser.StateManager.link",
				          "!type": "fn(key: +String)"
				        },
				        "onResumedCallback": {
				          "!doc": "Phaser.StateManager.onResumedCallback",
				          "!type": "+Function"
				        },
				        "update": {
				          "!doc": "Phaser.StateManager.update",
				          "!type": "fn()"
				        },
				        "onUpdateCallback": {
				          "!doc": "Phaser.StateManager.onUpdateCallback",
				          "!type": "+Function"
				        },
				        "onRenderCallback": {
				          "!doc": "Phaser.StateManager.onRenderCallback",
				          "!type": "+Function"
				        },
				        "remove": {
				          "!doc": "Phaser.StateManager.remove",
				          "!type": "fn(key: +String)"
				        },
				        "states": {
				          "!doc": "Phaser.StateManager.states",
				          "!type": "+Object"
				        },
				        "current": {
				          "!doc": "Phaser.StateManager.current",
				          "!type": "+String"
				        },
				        "onPreloadCallback": {
				          "!doc": "Phaser.StateManager.onPreloadCallback",
				          "!type": "+Function"
				        },
				        "pauseUpdate": {
				          "!doc": "Phaser.StateManager.pauseUpdate",
				          "!type": "fn()"
				        },
				        "clearCurrentState": {
				          "!doc": "Phaser.StateManager.clearCurrentState",
				          "!type": "fn()"
				        },
				        "checkState": {
				          "!doc": "Phaser.StateManager.checkState",
				          "!type": "fn(key: +String) -> +Boolean"
				        },
				        "getCurrentState": {
				          "!doc": "Phaser.StateManager.getCurrentState",
				          "!type": "fn() -> +Phaser.State"
				        },
				        "onPauseUpdateCallback": {
				          "!doc": "Phaser.StateManager.onPauseUpdateCallback",
				          "!type": "+Function"
				        },
				        "onStateChange": {
				          "!doc": "Phaser.StateManager.onStateChange",
				          "!type": "+Phaser.Signal"
				        },
				        "render": {
				          "!doc": "Phaser.StateManager.render",
				          "!type": "fn()"
				        },
				        "add": {
				          "!doc": "Phaser.StateManager.add",
				          "!type": "fn(key: +String, state: +Phaser.State, autoStart: +Boolean)"
				        },
				        "resume": {
				          "!doc": "Phaser.StateManager.resume",
				          "!type": "fn()"
				        },
				        "onPausedCallback": {
				          "!doc": "Phaser.StateManager.onPausedCallback",
				          "!type": "+Function"
				        },
				        "restart": {
				          "!doc": "Phaser.StateManager.restart",
				          "!type": "fn(clearWorld: +Boolean, clearCache: +Boolean, parameter: +any)"
				        },
				        "preRender": {
				          "!doc": "Phaser.StateManager.preRender",
				          "!type": "fn(elapsedTime: +Number)"
				        },
				        "created": {
				          "!doc": "Phaser.StateManager.created",
				          "!type": "+Boolean"
				        },
				        "onCreateCallback": {
				          "!doc": "Phaser.StateManager.onCreateCallback",
				          "!type": "+Function"
				        },
				        "start": {
				          "!doc": "Phaser.StateManager.start",
				          "!type": "fn(key: +String, clearWorld: +Boolean, clearCache: +Boolean, parameter: +any)"
				        },
				        "onInitCallback": {
				          "!doc": "Phaser.StateManager.onInitCallback",
				          "!type": "+Function"
				        },
				        "destroy": {
				          "!doc": "Phaser.StateManager.destroy",
				          "!type": "fn()"
				        },
				        "onResizeCallback": {
				          "!doc": "Phaser.StateManager.onResizeCallback",
				          "!type": "+Function"
				        },
				        "pause": {
				          "!doc": "Phaser.StateManager.pause",
				          "!type": "fn()"
				        },
				        "unlink": {
				          "!doc": "Phaser.StateManager.unlink",
				          "!type": "fn(key: +String)"
				        },
				        "loadComplete": {
				          "!doc": "Phaser.StateManager.loadComplete",
				          "!type": "fn()"
				        },
				        "resize": {
				          "!doc": "Phaser.StateManager.resize",
				          "!type": "fn()"
				        },
				        "onShutDownCallback": {
				          "!doc": "Phaser.StateManager.onShutDownCallback",
				          "!type": "+Function"
				        },
				        "preUpdate": {
				          "!doc": "Phaser.StateManager.preUpdate",
				          "!type": "fn()"
				        }
				      }
				    },
				    "Button": {
				      "init": {
				        "!doc": "Phaser.Button.init",
				        "!type": "fn()"
				      },
				      "install": {
				        "!doc": "Phaser.Button.install",
				        "!type": "fn()"
				      },
				      "!doc": "Phaser.Button",
				      "!type": "fn(game: +Phaser.Game, x: +Number, y: +Number, key: +String, callback: +Function, callbackContext: +Object, overFrame: +String, outFrame: +String, downFrame: +String, upFrame: +String)",
				      "prototype": {
				        "play": {
				          "!doc": "Phaser.Button.play",
				          "!type": "fn(name: +String, frameRate: +Number, loop: +Boolean, killOnComplete: +Boolean) -> +Phaser.Animation"
				        },
				        "parent": {
				          "!doc": "Phaser.Button.parent",
				          "!type": "+PIXI.DisplayObjectContainer"
				        },
				        "setOverSound": {
				          "!doc": "Phaser.Button.setOverSound",
				          "!type": "fn(sound: +Phaser.Sound, marker: +String)"
				        },
				        "lifespan": {
				          "!doc": "Phaser.Button.lifespan",
				          "!type": "+Number"
				        },
				        "onInputOut": {
				          "!doc": "Phaser.Button.onInputOut",
				          "!type": "+Phaser.Signal"
				        },
				        "type": {
				          "!doc": "Phaser.Button.type",
				          "!type": "+Number"
				        },
				        "onInputUp": {
				          "!doc": "Phaser.Button.onInputUp",
				          "!type": "+Phaser.Signal"
				        },
				        "resizeFrame": {
				          "!doc": "Phaser.Button.resizeFrame",
				          "!type": "fn(parent: +Object, width: +Number, height: +Number)"
				        },
				        "onInputUpHandler": {
				          "!doc": "Phaser.Button.onInputUpHandler",
				          "!type": "fn(sprite: +Phaser.Button, pointer: +Phaser.Pointer)"
				        },
				        "onInputOverHandler": {
				          "!doc": "Phaser.Button.onInputOverHandler",
				          "!type": "fn(sprite: +Phaser.Button, pointer: +Phaser.Pointer)"
				        },
				        "children": {
				          "!doc": "Phaser.Button.children",
				          "!type": "+Array_DisplayObject_"
				        },
				        "pivot": {
				          "!doc": "Phaser.Button.pivot",
				          "!type": "+Phaser.Point"
				        },
				        "revive": {
				          "!doc": "Phaser.Button.revive",
				          "!type": "fn(health: +Number) -> +PIXI.DisplayObject"
				        },
				        "bringToTop": {
				          "!doc": "Phaser.Button.bringToTop",
				          "!type": "fn() -> +PIXI.DisplayObject"
				        },
				        "events": {
				          "!doc": "Phaser.Button.events",
				          "!type": "+Phaser.Events"
				        },
				        "moveUp": {
				          "!doc": "Phaser.Button.moveUp",
				          "!type": "fn() -> +PIXI.DisplayObject"
				        },
				        "physicsType": {
				          "!doc": "Phaser.Button.physicsType",
				          "!type": "+Number"
				        },
				        "justReleasedPreventsOver": {
				          "!doc": "Phaser.Button.justReleasedPreventsOver",
				          "!type": "+Phaser.PointerMode"
				        },
				        "postUpdate": {
				          "!doc": "Phaser.Button.postUpdate",
				          "!type": "fn()"
				        },
				        "smoothed": {
				          "!doc": "Phaser.Button.smoothed",
				          "!type": "+Boolean"
				        },
				        "destroy": {
				          "!doc": "Phaser.Button.destroy",
				          "!type": "fn(destroyChildren: +Boolean)"
				        },
				        "setUpSound": {
				          "!doc": "Phaser.Button.setUpSound",
				          "!type": "fn(sound: +Phaser.Sound, marker: +String)"
				        },
				        "onInputDownHandler": {
				          "!doc": "Phaser.Button.onInputDownHandler",
				          "!type": "fn(sprite: +Phaser.Button, pointer: +Phaser.Pointer)"
				        },
				        "onOverSoundMarker": {
				          "!doc": "Phaser.Button.onOverSoundMarker",
				          "!type": "+String"
				        },
				        "input": {
				          "!doc": "Phaser.Button.input",
				          "!type": "+Phaser.InputHandler"
				        },
				        "worldPosition": {
				          "!doc": "Phaser.Button.worldPosition",
				          "!type": "+Phaser.Point"
				        },
				        "left": {
				          "!doc": "Phaser.Button.left",
				          "!type": "+Number"
				        },
				        "reset": {
				          "!doc": "Phaser.Button.reset",
				          "!type": "fn(x: +Number, y: +Number, health: +Number) -> +PIXI.DisplayObject"
				        },
				        "preUpdate": {
				          "!doc": "Phaser.Button.preUpdate",
				          "!type": "fn()"
				        },
				        "filterArea": {
				          "!doc": "Phaser.Button.filterArea",
				          "!type": "+Phaser.Rectangle"
				        },
				        "components": {
				          "!doc": "Phaser.Button.components",
				          "!type": "+Object"
				        },
				        "worldScale": {
				          "!doc": "Phaser.Button.worldScale",
				          "!type": "+Phaser.Point"
				        },
				        "alive": {
				          "!doc": "Phaser.Button.alive",
				          "!type": "+Boolean"
				        },
				        "worldAlpha": {
				          "!doc": "Phaser.Button.worldAlpha",
				          "!type": "+Number"
				        },
				        "world": {
				          "!doc": "Phaser.Button.world",
				          "!type": "+Phaser.Point"
				        },
				        "top": {
				          "!doc": "Phaser.Button.top",
				          "!type": "+Number"
				        },
				        "angle": {
				          "!doc": "Phaser.Button.angle",
				          "!type": "+Number"
				        },
				        "key": {
				          "!doc": "Phaser.Button.key",
				          "!type": "+String"
				        },
				        "onUpSoundMarker": {
				          "!doc": "Phaser.Button.onUpSoundMarker",
				          "!type": "+String"
				        },
				        "setFrames": {
				          "!doc": "Phaser.Button.setFrames",
				          "!type": "fn(overFrame: +String, outFrame: +String, downFrame: +String, upFrame: +String)"
				        },
				        "onDownSound": {
				          "!doc": "Phaser.Button.onDownSound",
				          "!type": "+Phaser.Sound"
				        },
				        "texture": {
				          "!doc": "Phaser.Button.texture",
				          "!type": "+PIXI.Texture"
				        },
				        "destroyPhase": {
				          "!doc": "Phaser.Button.destroyPhase",
				          "!type": "+Boolean"
				        },
				        "right": {
				          "!doc": "Phaser.Button.right",
				          "!type": "+Number"
				        },
				        "kill": {
				          "!doc": "Phaser.Button.kill",
				          "!type": "fn() -> +PIXI.DisplayObject"
				        },
				        "previousPosition": {
				          "!doc": "Phaser.Button.previousPosition",
				          "!type": "+Phaser.Point"
				        },
				        "onInputOutHandler": {
				          "!doc": "Phaser.Button.onInputOutHandler",
				          "!type": "fn(sprite: +Phaser.Button, pointer: +Phaser.Pointer)"
				        },
				        "stage": {
				          "!doc": "Phaser.Button.stage",
				          "!type": "+Phaser.Stage"
				        },
				        "anchor": {
				          "!doc": "Phaser.Button.anchor",
				          "!type": "+Phaser.Point"
				        },
				        "autoCull": {
				          "!doc": "Phaser.Button.autoCull",
				          "!type": "+Boolean"
				        },
				        "onInputOver": {
				          "!doc": "Phaser.Button.onInputOver",
				          "!type": "+Phaser.Signal"
				        },
				        "exists": {
				          "!doc": "Phaser.Button.exists",
				          "!type": "+Boolean"
				        },
				        "z": {
				          "!doc": "Phaser.Button.z",
				          "!type": "+Number"
				        },
				        "clearFrames": {
				          "!doc": "Phaser.Button.clearFrames",
				          "!type": "fn()"
				        },
				        "onOutSoundMarker": {
				          "!doc": "Phaser.Button.onOutSoundMarker",
				          "!type": "+String"
				        },
				        "onInputDown": {
				          "!doc": "Phaser.Button.onInputDown",
				          "!type": "+Phaser.Signal"
				        },
				        "inCamera": {
				          "!doc": "Phaser.Button.inCamera",
				          "!type": "+Boolean"
				        },
				        "offsetX": {
				          "!doc": "Phaser.Button.offsetX",
				          "!type": "+Number"
				        },
				        "tintedTexture": {
				          "!doc": "Phaser.Button.tintedTexture",
				          "!type": "+Phaser.Canvas"
				        },
				        "offsetY": {
				          "!doc": "Phaser.Button.offsetY",
				          "!type": "+Number"
				        },
				        "onUpSound": {
				          "!doc": "Phaser.Button.onUpSound",
				          "!type": "+Phaser.Sound"
				        },
				        "setSounds": {
				          "!doc": "Phaser.Button.setSounds",
				          "!type": "fn(overSound: +Phaser.Sound, overMarker: +String, downSound: +Phaser.Sound, downMarker: +String, outSound: +Phaser.Sound, outMarker: +String, upSound: +Phaser.Sound, upMarker: +String)"
				        },
				        "fixedToCamera": {
				          "!doc": "Phaser.Button.fixedToCamera",
				          "!type": "+Boolean"
				        },
				        "renderOrderID": {
				          "!doc": "Phaser.Button.renderOrderID",
				          "!type": "+Number"
				        },
				        "previousRotation": {
				          "!doc": "Phaser.Button.previousRotation",
				          "!type": "+Number"
				        },
				        "onDownSoundMarker": {
				          "!doc": "Phaser.Button.onDownSoundMarker",
				          "!type": "+String"
				        },
				        "visible": {
				          "!doc": "Phaser.Button.visible",
				          "!type": "+Boolean"
				        },
				        "bottom": {
				          "!doc": "Phaser.Button.bottom",
				          "!type": "+Number"
				        },
				        "cameraOffset": {
				          "!doc": "Phaser.Button.cameraOffset",
				          "!type": "+Phaser.Point"
				        },
				        "moveDown": {
				          "!doc": "Phaser.Button.moveDown",
				          "!type": "fn() -> +PIXI.DisplayObject"
				        },
				        "updateCrop": {
				          "!doc": "Phaser.Button.updateCrop",
				          "!type": "fn()"
				        },
				        "overlap": {
				          "!doc": "Phaser.Button.overlap",
				          "!type": "fn(displayObject: +Phaser.Sprite) -> +Boolean"
				        },
				        "loadTexture": {
				          "!doc": "Phaser.Button.loadTexture",
				          "!type": "fn(key: +String, frame: +String, stopAnimation: +Boolean)"
				        },
				        "onOverSound": {
				          "!doc": "Phaser.Button.onOverSound",
				          "!type": "+Phaser.Sound"
				        },
				        "freezeFrames": {
				          "!doc": "Phaser.Button.freezeFrames",
				          "!type": "+Boolean"
				        },
				        "name": {
				          "!doc": "Phaser.Button.name",
				          "!type": "+String"
				        },
				        "position": {
				          "!doc": "Phaser.Button.position",
				          "!type": "+Phaser.Point"
				        },
				        "crop": {
				          "!doc": "Phaser.Button.crop",
				          "!type": "fn(rect: +Phaser.Rectangle, copy: +Boolean)"
				        },
				        "frame": {
				          "!doc": "Phaser.Button.frame",
				          "!type": "+Number"
				        },
				        "worldRotation": {
				          "!doc": "Phaser.Button.worldRotation",
				          "!type": "+Number"
				        },
				        "shader": {
				          "!doc": "Phaser.Button.shader",
				          "!type": "+PIXI.AbstractFilter"
				        },
				        "cropRect": {
				          "!doc": "Phaser.Button.cropRect",
				          "!type": "+Phaser.Rectangle"
				        },
				        "game": {
				          "!doc": "Phaser.Button.game",
				          "!type": "+Phaser.Game"
				        },
				        "renderable": {
				          "!doc": "Phaser.Button.renderable",
				          "!type": "+Boolean"
				        },
				        "setOutSound": {
				          "!doc": "Phaser.Button.setOutSound",
				          "!type": "fn(sound: +Phaser.Sound, marker: +String)"
				        },
				        "update": {
				          "!doc": "Phaser.Button.update",
				          "!type": "fn()"
				        },
				        "scale": {
				          "!doc": "Phaser.Button.scale",
				          "!type": "+Phaser.Point"
				        },
				        "onOverMouseOnly": {
				          "!doc": "Phaser.Button.onOverMouseOnly",
				          "!type": "+Boolean"
				        },
				        "onOutSound": {
				          "!doc": "Phaser.Button.onOutSound",
				          "!type": "+Phaser.Sound"
				        },
				        "tint": {
				          "!doc": "Phaser.Button.tint",
				          "!type": "+Number"
				        },
				        "inputEnabled": {
				          "!doc": "Phaser.Button.inputEnabled",
				          "!type": "+Boolean"
				        },
				        "setDownSound": {
				          "!doc": "Phaser.Button.setDownSound",
				          "!type": "fn(sound: +Phaser.Sound, marker: +String)"
				        },
				        "setFrame": {
				          "!doc": "Phaser.Button.setFrame",
				          "!type": "fn(frame: +Phaser.Frame)"
				        },
				        "forceOut": {
				          "!doc": "Phaser.Button.forceOut",
				          "!type": "+Boolean"
				        },
				        "removedFromWorld": {
				          "!doc": "Phaser.Button.removedFromWorld",
				          "!type": "fn()"
				        },
				        "animations": {
				          "!doc": "Phaser.Button.animations",
				          "!type": "+Phaser.AnimationManager"
				        },
				        "alpha": {
				          "!doc": "Phaser.Button.alpha",
				          "!type": "+Number"
				        },
				        "debug": {
				          "!doc": "Phaser.Button.debug",
				          "!type": "+Boolean"
				        },
				        "frameName": {
				          "!doc": "Phaser.Button.frameName",
				          "!type": "+String"
				        },
				        "rotation": {
				          "!doc": "Phaser.Button.rotation",
				          "!type": "+Number"
				        },
				        "sendToBack": {
				          "!doc": "Phaser.Button.sendToBack",
				          "!type": "fn() -> +PIXI.DisplayObject"
				        },
				        "resetFrame": {
				          "!doc": "Phaser.Button.resetFrame",
				          "!type": "fn()"
				        },
				        "pendingDestroy": {
				          "!doc": "Phaser.Button.pendingDestroy",
				          "!type": "+Boolean"
				        },
				        "blendMode": {
				          "!doc": "Phaser.Button.blendMode",
				          "!type": "+Number"
				        },
				        "hitArea": {
				          "!doc": "Phaser.Button.hitArea",
				          "!type": "+Phaser.Rectangle"
				        },
				        "fresh": {
				          "!doc": "Phaser.Button.fresh",
				          "!type": "+Boolean"
				        }
				      }
				    },
				    "FlexLayer": {
				      "SORT_ASCENDING": "+Number",
				      "RETURN_TOTAL": "+Number",
				      "!doc": "Phaser.FlexLayer",
				      "RETURN_NONE": "+Number",
				      "!type": "fn(manager: +Phaser.FlexGrid, position: +Phaser.Point, bounds: +Phaser.Rectangle, scale: +Phaser.Point)",
				      "SORT_DESCENDING": "+Number",
				      "RETURN_CHILD": "+Number",
				      "prototype": {
				        "xy": {
				          "!doc": "Phaser.FlexLayer.xy",
				          "!type": "fn(index: +Number, x: +Number, y: +Number)"
				        },
				        "parent": {
				          "!doc": "Phaser.FlexLayer.parent",
				          "!type": "+PIXI.DisplayObjectContainer"
				        },
				        "descendingSortHandler": {
				          "!doc": "Phaser.FlexLayer.descendingSortHandler",
				          "!type": "fn(a: +Object, b: +Object)"
				        },
				        "type": {
				          "!doc": "Phaser.FlexLayer.type",
				          "!type": "+Number"
				        },
				        "moveAll": {
				          "!doc": "Phaser.FlexLayer.moveAll",
				          "!type": "fn(group: +Phaser.Group, silent: +Boolean) -> +Phaser.Group"
				        },
				        "removeAll": {
				          "!doc": "Phaser.FlexLayer.removeAll",
				          "!type": "fn(destroy: +Boolean, silent: +Boolean)"
				        },
				        "enableBody": {
				          "!doc": "Phaser.FlexLayer.enableBody",
				          "!type": "+Boolean"
				        },
				        "children": {
				          "!doc": "Phaser.FlexLayer.children",
				          "!type": "+Array_DisplayObject_"
				        },
				        "customSort": {
				          "!doc": "Phaser.FlexLayer.customSort",
				          "!type": "fn(sortHandler: +Function, context: +Object)"
				        },
				        "enableBodyDebug": {
				          "!doc": "Phaser.FlexLayer.enableBodyDebug",
				          "!type": "+Boolean"
				        },
				        "pivot": {
				          "!doc": "Phaser.FlexLayer.pivot",
				          "!type": "+Phaser.Point"
				        },
				        "bringToTop": {
				          "!doc": "Phaser.FlexLayer.bringToTop",
				          "!type": "fn(child: +Object) -> +Object"
				        },
				        "moveUp": {
				          "!doc": "Phaser.FlexLayer.moveUp",
				          "!type": "fn(child: +Object) -> +Object"
				        },
				        "physicsType": {
				          "!doc": "Phaser.FlexLayer.physicsType",
				          "!type": "+Number"
				        },
				        "postUpdate": {
				          "!doc": "Phaser.FlexLayer.postUpdate",
				          "!type": "fn()"
				        },
				        "destroy": {
				          "!doc": "Phaser.FlexLayer.destroy",
				          "!type": "fn(destroyChildren: +Boolean, soft: +Boolean)"
				        },
				        "cursorIndex": {
				          "!doc": "Phaser.FlexLayer.cursorIndex",
				          "!type": "+Number"
				        },
				        "getFirstDead": {
				          "!doc": "Phaser.FlexLayer.getFirstDead",
				          "!type": "fn(createIfNull: +Boolean, x: +Number, y: +Number, key: +String, frame: +String) -> +PIXI.DisplayObject"
				        },
				        "physicsSortDirection": {
				          "!doc": "Phaser.FlexLayer.physicsSortDirection",
				          "!type": "+Number"
				        },
				        "addAt": {
				          "!doc": "Phaser.FlexLayer.addAt",
				          "!type": "fn(child: +DisplayObject, index: +Number, silent: +Boolean) -> +PIXI.DisplayObject"
				        },
				        "worldPosition": {
				          "!doc": "Phaser.FlexLayer.worldPosition",
				          "!type": "+Phaser.Point"
				        },
				        "forEachAlive": {
				          "!doc": "Phaser.FlexLayer.forEachAlive",
				          "!type": "fn(callback: +Function, callbackContext: +Object, args: +Object)"
				        },
				        "resetCursor": {
				          "!doc": "Phaser.FlexLayer.resetCursor",
				          "!type": "fn(index: +Number) -> +Object"
				        },
				        "addMultiple": {
				          "!doc": "Phaser.FlexLayer.addMultiple",
				          "!type": "fn(children: +Array._DisplayObject_, silent: +Boolean) -> +Array._DisplayObject_"
				        },
				        "setProperty": {
				          "!doc": "Phaser.FlexLayer.setProperty",
				          "!type": "fn(child: +Object, key: +Array, value: +Object, operation: +Number, force: +Boolean) -> +Boolean"
				        },
				        "bounds": {
				          "!doc": "Phaser.FlexLayer.bounds",
				          "!type": "+Phaser.Rectangle"
				        },
				        "preUpdate": {
				          "!doc": "Phaser.FlexLayer.preUpdate",
				          "!type": "fn()"
				        },
				        "hash": {
				          "!doc": "Phaser.FlexLayer.hash",
				          "!type": "+Array"
				        },
				        "filterArea": {
				          "!doc": "Phaser.FlexLayer.filterArea",
				          "!type": "+Phaser.Rectangle"
				        },
				        "addToHash": {
				          "!doc": "Phaser.FlexLayer.addToHash",
				          "!type": "fn(child: +DisplayObject) -> +Boolean"
				        },
				        "worldScale": {
				          "!doc": "Phaser.FlexLayer.worldScale",
				          "!type": "+Phaser.Point"
				        },
				        "alive": {
				          "!doc": "Phaser.FlexLayer.alive",
				          "!type": "+Boolean"
				        },
				        "bottomRight": {
				          "!doc": "Phaser.FlexLayer.bottomRight",
				          "!type": "+Phaser.Point"
				        },
				        "checkProperty": {
				          "!doc": "Phaser.FlexLayer.checkProperty",
				          "!type": "fn(child: +Object, key: +Array, value: +Object, force: +Boolean) -> +Boolean"
				        },
				        "callbackFromArray": {
				          "!doc": "Phaser.FlexLayer.callbackFromArray",
				          "!type": "fn(child: +Object, callback: +Array, length: +Number)"
				        },
				        "worldAlpha": {
				          "!doc": "Phaser.FlexLayer.worldAlpha",
				          "!type": "+Number"
				        },
				        "multiplyAll": {
				          "!doc": "Phaser.FlexLayer.multiplyAll",
				          "!type": "fn(property: +String, amount: +Number, checkAlive: +Boolean, checkVisible: +Boolean)"
				        },
				        "angle": {
				          "!doc": "Phaser.FlexLayer.angle",
				          "!type": "+Number"
				        },
				        "persist": {
				          "!doc": "Phaser.FlexLayer.persist",
				          "!type": "+Boolean"
				        },
				        "iterate": {
				          "!doc": "Phaser.FlexLayer.iterate",
				          "!type": "fn(key: +String, value: +Object, returnType: +Number, callback: +Function, callbackContext: +Object, args: +Array._any_) -> +Object"
				        },
				        "bottomLeft": {
				          "!doc": "Phaser.FlexLayer.bottomLeft",
				          "!type": "+Phaser.Point"
				        },
				        "onDestroy": {
				          "!doc": "Phaser.FlexLayer.onDestroy",
				          "!type": "+Phaser.Signal"
				        },
				        "set": {
				          "!doc": "Phaser.FlexLayer.set",
				          "!type": "fn(child: +Phaser.Sprite, key: +String, value: +Object, checkAlive: +Boolean, checkVisible: +Boolean, operation: +Number, force: +Boolean) -> +Boolean"
				        },
				        "getFirstExists": {
				          "!doc": "Phaser.FlexLayer.getFirstExists",
				          "!type": "fn(exists: +Boolean, createIfNull: +Boolean, x: +Number, y: +Number, key: +String, frame: +String) -> +PIXI.DisplayObject"
				        },
				        "topRight": {
				          "!doc": "Phaser.FlexLayer.topRight",
				          "!type": "+Phaser.Point"
				        },
				        "reverse": {
				          "!doc": "Phaser.FlexLayer.reverse",
				          "!type": "fn()"
				        },
				        "filter": {
				          "!doc": "Phaser.FlexLayer.filter",
				          "!type": "fn(predicate: +Function, checkExists: +Boolean) -> +Phaser.ArraySet"
				        },
				        "stage": {
				          "!doc": "Phaser.FlexLayer.stage",
				          "!type": "+Phaser.Stage"
				        },
				        "addAll": {
				          "!doc": "Phaser.FlexLayer.addAll",
				          "!type": "fn(property: +String, amount: +Number, checkAlive: +Boolean, checkVisible: +Boolean)"
				        },
				        "grid": {
				          "!doc": "Phaser.FlexLayer.grid",
				          "!type": "+Phaser.FlexGrid"
				        },
				        "ignoreDestroy": {
				          "!doc": "Phaser.FlexLayer.ignoreDestroy",
				          "!type": "+Boolean"
				        },
				        "x": {
				          "!doc": "Phaser.FlexLayer.x",
				          "!type": "+Number"
				        },
				        "exists": {
				          "!doc": "Phaser.FlexLayer.exists",
				          "!type": "+Boolean"
				        },
				        "y": {
				          "!doc": "Phaser.FlexLayer.y",
				          "!type": "+Number"
				        },
				        "z": {
				          "!doc": "Phaser.FlexLayer.z",
				          "!type": "+Number"
				        },
				        "divideAll": {
				          "!doc": "Phaser.FlexLayer.divideAll",
				          "!type": "fn(property: +String, amount: +Number, checkAlive: +Boolean, checkVisible: +Boolean)"
				        },
				        "setAllChildren": {
				          "!doc": "Phaser.FlexLayer.setAllChildren",
				          "!type": "fn(key: +String, value: +Object, checkAlive: +Boolean, checkVisible: +Boolean, operation: +Number, force: +Boolean)"
				        },
				        "physicsBodyType": {
				          "!doc": "Phaser.FlexLayer.physicsBodyType",
				          "!type": "+Number"
				        },
				        "getIndex": {
				          "!doc": "Phaser.FlexLayer.getIndex",
				          "!type": "fn(child: +Object) -> +Number"
				        },
				        "getBottom": {
				          "!doc": "Phaser.FlexLayer.getBottom",
				          "!type": "fn() -> +Object"
				        },
				        "replace": {
				          "!doc": "Phaser.FlexLayer.replace",
				          "!type": "fn(oldChild: +Object, newChild: +Object) -> +Object"
				        },
				        "resetChild": {
				          "!doc": "Phaser.FlexLayer.resetChild",
				          "!type": "fn(child: +DisplayObject, x: +Number, y: +Number, key: +String, frame: +String) -> +PIXI.DisplayObject"
				        },
				        "getRandom": {
				          "!doc": "Phaser.FlexLayer.getRandom",
				          "!type": "fn(startIndex: +Number, length: +Number) -> +Object"
				        },
				        "forEachExists": {
				          "!doc": "Phaser.FlexLayer.forEachExists",
				          "!type": "fn(callback: +Function, callbackContext: +Object, args: +Object)"
				        },
				        "getTop": {
				          "!doc": "Phaser.FlexLayer.getTop",
				          "!type": "fn() -> +Object"
				        },
				        "create": {
				          "!doc": "Phaser.FlexLayer.create",
				          "!type": "fn(x: +Number, y: +Number, key: +String, frame: +String, exists: +Boolean) -> +PIXI.DisplayObject"
				        },
				        "countDead": {
				          "!doc": "Phaser.FlexLayer.countDead",
				          "!type": "fn() -> +Number"
				        },
				        "subAll": {
				          "!doc": "Phaser.FlexLayer.subAll",
				          "!type": "fn(property: +String, amount: +Number, checkAlive: +Boolean, checkVisible: +Boolean)"
				        },
				        "fixedToCamera": {
				          "!doc": "Phaser.FlexLayer.fixedToCamera",
				          "!type": "+Boolean"
				        },
				        "add": {
				          "!doc": "Phaser.FlexLayer.add",
				          "!type": "fn(child: +DisplayObject, silent: +Boolean) -> +PIXI.DisplayObject"
				        },
				        "visible": {
				          "!doc": "Phaser.FlexLayer.visible",
				          "!type": "+Boolean"
				        },
				        "swap": {
				          "!doc": "Phaser.FlexLayer.swap",
				          "!type": "fn(child1: +Object, child2: +Object)"
				        },
				        "cameraOffset": {
				          "!doc": "Phaser.FlexLayer.cameraOffset",
				          "!type": "+Phaser.Point"
				        },
				        "sort": {
				          "!doc": "Phaser.FlexLayer.sort",
				          "!type": "fn(key: +String, order: +Number)"
				        },
				        "moveDown": {
				          "!doc": "Phaser.FlexLayer.moveDown",
				          "!type": "fn(child: +Object) -> +Object"
				        },
				        "hasProperty": {
				          "!doc": "Phaser.FlexLayer.hasProperty",
				          "!type": "fn(child: +Object, key: +Array._string_) -> +Boolean"
				        },
				        "updateZ": {
				          "!doc": "Phaser.FlexLayer.updateZ",
				          "!type": "fn()"
				        },
				        "name": {
				          "!doc": "Phaser.FlexLayer.name",
				          "!type": "+String"
				        },
				        "ascendingSortHandler": {
				          "!doc": "Phaser.FlexLayer.ascendingSortHandler",
				          "!type": "fn(a: +Object, b: +Object)"
				        },
				        "position": {
				          "!doc": "Phaser.FlexLayer.position",
				          "!type": "+Phaser.Point"
				        },
				        "removeBetween": {
				          "!doc": "Phaser.FlexLayer.removeBetween",
				          "!type": "fn(startIndex: +Number, endIndex: +Number, destroy: +Boolean, silent: +Boolean)"
				        },
				        "removeFromHash": {
				          "!doc": "Phaser.FlexLayer.removeFromHash",
				          "!type": "fn(child: +DisplayObject) -> +Boolean"
				        },
				        "classType": {
				          "!doc": "Phaser.FlexLayer.classType",
				          "!type": "+Object"
				        },
				        "next": {
				          "!doc": "Phaser.FlexLayer.next",
				          "!type": "fn() -> +Object"
				        },
				        "cursor": {
				          "!doc": "Phaser.FlexLayer.cursor",
				          "!type": "+PIXI.DisplayObject"
				        },
				        "worldRotation": {
				          "!doc": "Phaser.FlexLayer.worldRotation",
				          "!type": "+Number"
				        },
				        "game": {
				          "!doc": "Phaser.FlexLayer.game",
				          "!type": "+Phaser.Game"
				        },
				        "renderable": {
				          "!doc": "Phaser.FlexLayer.renderable",
				          "!type": "+Boolean"
				        },
				        "forEachDead": {
				          "!doc": "Phaser.FlexLayer.forEachDead",
				          "!type": "fn(callback: +Function, callbackContext: +Object, args: +Object)"
				        },
				        "update": {
				          "!doc": "Phaser.FlexLayer.update",
				          "!type": "fn()"
				        },
				        "scale": {
				          "!doc": "Phaser.FlexLayer.scale",
				          "!type": "+Phaser.ScaleManager"
				        },
				        "countLiving": {
				          "!doc": "Phaser.FlexLayer.countLiving",
				          "!type": "fn() -> +Number"
				        },
				        "remove": {
				          "!doc": "Phaser.FlexLayer.remove",
				          "!type": "fn(child: +Object, destroy: +Boolean, silent: +Boolean) -> +Boolean"
				        },
				        "callAll": {
				          "!doc": "Phaser.FlexLayer.callAll",
				          "!type": "fn(method: +String, context: +String, args: +Object)"
				        },
				        "total": {
				          "!doc": "Phaser.FlexLayer.total",
				          "!type": "+Number"
				        },
				        "alpha": {
				          "!doc": "Phaser.FlexLayer.alpha",
				          "!type": "+Number"
				        },
				        "createMultiple": {
				          "!doc": "Phaser.FlexLayer.createMultiple",
				          "!type": "fn(quantity: +Number, key: +String, frame: +Number, exists: +Boolean)"
				        },
				        "bottomMiddle": {
				          "!doc": "Phaser.FlexLayer.bottomMiddle",
				          "!type": "+Phaser.Point"
				        },
				        "setAll": {
				          "!doc": "Phaser.FlexLayer.setAll",
				          "!type": "fn(key: +String, value: +Object, checkAlive: +Boolean, checkVisible: +Boolean, operation: +Number, force: +Boolean)"
				        },
				        "callAllExists": {
				          "!doc": "Phaser.FlexLayer.callAllExists",
				          "!type": "fn(callback: +String, existsValue: +Boolean, parameter: +Object)"
				        },
				        "debug": {
				          "!doc": "Phaser.FlexLayer.debug",
				          "!type": "fn()"
				        },
				        "checkAll": {
				          "!doc": "Phaser.FlexLayer.checkAll",
				          "!type": "fn(key: +String, value: +Object, checkAlive: +Boolean, checkVisible: +Boolean, force: +Boolean)"
				        },
				        "previous": {
				          "!doc": "Phaser.FlexLayer.previous",
				          "!type": "fn() -> +Object"
				        },
				        "forEach": {
				          "!doc": "Phaser.FlexLayer.forEach",
				          "!type": "fn(callback: +Function, callbackContext: +Object, checkExists: +Boolean, args: +Object)"
				        },
				        "rotation": {
				          "!doc": "Phaser.FlexLayer.rotation",
				          "!type": "+Number"
				        },
				        "length": {
				          "!doc": "Phaser.FlexLayer.length",
				          "!type": "+Number"
				        },
				        "sendToBack": {
				          "!doc": "Phaser.FlexLayer.sendToBack",
				          "!type": "fn(child: +Object) -> +Object"
				        },
				        "topMiddle": {
				          "!doc": "Phaser.FlexLayer.topMiddle",
				          "!type": "+Phaser.Point"
				        },
				        "getAt": {
				          "!doc": "Phaser.FlexLayer.getAt",
				          "!type": "fn(index: +Number) -> +PIXI.DisplayObject"
				        },
				        "pendingDestroy": {
				          "!doc": "Phaser.FlexLayer.pendingDestroy",
				          "!type": "+Boolean"
				        },
				        "getFirstAlive": {
				          "!doc": "Phaser.FlexLayer.getFirstAlive",
				          "!type": "fn(createIfNull: +Boolean, x: +Number, y: +Number, key: +String, frame: +String) -> +PIXI.DisplayObject"
				        },
				        "hitArea": {
				          "!doc": "Phaser.FlexLayer.hitArea",
				          "!type": "+Phaser.Rectangle"
				        },
				        "topLeft": {
				          "!doc": "Phaser.FlexLayer.topLeft",
				          "!type": "+Phaser.Point"
				        },
				        "resize": {
				          "!doc": "Phaser.FlexLayer.resize",
				          "!type": "fn()"
				        }
				      }
				    },
				    "Tilemap": {
				      "NORTH": "+Number",
				      "!doc": "Phaser.Tilemap",
				      "WEST": "+Number",
				      "CSV": "+Number",
				      "TILED_JSON": "+Number",
				      "SOUTH": "+Number",
				      "!type": "fn(game: +Phaser.Game, key: +String, tileWidth: +Number, tileHeight: +Number, width: +Number, height: +Number)",
				      "EAST": "+Number",
				      "prototype": {
				        "createFromTiles": {
				          "!doc": "Phaser.Tilemap.createFromTiles",
				          "!type": "fn(tiles: +Number, replacements: +Number, key: +String, layer: +Number, group: +Phaser.Group, properties: +Object) -> +Number"
				        },
				        "getIndex": {
				          "!doc": "Phaser.Tilemap.getIndex",
				          "!type": "fn(location: +Array, name: +String) -> +Number"
				        },
				        "getTileLeft": {
				          "!doc": "Phaser.Tilemap.getTileLeft",
				          "!type": "fn(layer: +Number, x: +Number, y: +Number)"
				        },
				        "createBlankLayer": {
				          "!doc": "Phaser.Tilemap.createBlankLayer",
				          "!type": "fn(name: +String, width: +Number, height: +Number, tileWidth: +Number, tileHeight: +Number, group: +Phaser.Group) -> +Phaser.TilemapLayer"
				        },
				        "objects": {
				          "!doc": "Phaser.Tilemap.objects",
				          "!type": "+Array"
				        },
				        "replace": {
				          "!doc": "Phaser.Tilemap.replace",
				          "!type": "fn(source: +Number, dest: +Number, x: +Number, y: +Number, width: +Number, height: +Number, layer: +Number)"
				        },
				        "setTileLocationCallback": {
				          "!doc": "Phaser.Tilemap.setTileLocationCallback",
				          "!type": "fn(x: +Number, y: +Number, width: +Number, height: +Number, callback: +Function, callbackContext: +Object, layer: +Number)"
				        },
				        "tiles": {
				          "!doc": "Phaser.Tilemap.tiles",
				          "!type": "+Array"
				        },
				        "layers": {
				          "!doc": "Phaser.Tilemap.layers",
				          "!type": "+Array"
				        },
				        "create": {
				          "!doc": "Phaser.Tilemap.create",
				          "!type": "fn(name: +String, width: +Number, height: +Number, tileWidth: +Number, tileHeight: +Number, group: +Phaser.Group) -> +Phaser.TilemapLayer"
				        },
				        "putTileWorldXY": {
				          "!doc": "Phaser.Tilemap.putTileWorldXY",
				          "!type": "fn(tile: +Phaser.Tile, x: +Number, y: +Number, tileWidth: +Number, tileHeight: +Number, layer: +Number) -> +Phaser.Tile"
				        },
				        "height": {
				          "!doc": "Phaser.Tilemap.height",
				          "!type": "+Number"
				        },
				        "getTile": {
				          "!doc": "Phaser.Tilemap.getTile",
				          "!type": "fn(x: +Number, y: +Number, layer: +Number, nonNull: +Boolean) -> +Phaser.Tile"
				        },
				        "currentLayer": {
				          "!doc": "Phaser.Tilemap.currentLayer",
				          "!type": "+Number"
				        },
				        "getTileRight": {
				          "!doc": "Phaser.Tilemap.getTileRight",
				          "!type": "fn(layer: +Number, x: +Number, y: +Number)"
				        },
				        "getTileWorldXY": {
				          "!doc": "Phaser.Tilemap.getTileWorldXY",
				          "!type": "fn(x: +Number, y: +Number, tileWidth: +Number, tileHeight: +Number, layer: +Number, nonNull: +Boolean) -> +Phaser.Tile"
				        },
				        "collideIndexes": {
				          "!doc": "Phaser.Tilemap.collideIndexes",
				          "!type": "+Array"
				        },
				        "images": {
				          "!doc": "Phaser.Tilemap.images",
				          "!type": "+Array"
				        },
				        "createFromObjects": {
				          "!doc": "Phaser.Tilemap.createFromObjects",
				          "!type": "fn(name: +String, gid: +Number, key: +String, frame: +Number, exists: +Boolean, autoCull: +Boolean, group: +Phaser.Group, CustomClass: +Object, adjustY: +Boolean)"
				        },
				        "getImageIndex": {
				          "!doc": "Phaser.Tilemap.getImageIndex",
				          "!type": "fn(name: +String) -> +Number"
				        },
				        "removeTileWorldXY": {
				          "!doc": "Phaser.Tilemap.removeTileWorldXY",
				          "!type": "fn(x: +Number, y: +Number, tileWidth: +Number, tileHeight: +Number, layer: +Number) -> +Phaser.Tile"
				        },
				        "swap": {
				          "!doc": "Phaser.Tilemap.swap",
				          "!type": "fn(tileA: +Number, tileB: +Number, x: +Number, y: +Number, width: +Number, height: +Number, layer: +Number)"
				        },
				        "addTilesetImage": {
				          "!doc": "Phaser.Tilemap.addTilesetImage",
				          "!type": "fn(tileset: +String, key: +String, tileWidth: +Number, tileHeight: +Number, tileMargin: +Number, tileSpacing: +Number, gid: +Number) -> +Phaser.Tileset"
				        },
				        "getLayer": {
				          "!doc": "Phaser.Tilemap.getLayer",
				          "!type": "fn(layer: +Number) -> +Number"
				        },
				        "removeTile": {
				          "!doc": "Phaser.Tilemap.removeTile",
				          "!type": "fn(x: +Number, y: +Number, layer: +Number) -> +Phaser.Tile"
				        },
				        "format": {
				          "!doc": "Phaser.Tilemap.format",
				          "!type": "+Number"
				        },
				        "destroy": {
				          "!doc": "Phaser.Tilemap.destroy",
				          "!type": "fn()"
				        },
				        "fill": {
				          "!doc": "Phaser.Tilemap.fill",
				          "!type": "fn(index: +Number, x: +Number, y: +Number, width: +Number, height: +Number, layer: +Number)"
				        },
				        "version": {
				          "!doc": "Phaser.Tilemap.version",
				          "!type": "+Number"
				        },
				        "setPreventRecalculate": {
				          "!doc": "Phaser.Tilemap.setPreventRecalculate",
				          "!type": "fn(value: +Boolean)"
				        },
				        "debugMap": {
				          "!doc": "Phaser.Tilemap.debugMap",
				          "!type": "+Array"
				        },
				        "collision": {
				          "!doc": "Phaser.Tilemap.collision",
				          "!type": "+Array"
				        },
				        "setTileIndexCallback": {
				          "!doc": "Phaser.Tilemap.setTileIndexCallback",
				          "!type": "fn(indexes: +Number, callback: +Function, callbackContext: +Object, layer: +Number)"
				        },
				        "calculateFaces": {
				          "!doc": "Phaser.Tilemap.calculateFaces",
				          "!type": "fn(layer: +Number)"
				        },
				        "setCollision": {
				          "!doc": "Phaser.Tilemap.setCollision",
				          "!type": "fn(indexes: +Number, collides: +Boolean, layer: +Number, recalculate: +Boolean)"
				        },
				        "createLayer": {
				          "!doc": "Phaser.Tilemap.createLayer",
				          "!type": "fn(layer: +Number, width: +Number, height: +Number, group: +Phaser.Group) -> +Phaser.TilemapLayer"
				        },
				        "removeAllLayers": {
				          "!doc": "Phaser.Tilemap.removeAllLayers",
				          "!type": "fn()"
				        },
				        "putTile": {
				          "!doc": "Phaser.Tilemap.putTile",
				          "!type": "fn(tile: +Phaser.Tile, x: +Number, y: +Number, layer: +Number) -> +Phaser.Tile"
				        },
				        "tileHeight": {
				          "!doc": "Phaser.Tilemap.tileHeight",
				          "!type": "+Number"
				        },
				        "game": {
				          "!doc": "Phaser.Tilemap.game",
				          "!type": "+Phaser.Game"
				        },
				        "setLayer": {
				          "!doc": "Phaser.Tilemap.setLayer",
				          "!type": "fn(layer: +Number)"
				        },
				        "setCollisionByIndex": {
				          "!doc": "Phaser.Tilemap.setCollisionByIndex",
				          "!type": "fn(index: +Number, collides: +Boolean, layer: +Number, recalculate: +Boolean)"
				        },
				        "paste": {
				          "!doc": "Phaser.Tilemap.paste",
				          "!type": "fn(x: +Number, y: +Number, tileblock: +Array, layer: +Number)"
				        },
				        "widthInPixels": {
				          "!doc": "Phaser.Tilemap.widthInPixels",
				          "!type": "+Number"
				        },
				        "imagecollections": {
				          "!doc": "Phaser.Tilemap.imagecollections",
				          "!type": "+Array"
				        },
				        "layer": {
				          "!doc": "Phaser.Tilemap.layer",
				          "!type": "+Number"
				        },
				        "random": {
				          "!doc": "Phaser.Tilemap.random",
				          "!type": "fn(x: +Number, y: +Number, width: +Number, height: +Number, layer: +Number)"
				        },
				        "heightInPixels": {
				          "!doc": "Phaser.Tilemap.heightInPixels",
				          "!type": "+Number"
				        },
				        "getTilesetIndex": {
				          "!doc": "Phaser.Tilemap.getTilesetIndex",
				          "!type": "fn(name: +String) -> +Number"
				        },
				        "setCollisionBetween": {
				          "!doc": "Phaser.Tilemap.setCollisionBetween",
				          "!type": "fn(start: +Number, stop: +Number, collides: +Boolean, layer: +Number, recalculate: +Boolean)"
				        },
				        "setCollisionByExclusion": {
				          "!doc": "Phaser.Tilemap.setCollisionByExclusion",
				          "!type": "fn(indexes: +Array, collides: +Boolean, layer: +Number, recalculate: +Boolean)"
				        },
				        "getLayerIndex": {
				          "!doc": "Phaser.Tilemap.getLayerIndex",
				          "!type": "fn(name: +String) -> +Number"
				        },
				        "setTileSize": {
				          "!doc": "Phaser.Tilemap.setTileSize",
				          "!type": "fn(tileWidth: +Number, tileHeight: +Number)"
				        },
				        "copy": {
				          "!doc": "Phaser.Tilemap.copy",
				          "!type": "fn(x: +Number, y: +Number, width: +Number, height: +Number, layer: +Number) -> +Array"
				        },
				        "dump": {
				          "!doc": "Phaser.Tilemap.dump",
				          "!type": "fn()"
				        },
				        "getTileAbove": {
				          "!doc": "Phaser.Tilemap.getTileAbove",
				          "!type": "fn(layer: +Number, x: +Number, y: +Number)"
				        },
				        "key": {
				          "!doc": "Phaser.Tilemap.key",
				          "!type": "+String"
				        },
				        "getObjectIndex": {
				          "!doc": "Phaser.Tilemap.getObjectIndex",
				          "!type": "fn(name: +String) -> +Number"
				        },
				        "hasTile": {
				          "!doc": "Phaser.Tilemap.hasTile",
				          "!type": "fn(x: +Number, y: +Number, layer: +Number) -> +Boolean"
				        },
				        "orientation": {
				          "!doc": "Phaser.Tilemap.orientation",
				          "!type": "+String"
				        },
				        "forEach": {
				          "!doc": "Phaser.Tilemap.forEach",
				          "!type": "fn(callback: +Number, context: +Number, x: +Number, y: +Number, width: +Number, height: +Number, layer: +Number)"
				        },
				        "searchTileIndex": {
				          "!doc": "Phaser.Tilemap.searchTileIndex",
				          "!type": "fn(index: +Number, skip: +Number, reverse: +Number, layer: +Number) -> +Phaser.Tile"
				        },
				        "tileWidth": {
				          "!doc": "Phaser.Tilemap.tileWidth",
				          "!type": "+Number"
				        },
				        "width": {
				          "!doc": "Phaser.Tilemap.width",
				          "!type": "+Number"
				        },
				        "tilesets": {
				          "!doc": "Phaser.Tilemap.tilesets",
				          "!type": "+Array"
				        },
				        "getTileBelow": {
				          "!doc": "Phaser.Tilemap.getTileBelow",
				          "!type": "fn(layer: +Number, x: +Number, y: +Number)"
				        },
				        "shuffle": {
				          "!doc": "Phaser.Tilemap.shuffle",
				          "!type": "fn(x: +Number, y: +Number, width: +Number, height: +Number, layer: +Number)"
				        },
				        "properties": {
				          "!doc": "Phaser.Tilemap.properties",
				          "!type": "+Object"
				        }
				      }
				    },
				    "CREATURE": {
				      "!doc": "Phaser.CREATURE",
				      "!type": "+Number"
				    },
				    "Stage": {
				      "!doc": "Phaser.Stage",
				      "!type": "fn(game: +Phaser.Game)",
				      "prototype": {
				        "worldRotation": {
				          "!doc": "Phaser.Stage.worldRotation",
				          "!type": "+Number"
				        },
				        "filterArea": {
				          "!doc": "Phaser.Stage.filterArea",
				          "!type": "+Phaser.Rectangle"
				        },
				        "parent": {
				          "!doc": "Phaser.Stage.parent",
				          "!type": "+PIXI.DisplayObjectContainer"
				        },
				        "game": {
				          "!doc": "Phaser.Stage.game",
				          "!type": "+Phaser.Game"
				        },
				        "renderable": {
				          "!doc": "Phaser.Stage.renderable",
				          "!type": "+Boolean"
				        },
				        "worldScale": {
				          "!doc": "Phaser.Stage.worldScale",
				          "!type": "+Phaser.Point"
				        },
				        "currentRenderOrderID": {
				          "!doc": "Phaser.Stage.currentRenderOrderID",
				          "!type": "+Number"
				        },
				        "update": {
				          "!doc": "Phaser.Stage.update",
				          "!type": "fn()"
				        },
				        "scale": {
				          "!doc": "Phaser.Stage.scale",
				          "!type": "+Phaser.Point"
				        },
				        "checkVisibility": {
				          "!doc": "Phaser.Stage.checkVisibility",
				          "!type": "fn()"
				        },
				        "worldAlpha": {
				          "!doc": "Phaser.Stage.worldAlpha",
				          "!type": "+Number"
				        },
				        "children": {
				          "!doc": "Phaser.Stage.children",
				          "!type": "+Array_DisplayObject_"
				        },
				        "alpha": {
				          "!doc": "Phaser.Stage.alpha",
				          "!type": "+Number"
				        },
				        "pivot": {
				          "!doc": "Phaser.Stage.pivot",
				          "!type": "+Phaser.Point"
				        },
				        "backgroundColor": {
				          "!doc": "Phaser.Stage.backgroundColor",
				          "!type": "+Number"
				        },
				        "setBackgroundColor": {
				          "!doc": "Phaser.Stage.setBackgroundColor",
				          "!type": "fn(color: +Number)"
				        },
				        "visible": {
				          "!doc": "Phaser.Stage.visible",
				          "!type": "+Boolean"
				        },
				        "postUpdate": {
				          "!doc": "Phaser.Stage.postUpdate",
				          "!type": "fn()"
				        },
				        "smoothed": {
				          "!doc": "Phaser.Stage.smoothed",
				          "!type": "+Boolean"
				        },
				        "rotation": {
				          "!doc": "Phaser.Stage.rotation",
				          "!type": "+Number"
				        },
				        "parseConfig": {
				          "!doc": "Phaser.Stage.parseConfig",
				          "!type": "fn(config: +Object)"
				        },
				        "destroy": {
				          "!doc": "Phaser.Stage.destroy",
				          "!type": "fn()"
				        },
				        "visibilityChange": {
				          "!doc": "Phaser.Stage.visibilityChange",
				          "!type": "fn(event: +Event)"
				        },
				        "disableVisibilityChange": {
				          "!doc": "Phaser.Stage.disableVisibilityChange",
				          "!type": "+Boolean"
				        },
				        "worldPosition": {
				          "!doc": "Phaser.Stage.worldPosition",
				          "!type": "+Phaser.Point"
				        },
				        "stage": {
				          "!doc": "Phaser.Stage.stage",
				          "!type": "+Phaser.Stage"
				        },
				        "hitArea": {
				          "!doc": "Phaser.Stage.hitArea",
				          "!type": "+Phaser.Rectangle"
				        },
				        "name": {
				          "!doc": "Phaser.Stage.name",
				          "!type": "+String"
				        },
				        "exists": {
				          "!doc": "Phaser.Stage.exists",
				          "!type": "+Boolean"
				        },
				        "updateTransform": {
				          "!doc": "Phaser.Stage.updateTransform",
				          "!type": "fn()"
				        },
				        "position": {
				          "!doc": "Phaser.Stage.position",
				          "!type": "+Phaser.Point"
				        },
				        "preUpdate": {
				          "!doc": "Phaser.Stage.preUpdate",
				          "!type": "fn()"
				        }
				      }
				    },
				    "TimerEvent": {
				      "!doc": "Phaser.TimerEvent",
				      "!type": "fn(timer: +Phaser.Timer, delay: +Number, tick: +Number, repeatCount: +Number, loop: +Boolean, callback: +Function, callbackContext: +Object, arguments: +Array._any_)",
				      "prototype": {
				        "timer": {
				          "!doc": "Phaser.TimerEvent.timer",
				          "!type": "+Phaser.Timer"
				        },
				        "delay": {
				          "!doc": "Phaser.TimerEvent.delay",
				          "!type": "+Number"
				        },
				        "loop": {
				          "!doc": "Phaser.TimerEvent.loop",
				          "!type": "+Boolean"
				        },
				        "callback": {
				          "!doc": "Phaser.TimerEvent.callback",
				          "!type": "+Function"
				        },
				        "callbackContext": {
				          "!doc": "Phaser.TimerEvent.callbackContext",
				          "!type": "+Object"
				        },
				        "arguments": {
				          "!doc": "Phaser.TimerEvent.arguments",
				          "!type": "+Array._any_"
				        },
				        "tick": {
				          "!doc": "Phaser.TimerEvent.tick",
				          "!type": "+Number"
				        },
				        "pendingDelete": {
				          "!doc": "Phaser.TimerEvent.pendingDelete",
				          "!type": "+Boolean"
				        },
				        "repeatCount": {
				          "!doc": "Phaser.TimerEvent.repeatCount",
				          "!type": "+Number"
				        }
				      }
				    },
				    "NONE": {
				      "!doc": "Phaser.NONE",
				      "!type": "+Number"
				    },
				    "ROUNDEDRECTANGLE": {
				      "!doc": "Phaser.ROUNDEDRECTANGLE",
				      "!type": "+Number"
				    },
				    "DOM": {
				      "!doc": "Phaser.DOM",
				      "getOffset": {
				        "!doc": "Phaser.DOM.getOffset",
				        "!type": "fn(element: +DOMElement, point: +Phaser.Point) -> +Phaser.Point"
				      },
				      "documentBounds": {
				        "!doc": "Phaser.DOM.documentBounds",
				        "!type": "+Object"
				      },
				      "getScreenOrientation": {
				        "!doc": "Phaser.DOM.getScreenOrientation",
				        "!type": "fn(primaryFallback: +String)"
				      },
				      "visualBounds": {
				        "!doc": "Phaser.DOM.visualBounds",
				        "!type": "+Object"
				      },
				      "prototype": {
				        "layoutBounds": {
				          "!doc": "Phaser.DOM.layoutBounds",
				          "!type": "+Object"
				        },
				        "documentBounds": {
				          "!doc": "Phaser.DOM.documentBounds",
				          "!type": "+Object"
				        },
				        "scrollY": {
				          "!doc": "Phaser.DOM.scrollY",
				          "!type": "+Number"
				        },
				        "visualBounds": {
				          "!doc": "Phaser.DOM.visualBounds",
				          "!type": "+Object"
				        },
				        "scrollX": {
				          "!doc": "Phaser.DOM.scrollX",
				          "!type": "+Number"
				        }
				      },
				      "getBounds": {
				        "!doc": "Phaser.DOM.getBounds",
				        "!type": "fn(element: +DOMElement, cushion: +Number) -> +Object"
				      },
				      "inLayoutViewport": {
				        "!doc": "Phaser.DOM.inLayoutViewport",
				        "!type": "fn(element: +DOMElement, cushion: +Number) -> +Boolean"
				      },
				      "getAspectRatio": {
				        "!doc": "Phaser.DOM.getAspectRatio",
				        "!type": "fn(object: +DOMElement) -> +Number"
				      },
				      "layoutBounds": {
				        "!doc": "Phaser.DOM.layoutBounds",
				        "!type": "+Object"
				      },
				      "scrollY": {
				        "!doc": "Phaser.DOM.scrollY",
				        "!type": "+Number"
				      },
				      "!type": "fn()",
				      "scrollX": {
				        "!doc": "Phaser.DOM.scrollX",
				        "!type": "+Number"
				      }
				    },
				    "LEFT": {
				      "!doc": "Phaser.LEFT",
				      "!type": "+Number"
				    },
				    "Sound": {
				      "!doc": "Phaser.Sound",
				      "!type": "fn(game: +Phaser.Game, key: +String, volume: +Number, loop: +Boolean)",
				      "prototype": {
				        "play": {
				          "!doc": "Phaser.Sound.play",
				          "!type": "fn(marker: +String, position: +Number, volume: +Number, loop: +Boolean, forceRestart: +Boolean) -> +Phaser.Sound"
				        },
				        "paused": {
				          "!doc": "Phaser.Sound.paused",
				          "!type": "+Boolean"
				        },
				        "fadeTo": {
				          "!doc": "Phaser.Sound.fadeTo",
				          "!type": "fn(duration: +Number, volume: +Number)"
				        },
				        "onMute": {
				          "!doc": "Phaser.Sound.onMute",
				          "!type": "+Phaser.Signal"
				        },
				        "removeMarker": {
				          "!doc": "Phaser.Sound.removeMarker",
				          "!type": "fn(name: +String)"
				        },
				        "externalNode": {
				          "!doc": "Phaser.Sound.externalNode",
				          "!type": "+Object"
				        },
				        "usingAudioTag": {
				          "!doc": "Phaser.Sound.usingAudioTag",
				          "!type": "+Boolean"
				        },
				        "gainNode": {
				          "!doc": "Phaser.Sound.gainNode",
				          "!type": "+Object"
				        },
				        "loop": {
				          "!doc": "Phaser.Sound.loop",
				          "!type": "+Boolean"
				        },
				        "context": {
				          "!doc": "Phaser.Sound.context",
				          "!type": "+AudioContext"
				        },
				        "onStop": {
				          "!doc": "Phaser.Sound.onStop",
				          "!type": "+Phaser.Signal"
				        },
				        "totalDuration": {
				          "!doc": "Phaser.Sound.totalDuration",
				          "!type": "+Number"
				        },
				        "isPlaying": {
				          "!doc": "Phaser.Sound.isPlaying",
				          "!type": "+Boolean"
				        },
				        "pendingPlayback": {
				          "!doc": "Phaser.Sound.pendingPlayback",
				          "!type": "+Boolean"
				        },
				        "masterGainNode": {
				          "!doc": "Phaser.Sound.masterGainNode",
				          "!type": "+Object"
				        },
				        "destroy": {
				          "!doc": "Phaser.Sound.destroy",
				          "!type": "fn(remove: +Boolean)"
				        },
				        "mute": {
				          "!doc": "Phaser.Sound.mute",
				          "!type": "+Boolean"
				        },
				        "onPlay": {
				          "!doc": "Phaser.Sound.onPlay",
				          "!type": "+Phaser.Signal"
				        },
				        "pause": {
				          "!doc": "Phaser.Sound.pause",
				          "!type": "fn()"
				        },
				        "autoplay": {
				          "!doc": "Phaser.Sound.autoplay",
				          "!type": "+Boolean"
				        },
				        "onResume": {
				          "!doc": "Phaser.Sound.onResume",
				          "!type": "+Phaser.Signal"
				        },
				        "volume": {
				          "!doc": "Phaser.Sound.volume",
				          "!type": "+Number"
				        },
				        "currentTime": {
				          "!doc": "Phaser.Sound.currentTime",
				          "!type": "+Number"
				        },
				        "stop": {
				          "!doc": "Phaser.Sound.stop",
				          "!type": "fn()"
				        },
				        "name": {
				          "!doc": "Phaser.Sound.name",
				          "!type": "+String"
				        },
				        "position": {
				          "!doc": "Phaser.Sound.position",
				          "!type": "+Number"
				        },
				        "onLoop": {
				          "!doc": "Phaser.Sound.onLoop",
				          "!type": "+Phaser.Signal"
				        },
				        "game": {
				          "!doc": "Phaser.Sound.game",
				          "!type": "+Phaser.Game"
				        },
				        "onDecoded": {
				          "!doc": "Phaser.Sound.onDecoded",
				          "!type": "+Phaser.Signal"
				        },
				        "fadeOut": {
				          "!doc": "Phaser.Sound.fadeOut",
				          "!type": "fn(duration: +Number)"
				        },
				        "isDecoding": {
				          "!doc": "Phaser.Sound.isDecoding",
				          "!type": "+Boolean"
				        },
				        "update": {
				          "!doc": "Phaser.Sound.update",
				          "!type": "fn()"
				        },
				        "onPause": {
				          "!doc": "Phaser.Sound.onPause",
				          "!type": "+Phaser.Signal"
				        },
				        "pausedPosition": {
				          "!doc": "Phaser.Sound.pausedPosition",
				          "!type": "+Number"
				        },
				        "isDecoded": {
				          "!doc": "Phaser.Sound.isDecoded",
				          "!type": "+Boolean"
				        },
				        "duration": {
				          "!doc": "Phaser.Sound.duration",
				          "!type": "+Number"
				        },
				        "fadeIn": {
				          "!doc": "Phaser.Sound.fadeIn",
				          "!type": "fn(duration: +Number, loop: +Boolean, marker: +String)"
				        },
				        "onFadeComplete": {
				          "!doc": "Phaser.Sound.onFadeComplete",
				          "!type": "+Phaser.Signal"
				        },
				        "startTime": {
				          "!doc": "Phaser.Sound.startTime",
				          "!type": "+Number"
				        },
				        "stopTime": {
				          "!doc": "Phaser.Sound.stopTime",
				          "!type": "+Number"
				        },
				        "loopFull": {
				          "!doc": "Phaser.Sound.loopFull",
				          "!type": "fn(volume: +Number) -> +Phaser.Sound"
				        },
				        "override": {
				          "!doc": "Phaser.Sound.override",
				          "!type": "+Boolean"
				        },
				        "durationMS": {
				          "!doc": "Phaser.Sound.durationMS",
				          "!type": "+Number"
				        },
				        "key": {
				          "!doc": "Phaser.Sound.key",
				          "!type": "+String"
				        },
				        "resume": {
				          "!doc": "Phaser.Sound.resume",
				          "!type": "fn()"
				        },
				        "restart": {
				          "!doc": "Phaser.Sound.restart",
				          "!type": "fn(marker: +String, position: +Number, volume: +Number, loop: +Boolean)"
				        },
				        "onEndedHandler": {
				          "!doc": "Phaser.Sound.onEndedHandler",
				          "!type": "fn()"
				        },
				        "soundHasUnlocked": {
				          "!doc": "Phaser.Sound.soundHasUnlocked",
				          "!type": "fn(key: +String)"
				        },
				        "pausedTime": {
				          "!doc": "Phaser.Sound.pausedTime",
				          "!type": "+Number"
				        },
				        "usingWebAudio": {
				          "!doc": "Phaser.Sound.usingWebAudio",
				          "!type": "+Boolean"
				        },
				        "allowMultiple": {
				          "!doc": "Phaser.Sound.allowMultiple",
				          "!type": "+Boolean"
				        },
				        "onMarkerComplete": {
				          "!doc": "Phaser.Sound.onMarkerComplete",
				          "!type": "+Phaser.Signal"
				        },
				        "fadeTween": {
				          "!doc": "Phaser.Sound.fadeTween",
				          "!type": "+Phaser.Tween"
				        },
				        "markers": {
				          "!doc": "Phaser.Sound.markers",
				          "!type": "+Object"
				        },
				        "currentMarker": {
				          "!doc": "Phaser.Sound.currentMarker",
				          "!type": "+String"
				        },
				        "addMarker": {
				          "!doc": "Phaser.Sound.addMarker",
				          "!type": "fn(name: +String, start: +Number, duration: +Number, volume: +Number, loop: +Boolean)"
				        }
				      }
				    },
				    "GRAPHICS": {
				      "!doc": "Phaser.GRAPHICS",
				      "!type": "+Number"
				    },
				    "Line": {
				      "!doc": "Phaser.Line",
				      "!type": "fn(x1: +Number, y1: +Number, x2: +Number, y2: +Number)",
				      "intersectsPoints": {
				        "!doc": "Phaser.Line.intersectsPoints",
				        "!type": "fn(a: +Phaser.Point, b: +Phaser.Point, e: +Phaser.Point, f: +Phaser.Point, asSegment: +Boolean, result: +Phaser.Point) -> +Phaser.Point"
				      },
				      "prototype": {
				        "rotate": {
				          "!doc": "Phaser.Line.rotate",
				          "!type": "fn(angle: +Number, asDegrees: +Boolean) -> +Phaser.Line"
				        },
				        "normalX": {
				          "!doc": "Phaser.Line.normalX",
				          "!type": "+Number"
				        },
				        "normalY": {
				          "!doc": "Phaser.Line.normalY",
				          "!type": "+Number"
				        },
				        "intersects": {
				          "!doc": "Phaser.Line.intersects",
				          "!type": "fn(line: +Phaser.Line, asSegment: +Boolean, result: +Phaser.Point) -> +Phaser.Point"
				        },
				        "perpSlope": {
				          "!doc": "Phaser.Line.perpSlope",
				          "!type": "+Number"
				        },
				        "type": {
				          "!doc": "Phaser.Line.type",
				          "!type": "+Number"
				        },
				        "coordinatesOnLine": {
				          "!doc": "Phaser.Line.coordinatesOnLine",
				          "!type": "fn(stepRate: +Number, results: +Array) -> +Array"
				        },
				        "random": {
				          "!doc": "Phaser.Line.random",
				          "!type": "fn(out: +Phaser.Point) -> +Phaser.Point"
				        },
				        "reflect": {
				          "!doc": "Phaser.Line.reflect",
				          "!type": "fn(line: +Phaser.Line) -> +Number"
				        },
				        "top": {
				          "!doc": "Phaser.Line.top",
				          "!type": "+Number"
				        },
				        "pointOnSegment": {
				          "!doc": "Phaser.Line.pointOnSegment",
				          "!type": "fn(x: +Number, y: +Number) -> +Boolean"
				        },
				        "angle": {
				          "!doc": "Phaser.Line.angle",
				          "!type": "+Number"
				        },
				        "end": {
				          "!doc": "Phaser.Line.end",
				          "!type": "+Phaser.Point"
				        },
				        "height": {
				          "!doc": "Phaser.Line.height",
				          "!type": "+Number"
				        },
				        "centerOn": {
				          "!doc": "Phaser.Line.centerOn",
				          "!type": "fn(x: +Number, y: +Number) -> +Phaser.Line"
				        },
				        "midPoint": {
				          "!doc": "Phaser.Line.midPoint",
				          "!type": "fn(out: +Phaser.Point) -> +Phaser.Point"
				        },
				        "bottom": {
				          "!doc": "Phaser.Line.bottom",
				          "!type": "+Number"
				        },
				        "fromSprite": {
				          "!doc": "Phaser.Line.fromSprite",
				          "!type": "fn(startSprite: +Phaser.Sprite, endSprite: +Phaser.Sprite, useCenter: +Boolean) -> +Phaser.Line"
				        },
				        "start": {
				          "!doc": "Phaser.Line.start",
				          "!type": "+Phaser.Point"
				        },
				        "length": {
				          "!doc": "Phaser.Line.length",
				          "!type": "+Number"
				        },
				        "normalAngle": {
				          "!doc": "Phaser.Line.normalAngle",
				          "!type": "+Number"
				        },
				        "right": {
				          "!doc": "Phaser.Line.right",
				          "!type": "+Number"
				        },
				        "fromAngle": {
				          "!doc": "Phaser.Line.fromAngle",
				          "!type": "fn(x: +Number, y: +Number, angle: +Number, length: +Number) -> +Phaser.Line"
				        },
				        "slope": {
				          "!doc": "Phaser.Line.slope",
				          "!type": "+Number"
				        },
				        "pointOnLine": {
				          "!doc": "Phaser.Line.pointOnLine",
				          "!type": "fn(x: +Number, y: +Number) -> +Boolean"
				        },
				        "rotateAround": {
				          "!doc": "Phaser.Line.rotateAround",
				          "!type": "fn(angle: +Number, asDegrees: +Boolean) -> +Phaser.Line"
				        },
				        "left": {
				          "!doc": "Phaser.Line.left",
				          "!type": "+Number"
				        },
				        "clone": {
				          "!doc": "Phaser.Line.clone",
				          "!type": "fn(output: +Phaser.Line) -> +Phaser.Line"
				        },
				        "x": {
				          "!doc": "Phaser.Line.x",
				          "!type": "+Number"
				        },
				        "width": {
				          "!doc": "Phaser.Line.width",
				          "!type": "+Number"
				        },
				        "setTo": {
				          "!doc": "Phaser.Line.setTo",
				          "!type": "fn(x1: +Number, y1: +Number, x2: +Number, y2: +Number) -> +Phaser.Line"
				        },
				        "y": {
				          "!doc": "Phaser.Line.y",
				          "!type": "+Number"
				        }
				      }
				    },
				    "SPRITEBATCH": {
				      "!doc": "Phaser.SPRITEBATCH",
				      "!type": "+Number"
				    },
				    "TileSprite": {
				      "init": {
				        "!doc": "Phaser.TileSprite.init",
				        "!type": "fn()"
				      },
				      "install": {
				        "!doc": "Phaser.TileSprite.install",
				        "!type": "fn()"
				      },
				      "!doc": "Phaser.TileSprite",
				      "!type": "fn(game: +Phaser.Game, x: +Number, y: +Number, width: +Number, height: +Number, key: +String, frame: +String)",
				      "prototype": {
				        "play": {
				          "!doc": "Phaser.TileSprite.play",
				          "!type": "fn(name: +String, frameRate: +Number, loop: +Boolean, killOnComplete: +Boolean) -> +Phaser.Animation"
				        },
				        "parent": {
				          "!doc": "Phaser.TileSprite.parent",
				          "!type": "+PIXI.DisplayObjectContainer"
				        },
				        "lifespan": {
				          "!doc": "Phaser.TileSprite.lifespan",
				          "!type": "+Number"
				        },
				        "outOfBoundsKill": {
				          "!doc": "Phaser.TileSprite.outOfBoundsKill",
				          "!type": "+Boolean"
				        },
				        "type": {
				          "!doc": "Phaser.TileSprite.type",
				          "!type": "+Number"
				        },
				        "resizeFrame": {
				          "!doc": "Phaser.TileSprite.resizeFrame",
				          "!type": "fn(parent: +Object, width: +Number, height: +Number)"
				        },
				        "children": {
				          "!doc": "Phaser.TileSprite.children",
				          "!type": "+Array_DisplayObject_"
				        },
				        "pivot": {
				          "!doc": "Phaser.TileSprite.pivot",
				          "!type": "+Phaser.Point"
				        },
				        "maxHealth": {
				          "!doc": "Phaser.TileSprite.maxHealth",
				          "!type": "+Number"
				        },
				        "revive": {
				          "!doc": "Phaser.TileSprite.revive",
				          "!type": "fn(health: +Number) -> +PIXI.DisplayObject"
				        },
				        "autoScroll": {
				          "!doc": "Phaser.TileSprite.autoScroll",
				          "!type": "fn(x: +Number, y: +Number)"
				        },
				        "bringToTop": {
				          "!doc": "Phaser.TileSprite.bringToTop",
				          "!type": "fn() -> +PIXI.DisplayObject"
				        },
				        "events": {
				          "!doc": "Phaser.TileSprite.events",
				          "!type": "+Phaser.Events"
				        },
				        "moveUp": {
				          "!doc": "Phaser.TileSprite.moveUp",
				          "!type": "fn() -> +PIXI.DisplayObject"
				        },
				        "physicsType": {
				          "!doc": "Phaser.TileSprite.physicsType",
				          "!type": "+Number"
				        },
				        "height": {
				          "!doc": "Phaser.TileSprite.height",
				          "!type": "+Number"
				        },
				        "postUpdate": {
				          "!doc": "Phaser.TileSprite.postUpdate",
				          "!type": "fn()"
				        },
				        "textureDebug": {
				          "!doc": "Phaser.TileSprite.textureDebug",
				          "!type": "+Boolean"
				        },
				        "smoothed": {
				          "!doc": "Phaser.TileSprite.smoothed",
				          "!type": "+Boolean"
				        },
				        "destroy": {
				          "!doc": "Phaser.TileSprite.destroy",
				          "!type": "fn(destroyChildren: +Boolean)"
				        },
				        "input": {
				          "!doc": "Phaser.TileSprite.input",
				          "!type": "+Phaser.InputHandler"
				        },
				        "worldPosition": {
				          "!doc": "Phaser.TileSprite.worldPosition",
				          "!type": "+Phaser.Point"
				        },
				        "left": {
				          "!doc": "Phaser.TileSprite.left",
				          "!type": "+Number"
				        },
				        "reset": {
				          "!doc": "Phaser.TileSprite.reset",
				          "!type": "fn(x: +Number, y: +Number) -> +_Phaser.TileSprite__This_instance."
				        },
				        "refreshTexture": {
				          "!doc": "Phaser.TileSprite.refreshTexture",
				          "!type": "+Boolean"
				        },
				        "preUpdate": {
				          "!doc": "Phaser.TileSprite.preUpdate",
				          "!type": "fn()"
				        },
				        "tilingTexture": {
				          "!doc": "Phaser.TileSprite.tilingTexture",
				          "!type": "+PIXI.Texture"
				        },
				        "filterArea": {
				          "!doc": "Phaser.TileSprite.filterArea",
				          "!type": "+Phaser.Rectangle"
				        },
				        "damage": {
				          "!doc": "Phaser.TileSprite.damage",
				          "!type": "fn(amount: +Number) -> +Phaser.Sprite"
				        },
				        "components": {
				          "!doc": "Phaser.TileSprite.components",
				          "!type": "+Object"
				        },
				        "tileScaleOffset": {
				          "!doc": "Phaser.TileSprite.tileScaleOffset",
				          "!type": "+Phaser.Point"
				        },
				        "tilePosition": {
				          "!doc": "Phaser.TileSprite.tilePosition",
				          "!type": "+Phaser.Point"
				        },
				        "worldScale": {
				          "!doc": "Phaser.TileSprite.worldScale",
				          "!type": "+Phaser.Point"
				        },
				        "alive": {
				          "!doc": "Phaser.TileSprite.alive",
				          "!type": "+Boolean"
				        },
				        "inWorld": {
				          "!doc": "Phaser.TileSprite.inWorld",
				          "!type": "+Boolean"
				        },
				        "worldAlpha": {
				          "!doc": "Phaser.TileSprite.worldAlpha",
				          "!type": "+Number"
				        },
				        "world": {
				          "!doc": "Phaser.TileSprite.world",
				          "!type": "+Phaser.Point"
				        },
				        "top": {
				          "!doc": "Phaser.TileSprite.top",
				          "!type": "+Number"
				        },
				        "angle": {
				          "!doc": "Phaser.TileSprite.angle",
				          "!type": "+Number"
				        },
				        "checkWorldBounds": {
				          "!doc": "Phaser.TileSprite.checkWorldBounds",
				          "!type": "+Boolean"
				        },
				        "key": {
				          "!doc": "Phaser.TileSprite.key",
				          "!type": "+String"
				        },
				        "texture": {
				          "!doc": "Phaser.TileSprite.texture",
				          "!type": "+PIXI.Texture"
				        },
				        "health": {
				          "!doc": "Phaser.TileSprite.health",
				          "!type": "+Number"
				        },
				        "destroyPhase": {
				          "!doc": "Phaser.TileSprite.destroyPhase",
				          "!type": "+Boolean"
				        },
				        "right": {
				          "!doc": "Phaser.TileSprite.right",
				          "!type": "+Number"
				        },
				        "kill": {
				          "!doc": "Phaser.TileSprite.kill",
				          "!type": "fn() -> +PIXI.DisplayObject"
				        },
				        "previousPosition": {
				          "!doc": "Phaser.TileSprite.previousPosition",
				          "!type": "+Phaser.Point"
				        },
				        "stage": {
				          "!doc": "Phaser.TileSprite.stage",
				          "!type": "+Phaser.Stage"
				        },
				        "anchor": {
				          "!doc": "Phaser.TileSprite.anchor",
				          "!type": "+Phaser.Point"
				        },
				        "width": {
				          "!doc": "Phaser.TileSprite.width",
				          "!type": "+Number"
				        },
				        "autoCull": {
				          "!doc": "Phaser.TileSprite.autoCull",
				          "!type": "+Boolean"
				        },
				        "x": {
				          "!doc": "Phaser.TileSprite.x",
				          "!type": "+Number"
				        },
				        "exists": {
				          "!doc": "Phaser.TileSprite.exists",
				          "!type": "+Boolean"
				        },
				        "y": {
				          "!doc": "Phaser.TileSprite.y",
				          "!type": "+Number"
				        },
				        "z": {
				          "!doc": "Phaser.TileSprite.z",
				          "!type": "+Number"
				        },
				        "tilePattern": {
				          "!doc": "Phaser.TileSprite.tilePattern",
				          "!type": "+PIXI.Texture"
				        },
				        "body": {
				          "!doc": "Phaser.TileSprite.body",
				          "!type": "+Phaser.Physics.Arcade.Body"
				        },
				        "inCamera": {
				          "!doc": "Phaser.TileSprite.inCamera",
				          "!type": "+Boolean"
				        },
				        "offsetX": {
				          "!doc": "Phaser.TileSprite.offsetX",
				          "!type": "+Number"
				        },
				        "tintedTexture": {
				          "!doc": "Phaser.TileSprite.tintedTexture",
				          "!type": "+Phaser.Canvas"
				        },
				        "offsetY": {
				          "!doc": "Phaser.TileSprite.offsetY",
				          "!type": "+Number"
				        },
				        "fixedToCamera": {
				          "!doc": "Phaser.TileSprite.fixedToCamera",
				          "!type": "+Boolean"
				        },
				        "renderOrderID": {
				          "!doc": "Phaser.TileSprite.renderOrderID",
				          "!type": "+Number"
				        },
				        "previousRotation": {
				          "!doc": "Phaser.TileSprite.previousRotation",
				          "!type": "+Number"
				        },
				        "visible": {
				          "!doc": "Phaser.TileSprite.visible",
				          "!type": "+Boolean"
				        },
				        "tileScale": {
				          "!doc": "Phaser.TileSprite.tileScale",
				          "!type": "+Phaser.Point"
				        },
				        "bottom": {
				          "!doc": "Phaser.TileSprite.bottom",
				          "!type": "+Number"
				        },
				        "cameraOffset": {
				          "!doc": "Phaser.TileSprite.cameraOffset",
				          "!type": "+Phaser.Point"
				        },
				        "moveDown": {
				          "!doc": "Phaser.TileSprite.moveDown",
				          "!type": "fn() -> +PIXI.DisplayObject"
				        },
				        "overlap": {
				          "!doc": "Phaser.TileSprite.overlap",
				          "!type": "fn(displayObject: +Phaser.Sprite) -> +Boolean"
				        },
				        "loadTexture": {
				          "!doc": "Phaser.TileSprite.loadTexture",
				          "!type": "fn(key: +String, frame: +String, stopAnimation: +Boolean)"
				        },
				        "name": {
				          "!doc": "Phaser.TileSprite.name",
				          "!type": "+String"
				        },
				        "position": {
				          "!doc": "Phaser.TileSprite.position",
				          "!type": "+Phaser.Point"
				        },
				        "frame": {
				          "!doc": "Phaser.TileSprite.frame",
				          "!type": "+Number"
				        },
				        "worldRotation": {
				          "!doc": "Phaser.TileSprite.worldRotation",
				          "!type": "+Number"
				        },
				        "shader": {
				          "!doc": "Phaser.TileSprite.shader",
				          "!type": "+PIXI.AbstractFilter"
				        },
				        "renderable": {
				          "!doc": "Phaser.TileSprite.renderable",
				          "!type": "+Boolean"
				        },
				        "game": {
				          "!doc": "Phaser.TileSprite.game",
				          "!type": "+Phaser.Game"
				        },
				        "stopScroll": {
				          "!doc": "Phaser.TileSprite.stopScroll",
				          "!type": "fn()"
				        },
				        "update": {
				          "!doc": "Phaser.TileSprite.update",
				          "!type": "fn()"
				        },
				        "scale": {
				          "!doc": "Phaser.TileSprite.scale",
				          "!type": "+Phaser.Point"
				        },
				        "canvasBuffer": {
				          "!doc": "Phaser.TileSprite.canvasBuffer",
				          "!type": "+PIXI.CanvasBuffer"
				        },
				        "tint": {
				          "!doc": "Phaser.TileSprite.tint",
				          "!type": "+Number"
				        },
				        "inputEnabled": {
				          "!doc": "Phaser.TileSprite.inputEnabled",
				          "!type": "+Boolean"
				        },
				        "setFrame": {
				          "!doc": "Phaser.TileSprite.setFrame",
				          "!type": "fn(frame: +Phaser.Frame)"
				        },
				        "animations": {
				          "!doc": "Phaser.TileSprite.animations",
				          "!type": "+Phaser.AnimationManager"
				        },
				        "alpha": {
				          "!doc": "Phaser.TileSprite.alpha",
				          "!type": "+Number"
				        },
				        "heal": {
				          "!doc": "Phaser.TileSprite.heal",
				          "!type": "fn(amount: +Number) -> +Phaser.Sprite"
				        },
				        "debug": {
				          "!doc": "Phaser.TileSprite.debug",
				          "!type": "+Boolean"
				        },
				        "frameName": {
				          "!doc": "Phaser.TileSprite.frameName",
				          "!type": "+String"
				        },
				        "rotation": {
				          "!doc": "Phaser.TileSprite.rotation",
				          "!type": "+Number"
				        },
				        "sendToBack": {
				          "!doc": "Phaser.TileSprite.sendToBack",
				          "!type": "fn() -> +PIXI.DisplayObject"
				        },
				        "resetFrame": {
				          "!doc": "Phaser.TileSprite.resetFrame",
				          "!type": "fn()"
				        },
				        "pendingDestroy": {
				          "!doc": "Phaser.TileSprite.pendingDestroy",
				          "!type": "+Boolean"
				        },
				        "blendMode": {
				          "!doc": "Phaser.TileSprite.blendMode",
				          "!type": "+Number"
				        },
				        "hitArea": {
				          "!doc": "Phaser.TileSprite.hitArea",
				          "!type": "+Phaser.Rectangle"
				        },
				        "fresh": {
				          "!doc": "Phaser.TileSprite.fresh",
				          "!type": "+Boolean"
				        }
				      }
				    },
				    "Game": {
				      "!doc": "Phaser.Game",
				      "!type": "fn(width: +Number, height: +Number, renderer: +Number, parent: +String, state: +Object, transparent: +Boolean, antialias: +Boolean, physicsConfig: +Object)",
				      "prototype": {
				        "gamePaused": {
				          "!doc": "Phaser.Game.gamePaused",
				          "!type": "fn(event: +Object)"
				        },
				        "parent": {
				          "!doc": "Phaser.Game.parent",
				          "!type": "+String"
				        },
				        "paused": {
				          "!doc": "Phaser.Game.paused",
				          "!type": "+Boolean"
				        },
				        "plugins": {
				          "!doc": "Phaser.Game.plugins",
				          "!type": "+Phaser.PluginManager"
				        },
				        "lockRender": {
				          "!doc": "Phaser.Game.lockRender",
				          "!type": "+Boolean"
				        },
				        "sound": {
				          "!doc": "Phaser.Game.sound",
				          "!type": "+Phaser.SoundManager"
				        },
				        "stepping": {
				          "!doc": "Phaser.Game.stepping",
				          "!type": "+Boolean"
				        },
				        "resolution": {
				          "!doc": "Phaser.Game.resolution",
				          "!type": "+Number"
				        },
				        "clearBeforeRender": {
				          "!doc": "Phaser.Game.clearBeforeRender",
				          "!type": "+Boolean"
				        },
				        "focusLoss": {
				          "!doc": "Phaser.Game.focusLoss",
				          "!type": "fn(event: +Object)"
				        },
				        "antialias": {
				          "!doc": "Phaser.Game.antialias",
				          "!type": "+Boolean"
				        },
				        "raf": {
				          "!doc": "Phaser.Game.raf",
				          "!type": "+Phaser.RequestAnimationFrame"
				        },
				        "updatesThisFrame": {
				          "!doc": "Phaser.Game.updatesThisFrame",
				          "!type": "+Number"
				        },
				        "context": {
				          "!doc": "Phaser.Game.context",
				          "!type": "+CanvasRenderingContext2D"
				        },
				        "create": {
				          "!doc": "Phaser.Game.create",
				          "!type": "+Phaser.Create"
				        },
				        "id": {
				          "!doc": "Phaser.Game.id",
				          "!type": "+Number"
				        },
				        "state": {
				          "!doc": "Phaser.Game.state",
				          "!type": "+Phaser.StateManager"
				        },
				        "currentUpdateID": {
				          "!doc": "Phaser.Game.currentUpdateID",
				          "!type": "+Number"
				        },
				        "showDebugHeader": {
				          "!doc": "Phaser.Game.showDebugHeader",
				          "!type": "fn()"
				        },
				        "net": {
				          "!doc": "Phaser.Game.net",
				          "!type": "+Phaser.Net"
				        },
				        "particles": {
				          "!doc": "Phaser.Game.particles",
				          "!type": "+Phaser.Particles"
				        },
				        "height": {
				          "!doc": "Phaser.Game.height",
				          "!type": "+Number"
				        },
				        "add": {
				          "!doc": "Phaser.Game.add",
				          "!type": "+Phaser.GameObjectFactory"
				        },
				        "physicsConfig": {
				          "!doc": "Phaser.Game.physicsConfig",
				          "!type": "+Object"
				        },
				        "cache": {
				          "!doc": "Phaser.Game.cache",
				          "!type": "+Phaser.Cache"
				        },
				        "canvas": {
				          "!doc": "Phaser.Game.canvas",
				          "!type": "+HTMLCanvasElement"
				        },
				        "parseConfig": {
				          "!doc": "Phaser.Game.parseConfig",
				          "!type": "fn()"
				        },
				        "destroy": {
				          "!doc": "Phaser.Game.destroy",
				          "!type": "fn()"
				        },
				        "rnd": {
				          "!doc": "Phaser.Game.rnd",
				          "!type": "+Phaser.RandomDataGenerator"
				        },
				        "onResume": {
				          "!doc": "Phaser.Game.onResume",
				          "!type": "+Phaser.Signal"
				        },
				        "onFocus": {
				          "!doc": "Phaser.Game.onFocus",
				          "!type": "+Phaser.Signal"
				        },
				        "input": {
				          "!doc": "Phaser.Game.input",
				          "!type": "+Phaser.Input"
				        },
				        "fpsProblemNotifier": {
				          "!doc": "Phaser.Game.fpsProblemNotifier",
				          "!type": "+Phaser.Signal"
				        },
				        "enableStep": {
				          "!doc": "Phaser.Game.enableStep",
				          "!type": "fn()"
				        },
				        "math": {
				          "!doc": "Phaser.Game.math",
				          "!type": "+Phaser.Math"
				        },
				        "device": {
				          "!doc": "Phaser.Game.device",
				          "!type": "+Phaser.Device"
				        },
				        "stepCount": {
				          "!doc": "Phaser.Game.stepCount",
				          "!type": "+Number"
				        },
				        "setUpRenderer": {
				          "!doc": "Phaser.Game.setUpRenderer",
				          "!type": "fn()"
				        },
				        "renderer": {
				          "!doc": "Phaser.Game.renderer",
				          "!type": "+PIXI.CanvasRenderer"
				        },
				        "tweens": {
				          "!doc": "Phaser.Game.tweens",
				          "!type": "+Phaser.TweenManager"
				        },
				        "update": {
				          "!doc": "Phaser.Game.update",
				          "!type": "fn(time: +Number)"
				        },
				        "scale": {
				          "!doc": "Phaser.Game.scale",
				          "!type": "+Phaser.ScaleManager"
				        },
				        "onPause": {
				          "!doc": "Phaser.Game.onPause",
				          "!type": "+Phaser.Signal"
				        },
				        "transparent": {
				          "!doc": "Phaser.Game.transparent",
				          "!type": "+Boolean"
				        },
				        "world": {
				          "!doc": "Phaser.Game.world",
				          "!type": "+Phaser.World"
				        },
				        "load": {
				          "!doc": "Phaser.Game.load",
				          "!type": "+Phaser.Loader"
				        },
				        "updateRender": {
				          "!doc": "Phaser.Game.updateRender",
				          "!type": "fn(elapsedTime: +Number)"
				        },
				        "isRunning": {
				          "!doc": "Phaser.Game.isRunning",
				          "!type": "+Boolean"
				        },
				        "updateLogic": {
				          "!doc": "Phaser.Game.updateLogic",
				          "!type": "fn(timeStep: +Number)"
				        },
				        "preserveDrawingBuffer": {
				          "!doc": "Phaser.Game.preserveDrawingBuffer",
				          "!type": "+Boolean"
				        },
				        "physics": {
				          "!doc": "Phaser.Game.physics",
				          "!type": "+Phaser.Physics"
				        },
				        "pendingStep": {
				          "!doc": "Phaser.Game.pendingStep",
				          "!type": "+Boolean"
				        },
				        "boot": {
				          "!doc": "Phaser.Game.boot",
				          "!type": "fn()"
				        },
				        "renderType": {
				          "!doc": "Phaser.Game.renderType",
				          "!type": "+Number"
				        },
				        "camera": {
				          "!doc": "Phaser.Game.camera",
				          "!type": "+Phaser.Camera"
				        },
				        "make": {
				          "!doc": "Phaser.Game.make",
				          "!type": "+Phaser.GameObjectCreator"
				        },
				        "isBooted": {
				          "!doc": "Phaser.Game.isBooted",
				          "!type": "+Boolean"
				        },
				        "debug": {
				          "!doc": "Phaser.Game.debug",
				          "!type": "+Phaser.Utils.Debug"
				        },
				        "forceSingleUpdate": {
				          "!doc": "Phaser.Game.forceSingleUpdate",
				          "!type": "+Boolean"
				        },
				        "gameResumed": {
				          "!doc": "Phaser.Game.gameResumed",
				          "!type": "fn(event: +Object)"
				        },
				        "onBlur": {
				          "!doc": "Phaser.Game.onBlur",
				          "!type": "+Phaser.Signal"
				        },
				        "stage": {
				          "!doc": "Phaser.Game.stage",
				          "!type": "+Phaser.Stage"
				        },
				        "width": {
				          "!doc": "Phaser.Game.width",
				          "!type": "+Number"
				        },
				        "step": {
				          "!doc": "Phaser.Game.step",
				          "!type": "fn()"
				        },
				        "focusGain": {
				          "!doc": "Phaser.Game.focusGain",
				          "!type": "fn(event: +Object)"
				        },
				        "time": {
				          "!doc": "Phaser.Game.time",
				          "!type": "+Phaser.Time"
				        },
				        "disableStep": {
				          "!doc": "Phaser.Game.disableStep",
				          "!type": "fn()"
				        },
				        "config": {
				          "!doc": "Phaser.Game.config",
				          "!type": "+Object"
				        }
				      }
				    },
				    "Rope": {
				      "init": {
				        "!doc": "Phaser.Rope.init",
				        "!type": "fn()"
				      },
				      "install": {
				        "!doc": "Phaser.Rope.install",
				        "!type": "fn()"
				      },
				      "!doc": "Phaser.Rope",
				      "!type": "fn(game: +Phaser.Game, x: +Number, y: +Number, key: +String, frame: +String, points: +Array)",
				      "prototype": {
				        "play": {
				          "!doc": "Phaser.Rope.play",
				          "!type": "fn(name: +String, frameRate: +Number, loop: +Boolean, killOnComplete: +Boolean) -> +Phaser.Animation"
				        },
				        "parent": {
				          "!doc": "Phaser.Rope.parent",
				          "!type": "+PIXI.DisplayObjectContainer"
				        },
				        "lifespan": {
				          "!doc": "Phaser.Rope.lifespan",
				          "!type": "+Number"
				        },
				        "outOfBoundsKill": {
				          "!doc": "Phaser.Rope.outOfBoundsKill",
				          "!type": "+Boolean"
				        },
				        "type": {
				          "!doc": "Phaser.Rope.type",
				          "!type": "+Number"
				        },
				        "body": {
				          "!doc": "Phaser.Rope.body",
				          "!type": "+Phaser.Physics.Arcade.Body"
				        },
				        "inCamera": {
				          "!doc": "Phaser.Rope.inCamera",
				          "!type": "+Boolean"
				        },
				        "offsetX": {
				          "!doc": "Phaser.Rope.offsetX",
				          "!type": "+Number"
				        },
				        "resizeFrame": {
				          "!doc": "Phaser.Rope.resizeFrame",
				          "!type": "fn(parent: +Object, width: +Number, height: +Number)"
				        },
				        "offsetY": {
				          "!doc": "Phaser.Rope.offsetY",
				          "!type": "+Number"
				        },
				        "children": {
				          "!doc": "Phaser.Rope.children",
				          "!type": "+Array_DisplayObject_"
				        },
				        "pivot": {
				          "!doc": "Phaser.Rope.pivot",
				          "!type": "+Phaser.Point"
				        },
				        "revive": {
				          "!doc": "Phaser.Rope.revive",
				          "!type": "fn(health: +Number) -> +PIXI.DisplayObject"
				        },
				        "fixedToCamera": {
				          "!doc": "Phaser.Rope.fixedToCamera",
				          "!type": "+Boolean"
				        },
				        "renderOrderID": {
				          "!doc": "Phaser.Rope.renderOrderID",
				          "!type": "+Number"
				        },
				        "DrawModes": {
				          "!doc": "Phaser.Rope.DrawModes",
				          "!type": "+Object"
				        },
				        "bringToTop": {
				          "!doc": "Phaser.Rope.bringToTop",
				          "!type": "fn() -> +PIXI.DisplayObject"
				        },
				        "events": {
				          "!doc": "Phaser.Rope.events",
				          "!type": "+Phaser.Events"
				        },
				        "moveUp": {
				          "!doc": "Phaser.Rope.moveUp",
				          "!type": "fn() -> +PIXI.DisplayObject"
				        },
				        "previousRotation": {
				          "!doc": "Phaser.Rope.previousRotation",
				          "!type": "+Number"
				        },
				        "visible": {
				          "!doc": "Phaser.Rope.visible",
				          "!type": "+Boolean"
				        },
				        "postUpdate": {
				          "!doc": "Phaser.Rope.postUpdate",
				          "!type": "fn()"
				        },
				        "bottom": {
				          "!doc": "Phaser.Rope.bottom",
				          "!type": "+Number"
				        },
				        "cameraOffset": {
				          "!doc": "Phaser.Rope.cameraOffset",
				          "!type": "+Phaser.Point"
				        },
				        "smoothed": {
				          "!doc": "Phaser.Rope.smoothed",
				          "!type": "+Boolean"
				        },
				        "destroy": {
				          "!doc": "Phaser.Rope.destroy",
				          "!type": "fn(destroyChildren: +Boolean)"
				        },
				        "moveDown": {
				          "!doc": "Phaser.Rope.moveDown",
				          "!type": "fn() -> +PIXI.DisplayObject"
				        },
				        "updateCrop": {
				          "!doc": "Phaser.Rope.updateCrop",
				          "!type": "fn()"
				        },
				        "worldPosition": {
				          "!doc": "Phaser.Rope.worldPosition",
				          "!type": "+Phaser.Point"
				        },
				        "overlap": {
				          "!doc": "Phaser.Rope.overlap",
				          "!type": "fn(displayObject: +Phaser.Sprite) -> +Boolean"
				        },
				        "left": {
				          "!doc": "Phaser.Rope.left",
				          "!type": "+Number"
				        },
				        "loadTexture": {
				          "!doc": "Phaser.Rope.loadTexture",
				          "!type": "fn(key: +String, frame: +String, stopAnimation: +Boolean)"
				        },
				        "name": {
				          "!doc": "Phaser.Rope.name",
				          "!type": "+String"
				        },
				        "reset": {
				          "!doc": "Phaser.Rope.reset",
				          "!type": "fn(x: +Number, y: +Number) -> +_Phaser.Rope__This_instance."
				        },
				        "position": {
				          "!doc": "Phaser.Rope.position",
				          "!type": "+Phaser.Point"
				        },
				        "preUpdate": {
				          "!doc": "Phaser.Rope.preUpdate",
				          "!type": "fn()"
				        },
				        "crop": {
				          "!doc": "Phaser.Rope.crop",
				          "!type": "fn(rect: +Phaser.Rectangle, copy: +Boolean)"
				        },
				        "updateAnimation": {
				          "!doc": "Phaser.Rope.updateAnimation",
				          "!type": "+Function"
				        },
				        "frame": {
				          "!doc": "Phaser.Rope.frame",
				          "!type": "+Number"
				        },
				        "worldRotation": {
				          "!doc": "Phaser.Rope.worldRotation",
				          "!type": "+Number"
				        },
				        "filterArea": {
				          "!doc": "Phaser.Rope.filterArea",
				          "!type": "+Phaser.Rectangle"
				        },
				        "cropRect": {
				          "!doc": "Phaser.Rope.cropRect",
				          "!type": "+Phaser.Rectangle"
				        },
				        "canvasPadding": {
				          "!doc": "Phaser.Rope.canvasPadding",
				          "!type": "+Number"
				        },
				        "game": {
				          "!doc": "Phaser.Rope.game",
				          "!type": "+Phaser.Game"
				        },
				        "components": {
				          "!doc": "Phaser.Rope.components",
				          "!type": "+Object"
				        },
				        "renderable": {
				          "!doc": "Phaser.Rope.renderable",
				          "!type": "+Boolean"
				        },
				        "worldScale": {
				          "!doc": "Phaser.Rope.worldScale",
				          "!type": "+Phaser.Point"
				        },
				        "deltaZ": {
				          "!doc": "Phaser.Rope.deltaZ",
				          "!type": "+Number"
				        },
				        "alive": {
				          "!doc": "Phaser.Rope.alive",
				          "!type": "+Boolean"
				        },
				        "transformCallbackContext": {
				          "!doc": "Phaser.Rope.transformCallbackContext",
				          "!type": "+Object"
				        },
				        "deltaX": {
				          "!doc": "Phaser.Rope.deltaX",
				          "!type": "+Number"
				        },
				        "deltaY": {
				          "!doc": "Phaser.Rope.deltaY",
				          "!type": "+Number"
				        },
				        "update": {
				          "!doc": "Phaser.Rope.update",
				          "!type": "fn()"
				        },
				        "transformCallback": {
				          "!doc": "Phaser.Rope.transformCallback",
				          "!type": "+Function"
				        },
				        "scale": {
				          "!doc": "Phaser.Rope.scale",
				          "!type": "+Phaser.Point"
				        },
				        "inWorld": {
				          "!doc": "Phaser.Rope.inWorld",
				          "!type": "+Boolean"
				        },
				        "worldAlpha": {
				          "!doc": "Phaser.Rope.worldAlpha",
				          "!type": "+Number"
				        },
				        "world": {
				          "!doc": "Phaser.Rope.world",
				          "!type": "+Phaser.Point"
				        },
				        "top": {
				          "!doc": "Phaser.Rope.top",
				          "!type": "+Number"
				        },
				        "setFrame": {
				          "!doc": "Phaser.Rope.setFrame",
				          "!type": "fn(frame: +Phaser.Frame)"
				        },
				        "animations": {
				          "!doc": "Phaser.Rope.animations",
				          "!type": "+Phaser.AnimationManager"
				        },
				        "alpha": {
				          "!doc": "Phaser.Rope.alpha",
				          "!type": "+Number"
				        },
				        "angle": {
				          "!doc": "Phaser.Rope.angle",
				          "!type": "+Number"
				        },
				        "setScaleMinMax": {
				          "!doc": "Phaser.Rope.setScaleMinMax",
				          "!type": "fn(minX: +Number, minY: +Number, maxX: +Number, maxY: +Number)"
				        },
				        "checkWorldBounds": {
				          "!doc": "Phaser.Rope.checkWorldBounds",
				          "!type": "+Boolean"
				        },
				        "key": {
				          "!doc": "Phaser.Rope.key",
				          "!type": "+String"
				        },
				        "dirty": {
				          "!doc": "Phaser.Rope.dirty",
				          "!type": "+Boolean"
				        },
				        "debug": {
				          "!doc": "Phaser.Rope.debug",
				          "!type": "+Boolean"
				        },
				        "frameName": {
				          "!doc": "Phaser.Rope.frameName",
				          "!type": "+String"
				        },
				        "texture": {
				          "!doc": "Phaser.Rope.texture",
				          "!type": "+PIXI.Texture"
				        },
				        "rotation": {
				          "!doc": "Phaser.Rope.rotation",
				          "!type": "+Number"
				        },
				        "sendToBack": {
				          "!doc": "Phaser.Rope.sendToBack",
				          "!type": "fn() -> +PIXI.DisplayObject"
				        },
				        "destroyPhase": {
				          "!doc": "Phaser.Rope.destroyPhase",
				          "!type": "+Boolean"
				        },
				        "right": {
				          "!doc": "Phaser.Rope.right",
				          "!type": "+Number"
				        },
				        "kill": {
				          "!doc": "Phaser.Rope.kill",
				          "!type": "fn() -> +PIXI.DisplayObject"
				        },
				        "resetFrame": {
				          "!doc": "Phaser.Rope.resetFrame",
				          "!type": "fn()"
				        },
				        "previousPosition": {
				          "!doc": "Phaser.Rope.previousPosition",
				          "!type": "+Phaser.Point"
				        },
				        "scaleMax": {
				          "!doc": "Phaser.Rope.scaleMax",
				          "!type": "+Phaser.Point"
				        },
				        "pendingDestroy": {
				          "!doc": "Phaser.Rope.pendingDestroy",
				          "!type": "+Boolean"
				        },
				        "stage": {
				          "!doc": "Phaser.Rope.stage",
				          "!type": "+Phaser.Stage"
				        },
				        "blendMode": {
				          "!doc": "Phaser.Rope.blendMode",
				          "!type": "+Number"
				        },
				        "hitArea": {
				          "!doc": "Phaser.Rope.hitArea",
				          "!type": "+Phaser.Rectangle"
				        },
				        "autoCull": {
				          "!doc": "Phaser.Rope.autoCull",
				          "!type": "+Boolean"
				        },
				        "x": {
				          "!doc": "Phaser.Rope.x",
				          "!type": "+Number"
				        },
				        "exists": {
				          "!doc": "Phaser.Rope.exists",
				          "!type": "+Boolean"
				        },
				        "y": {
				          "!doc": "Phaser.Rope.y",
				          "!type": "+Number"
				        },
				        "z": {
				          "!doc": "Phaser.Rope.z",
				          "!type": "+Number"
				        },
				        "fresh": {
				          "!doc": "Phaser.Rope.fresh",
				          "!type": "+Boolean"
				        },
				        "scaleMin": {
				          "!doc": "Phaser.Rope.scaleMin",
				          "!type": "+Phaser.Point"
				        }
				      },
				      "DrawModes": {
				        "!doc": "Phaser.Rope.DrawModes",
				        "!type": "+Object"
				      }
				    },
				    "RetroFont": {
				      "TEXT_SET2": "+String",
				      "TEXT_SET3": "+String",
				      "TEXT_SET1": "+String",
				      "TEXT_SET10": "+String",
				      "TEXT_SET6": "+String",
				      "TEXT_SET7": "+String",
				      "TEXT_SET4": "+String",
				      "!doc": "Phaser.RetroFont",
				      "TEXT_SET5": "+String",
				      "TEXT_SET8": "+String",
				      "TEXT_SET9": "+String",
				      "prototype": {
				        "frameData": {
				          "!doc": "Phaser.RetroFont.frameData",
				          "!type": "+Phaser.FrameData"
				        },
				        "game": {
				          "!doc": "Phaser.RetroFont.game",
				          "!type": "+Phaser.Game"
				        },
				        "removeUnsupportedCharacters": {
				          "!doc": "Phaser.RetroFont.removeUnsupportedCharacters",
				          "!type": "fn(stripCR: +Boolean) -> +String"
				        },
				        "multiLine": {
				          "!doc": "Phaser.RetroFont.multiLine",
				          "!type": "+Boolean"
				        },
				        "autoUpperCase": {
				          "!doc": "Phaser.RetroFont.autoUpperCase",
				          "!type": "+Boolean"
				        },
				        "stamp": {
				          "!doc": "Phaser.RetroFont.stamp",
				          "!type": "+Phaser.Image"
				        },
				        "align": {
				          "!doc": "Phaser.RetroFont.align",
				          "!type": "+String"
				        },
				        "type": {
				          "!doc": "Phaser.RetroFont.type",
				          "!type": "+Number"
				        },
				        "renderRawXY": {
				          "!doc": "Phaser.RetroFont.renderRawXY",
				          "!type": "fn(displayObject: +Phaser.Sprite, x: +Number, y: +Number, clear: +Boolean)"
				        },
				        "characterWidth": {
				          "!doc": "Phaser.RetroFont.characterWidth",
				          "!type": "+Number"
				        },
				        "setFixedWidth": {
				          "!doc": "Phaser.RetroFont.setFixedWidth",
				          "!type": "fn(width: +Number, lineAlignment: +String)"
				        },
				        "offsetX": {
				          "!doc": "Phaser.RetroFont.offsetX",
				          "!type": "+Number"
				        },
				        "characterSpacingX": {
				          "!doc": "Phaser.RetroFont.characterSpacingX",
				          "!type": "+Number"
				        },
				        "characterSpacingY": {
				          "!doc": "Phaser.RetroFont.characterSpacingY",
				          "!type": "+Number"
				        },
				        "offsetY": {
				          "!doc": "Phaser.RetroFont.offsetY",
				          "!type": "+Number"
				        },
				        "renderXY": {
				          "!doc": "Phaser.RetroFont.renderXY",
				          "!type": "fn(displayObject: +Phaser.Sprite, x: +Number, y: +Number, clear: +Boolean)"
				        },
				        "text": {
				          "!doc": "Phaser.RetroFont.text",
				          "!type": "+String"
				        },
				        "render": {
				          "!doc": "Phaser.RetroFont.render",
				          "!type": "fn(displayObject: +Phaser.Sprite, matrix: +Phaser.Matrix, clear: +Boolean)"
				        },
				        "key": {
				          "!doc": "Phaser.RetroFont.key",
				          "!type": "+String"
				        },
				        "fixedWidth": {
				          "!doc": "Phaser.RetroFont.fixedWidth",
				          "!type": "+Number"
				        },
				        "getLongestLine": {
				          "!doc": "Phaser.RetroFont.getLongestLine",
				          "!type": "fn() -> +Number"
				        },
				        "updateOffset": {
				          "!doc": "Phaser.RetroFont.updateOffset",
				          "!type": "fn(xOffset: +Number, yOffset: +Number)"
				        },
				        "characterPerRow": {
				          "!doc": "Phaser.RetroFont.characterPerRow",
				          "!type": "+Number"
				        },
				        "characterHeight": {
				          "!doc": "Phaser.RetroFont.characterHeight",
				          "!type": "+Number"
				        },
				        "customSpacingX": {
				          "!doc": "Phaser.RetroFont.customSpacingX",
				          "!type": "+Number"
				        },
				        "customSpacingY": {
				          "!doc": "Phaser.RetroFont.customSpacingY",
				          "!type": "+Number"
				        },
				        "pasteLine": {
				          "!doc": "Phaser.RetroFont.pasteLine",
				          "!type": "fn(line: +String, x: +Number, y: +Number, customSpacingX: +Number)"
				        },
				        "fontSet": {
				          "!doc": "Phaser.RetroFont.fontSet",
				          "!type": "+Phaser.Image"
				        },
				        "buildRetroFontText": {
				          "!doc": "Phaser.RetroFont.buildRetroFontText",
				          "!type": "fn()"
				        },
				        "setText": {
				          "!doc": "Phaser.RetroFont.setText",
				          "!type": "fn(content: +String, multiLine: +Boolean, characterSpacing: +Number, lineSpacing: +Number, lineAlignment: +String, allowLowerCase: +Boolean)"
				        }
				      },
				      "ALIGN_CENTER": "+String",
				      "!type": "fn(game: +Phaser.Game, key: +String, characterWidth: +Number, characterHeight: +Number, chars: +String, charsPerRow: +Number, xSpacing: +Number, ySpacing: +Number, xOffset: +Number, yOffset: +Number)",
				      "ALIGN_RIGHT": "+String",
				      "TEXT_SET11": "+String",
				      "ALIGN_LEFT": "+String"
				    },
				    "FlexGrid": {
				      "!doc": "Phaser.FlexGrid",
				      "!type": "fn(manager: +Phaser.ScaleManager, width: +Number, height: +Number)",
				      "prototype": {
				        "fitSprite": {
				          "!doc": "Phaser.FlexGrid.fitSprite",
				          "!type": "fn(sprite: +Phaser.Sprite)"
				        },
				        "game": {
				          "!doc": "Phaser.FlexGrid.game",
				          "!type": "+Phaser.Game"
				        },
				        "debug": {
				          "!doc": "Phaser.FlexGrid.debug",
				          "!type": "fn()"
				        },
				        "createFullLayer": {
				          "!doc": "Phaser.FlexGrid.createFullLayer",
				          "!type": "fn(children: +Array) -> +Phaser.FlexLayer"
				        },
				        "manager": {
				          "!doc": "Phaser.FlexGrid.manager",
				          "!type": "+Phaser.ScaleManager"
				        },
				        "scaleFactor": {
				          "!doc": "Phaser.FlexGrid.scaleFactor",
				          "!type": "+Phaser.Point"
				        },
				        "createFluidLayer": {
				          "!doc": "Phaser.FlexGrid.createFluidLayer",
				          "!type": "fn(children: +Array) -> +Phaser.FlexLayer"
				        },
				        "refresh": {
				          "!doc": "Phaser.FlexGrid.refresh",
				          "!type": "fn()"
				        },
				        "onResize": {
				          "!doc": "Phaser.FlexGrid.onResize",
				          "!type": "fn(width: +Number, height: +Number)"
				        },
				        "setSize": {
				          "!doc": "Phaser.FlexGrid.setSize",
				          "!type": "fn(width: +Number, height: +Number)"
				        },
				        "createCustomLayer": {
				          "!doc": "Phaser.FlexGrid.createCustomLayer",
				          "!type": "fn(width: +Number, height: +Number, children: +Array._PIXI.DisplayObject_) -> +Phaser.FlexLayer"
				        },
				        "reset": {
				          "!doc": "Phaser.FlexGrid.reset",
				          "!type": "fn()"
				        },
				        "position": {
				          "!doc": "Phaser.FlexGrid.position",
				          "!type": "+Phaser.Point"
				        },
				        "createFixedLayer": {
				          "!doc": "Phaser.FlexGrid.createFixedLayer",
				          "!type": "fn(children: +Array._PIXI.DisplayObject_) -> +Phaser.FlexLayer"
				        }
				      }
				    },
				    "AnimationManager": {
				      "!doc": "Phaser.AnimationManager",
				      "!type": "fn(sprite: +Phaser.Sprite)",
				      "prototype": {
				        "add": {
				          "!doc": "Phaser.AnimationManager.add",
				          "!type": "fn(name: +String, frames: +Array, frameRate: +Number, loop: +Boolean, useNumericIndex: +Boolean) -> +Phaser.Animation"
				        },
				        "play": {
				          "!doc": "Phaser.AnimationManager.play",
				          "!type": "fn(name: +String, frameRate: +Number, loop: +Boolean, killOnComplete: +Boolean) -> +Phaser.Animation"
				        },
				        "next": {
				          "!doc": "Phaser.AnimationManager.next",
				          "!type": "fn(quantity: +Number)"
				        },
				        "frameData": {
				          "!doc": "Phaser.AnimationManager.frameData",
				          "!type": "+Phaser.FrameData"
				        },
				        "game": {
				          "!doc": "Phaser.AnimationManager.game",
				          "!type": "+Phaser.Game"
				        },
				        "updateIfVisible": {
				          "!doc": "Phaser.AnimationManager.updateIfVisible",
				          "!type": "+Boolean"
				        },
				        "paused": {
				          "!doc": "Phaser.AnimationManager.paused",
				          "!type": "+Boolean"
				        },
				        "frameName": {
				          "!doc": "Phaser.AnimationManager.frameName",
				          "!type": "+String"
				        },
				        "previous": {
				          "!doc": "Phaser.AnimationManager.previous",
				          "!type": "fn(quantity: +Number)"
				        },
				        "currentAnim": {
				          "!doc": "Phaser.AnimationManager.currentAnim",
				          "!type": "+Phaser.Animation"
				        },
				        "update": {
				          "!doc": "Phaser.AnimationManager.update",
				          "!type": "fn() -> +Boolean"
				        },
				        "destroy": {
				          "!doc": "Phaser.AnimationManager.destroy",
				          "!type": "fn()"
				        },
				        "isLoaded": {
				          "!doc": "Phaser.AnimationManager.isLoaded",
				          "!type": "+Boolean"
				        },
				        "refreshFrame": {
				          "!doc": "Phaser.AnimationManager.refreshFrame",
				          "!type": "fn()"
				        },
				        "stop": {
				          "!doc": "Phaser.AnimationManager.stop",
				          "!type": "fn(name: +String, resetFrame: +Boolean)"
				        },
				        "frameTotal": {
				          "!doc": "Phaser.AnimationManager.frameTotal",
				          "!type": "+Number"
				        },
				        "getAnimation": {
				          "!doc": "Phaser.AnimationManager.getAnimation",
				          "!type": "fn(name: +String) -> +Phaser.Animation"
				        },
				        "sprite": {
				          "!doc": "Phaser.AnimationManager.sprite",
				          "!type": "+Phaser.Sprite"
				        },
				        "currentFrame": {
				          "!doc": "Phaser.AnimationManager.currentFrame",
				          "!type": "+Phaser.Frame"
				        },
				        "name": {
				          "!doc": "Phaser.AnimationManager.name",
				          "!type": "+String"
				        },
				        "validateFrames": {
				          "!doc": "Phaser.AnimationManager.validateFrames",
				          "!type": "fn(frames: +Array, useNumericIndex: +Boolean) -> +Boolean"
				        },
				        "frame": {
				          "!doc": "Phaser.AnimationManager.frame",
				          "!type": "+Number"
				        }
				      }
				    },
				    "Key": {
				      "!doc": "Phaser.Key",
				      "!type": "fn(game: +Phaser.Game, keycode: +Number)",
				      "prototype": {
				        "repeats": {
				          "!doc": "Phaser.Key.repeats",
				          "!type": "+Number"
				        },
				        "game": {
				          "!doc": "Phaser.Key.game",
				          "!type": "+Phaser.Game"
				        },
				        "onHoldContext": {
				          "!doc": "Phaser.Key.onHoldContext",
				          "!type": "+Object"
				        },
				        "timeUp": {
				          "!doc": "Phaser.Key.timeUp",
				          "!type": "+Number"
				        },
				        "ctrlKey": {
				          "!doc": "Phaser.Key.ctrlKey",
				          "!type": "+Boolean"
				        },
				        "onHoldCallback": {
				          "!doc": "Phaser.Key.onHoldCallback",
				          "!type": "+Function"
				        },
				        "update": {
				          "!doc": "Phaser.Key.update",
				          "!type": "fn()"
				        },
				        "timeDown": {
				          "!doc": "Phaser.Key.timeDown",
				          "!type": "+Number"
				        },
				        "downDuration": {
				          "!doc": "Phaser.Key.downDuration",
				          "!type": "fn(duration: +Number) -> +Boolean"
				        },
				        "isDown": {
				          "!doc": "Phaser.Key.isDown",
				          "!type": "+Boolean"
				        },
				        "onUp": {
				          "!doc": "Phaser.Key.onUp",
				          "!type": "+Phaser.Signal"
				        },
				        "upDuration": {
				          "!doc": "Phaser.Key.upDuration",
				          "!type": "fn(duration: +Number) -> +Boolean"
				        },
				        "duration": {
				          "!doc": "Phaser.Key.duration",
				          "!type": "+Number"
				        },
				        "keyCode": {
				          "!doc": "Phaser.Key.keyCode",
				          "!type": "+Number"
				        },
				        "shiftKey": {
				          "!doc": "Phaser.Key.shiftKey",
				          "!type": "+Boolean"
				        },
				        "isUp": {
				          "!doc": "Phaser.Key.isUp",
				          "!type": "+Boolean"
				        },
				        "reset": {
				          "!doc": "Phaser.Key.reset",
				          "!type": "fn(hard: +Boolean)"
				        },
				        "onDown": {
				          "!doc": "Phaser.Key.onDown",
				          "!type": "+Phaser.Signal"
				        },
				        "processKeyUp": {
				          "!doc": "Phaser.Key.processKeyUp",
				          "!type": "fn(event: +KeyboardEvent)"
				        },
				        "altKey": {
				          "!doc": "Phaser.Key.altKey",
				          "!type": "+Boolean"
				        },
				        "processKeyDown": {
				          "!doc": "Phaser.Key.processKeyDown",
				          "!type": "fn(event: +KeyboardEvent)"
				        },
				        "event": {
				          "!doc": "Phaser.Key.event",
				          "!type": "+Object"
				        }
				      }
				    },
				    "RENDERTEXTURE": {
				      "!doc": "Phaser.RENDERTEXTURE",
				      "!type": "+Number"
				    },
				    "Group": {
				      "SORT_ASCENDING": "+Number",
				      "RETURN_TOTAL": "+Number",
				      "!doc": "Phaser.Group",
				      "RETURN_NONE": "+Number",
				      "!type": "fn(game: +Phaser.Game, parent: +DisplayObject, name: +String, addToStage: +Boolean, enableBody: +Boolean, physicsBodyType: +Number)",
				      "SORT_DESCENDING": "+Number",
				      "RETURN_CHILD": "+Number",
				      "prototype": {
				        "xy": {
				          "!doc": "Phaser.Group.xy",
				          "!type": "fn(index: +Number, x: +Number, y: +Number)"
				        },
				        "parent": {
				          "!doc": "Phaser.Group.parent",
				          "!type": "+PIXI.DisplayObjectContainer"
				        },
				        "descendingSortHandler": {
				          "!doc": "Phaser.Group.descendingSortHandler",
				          "!type": "fn(a: +Object, b: +Object)"
				        },
				        "type": {
				          "!doc": "Phaser.Group.type",
				          "!type": "+Number"
				        },
				        "moveAll": {
				          "!doc": "Phaser.Group.moveAll",
				          "!type": "fn(group: +Phaser.Group, silent: +Boolean) -> +Phaser.Group"
				        },
				        "removeAll": {
				          "!doc": "Phaser.Group.removeAll",
				          "!type": "fn(destroy: +Boolean, silent: +Boolean)"
				        },
				        "enableBody": {
				          "!doc": "Phaser.Group.enableBody",
				          "!type": "+Boolean"
				        },
				        "children": {
				          "!doc": "Phaser.Group.children",
				          "!type": "+Array_DisplayObject_"
				        },
				        "customSort": {
				          "!doc": "Phaser.Group.customSort",
				          "!type": "fn(sortHandler: +Function, context: +Object)"
				        },
				        "enableBodyDebug": {
				          "!doc": "Phaser.Group.enableBodyDebug",
				          "!type": "+Boolean"
				        },
				        "pivot": {
				          "!doc": "Phaser.Group.pivot",
				          "!type": "+Phaser.Point"
				        },
				        "bringToTop": {
				          "!doc": "Phaser.Group.bringToTop",
				          "!type": "fn(child: +Object) -> +Object"
				        },
				        "moveUp": {
				          "!doc": "Phaser.Group.moveUp",
				          "!type": "fn(child: +Object) -> +Object"
				        },
				        "physicsType": {
				          "!doc": "Phaser.Group.physicsType",
				          "!type": "+Number"
				        },
				        "postUpdate": {
				          "!doc": "Phaser.Group.postUpdate",
				          "!type": "fn()"
				        },
				        "destroy": {
				          "!doc": "Phaser.Group.destroy",
				          "!type": "fn(destroyChildren: +Boolean, soft: +Boolean)"
				        },
				        "cursorIndex": {
				          "!doc": "Phaser.Group.cursorIndex",
				          "!type": "+Number"
				        },
				        "getFirstDead": {
				          "!doc": "Phaser.Group.getFirstDead",
				          "!type": "fn(createIfNull: +Boolean, x: +Number, y: +Number, key: +String, frame: +String) -> +PIXI.DisplayObject"
				        },
				        "physicsSortDirection": {
				          "!doc": "Phaser.Group.physicsSortDirection",
				          "!type": "+Number"
				        },
				        "addAt": {
				          "!doc": "Phaser.Group.addAt",
				          "!type": "fn(child: +DisplayObject, index: +Number, silent: +Boolean) -> +PIXI.DisplayObject"
				        },
				        "worldPosition": {
				          "!doc": "Phaser.Group.worldPosition",
				          "!type": "+Phaser.Point"
				        },
				        "forEachAlive": {
				          "!doc": "Phaser.Group.forEachAlive",
				          "!type": "fn(callback: +Function, callbackContext: +Object, args: +Object)"
				        },
				        "resetCursor": {
				          "!doc": "Phaser.Group.resetCursor",
				          "!type": "fn(index: +Number) -> +Object"
				        },
				        "addMultiple": {
				          "!doc": "Phaser.Group.addMultiple",
				          "!type": "fn(children: +Array._DisplayObject_, silent: +Boolean) -> +Array._DisplayObject_"
				        },
				        "setProperty": {
				          "!doc": "Phaser.Group.setProperty",
				          "!type": "fn(child: +Object, key: +Array, value: +Object, operation: +Number, force: +Boolean) -> +Boolean"
				        },
				        "preUpdate": {
				          "!doc": "Phaser.Group.preUpdate",
				          "!type": "fn()"
				        },
				        "hash": {
				          "!doc": "Phaser.Group.hash",
				          "!type": "+Array"
				        },
				        "filterArea": {
				          "!doc": "Phaser.Group.filterArea",
				          "!type": "+Phaser.Rectangle"
				        },
				        "addToHash": {
				          "!doc": "Phaser.Group.addToHash",
				          "!type": "fn(child: +DisplayObject) -> +Boolean"
				        },
				        "worldScale": {
				          "!doc": "Phaser.Group.worldScale",
				          "!type": "+Phaser.Point"
				        },
				        "alive": {
				          "!doc": "Phaser.Group.alive",
				          "!type": "+Boolean"
				        },
				        "checkProperty": {
				          "!doc": "Phaser.Group.checkProperty",
				          "!type": "fn(child: +Object, key: +Array, value: +Object, force: +Boolean) -> +Boolean"
				        },
				        "callbackFromArray": {
				          "!doc": "Phaser.Group.callbackFromArray",
				          "!type": "fn(child: +Object, callback: +Array, length: +Number)"
				        },
				        "worldAlpha": {
				          "!doc": "Phaser.Group.worldAlpha",
				          "!type": "+Number"
				        },
				        "multiplyAll": {
				          "!doc": "Phaser.Group.multiplyAll",
				          "!type": "fn(property: +String, amount: +Number, checkAlive: +Boolean, checkVisible: +Boolean)"
				        },
				        "angle": {
				          "!doc": "Phaser.Group.angle",
				          "!type": "+Number"
				        },
				        "iterate": {
				          "!doc": "Phaser.Group.iterate",
				          "!type": "fn(key: +String, value: +Object, returnType: +Number, callback: +Function, callbackContext: +Object, args: +Array._any_) -> +Object"
				        },
				        "onDestroy": {
				          "!doc": "Phaser.Group.onDestroy",
				          "!type": "+Phaser.Signal"
				        },
				        "set": {
				          "!doc": "Phaser.Group.set",
				          "!type": "fn(child: +Phaser.Sprite, key: +String, value: +Object, checkAlive: +Boolean, checkVisible: +Boolean, operation: +Number, force: +Boolean) -> +Boolean"
				        },
				        "getFirstExists": {
				          "!doc": "Phaser.Group.getFirstExists",
				          "!type": "fn(exists: +Boolean, createIfNull: +Boolean, x: +Number, y: +Number, key: +String, frame: +String) -> +PIXI.DisplayObject"
				        },
				        "reverse": {
				          "!doc": "Phaser.Group.reverse",
				          "!type": "fn()"
				        },
				        "filter": {
				          "!doc": "Phaser.Group.filter",
				          "!type": "fn(predicate: +Function, checkExists: +Boolean) -> +Phaser.ArraySet"
				        },
				        "stage": {
				          "!doc": "Phaser.Group.stage",
				          "!type": "+Phaser.Stage"
				        },
				        "addAll": {
				          "!doc": "Phaser.Group.addAll",
				          "!type": "fn(property: +String, amount: +Number, checkAlive: +Boolean, checkVisible: +Boolean)"
				        },
				        "ignoreDestroy": {
				          "!doc": "Phaser.Group.ignoreDestroy",
				          "!type": "+Boolean"
				        },
				        "x": {
				          "!doc": "Phaser.Group.x",
				          "!type": "+Number"
				        },
				        "exists": {
				          "!doc": "Phaser.Group.exists",
				          "!type": "+Boolean"
				        },
				        "y": {
				          "!doc": "Phaser.Group.y",
				          "!type": "+Number"
				        },
				        "z": {
				          "!doc": "Phaser.Group.z",
				          "!type": "+Number"
				        },
				        "divideAll": {
				          "!doc": "Phaser.Group.divideAll",
				          "!type": "fn(property: +String, amount: +Number, checkAlive: +Boolean, checkVisible: +Boolean)"
				        },
				        "setAllChildren": {
				          "!doc": "Phaser.Group.setAllChildren",
				          "!type": "fn(key: +String, value: +Object, checkAlive: +Boolean, checkVisible: +Boolean, operation: +Number, force: +Boolean)"
				        },
				        "physicsBodyType": {
				          "!doc": "Phaser.Group.physicsBodyType",
				          "!type": "+Number"
				        },
				        "getIndex": {
				          "!doc": "Phaser.Group.getIndex",
				          "!type": "fn(child: +Object) -> +Number"
				        },
				        "getBottom": {
				          "!doc": "Phaser.Group.getBottom",
				          "!type": "fn() -> +Object"
				        },
				        "replace": {
				          "!doc": "Phaser.Group.replace",
				          "!type": "fn(oldChild: +Object, newChild: +Object) -> +Object"
				        },
				        "resetChild": {
				          "!doc": "Phaser.Group.resetChild",
				          "!type": "fn(child: +DisplayObject, x: +Number, y: +Number, key: +String, frame: +String) -> +PIXI.DisplayObject"
				        },
				        "getRandom": {
				          "!doc": "Phaser.Group.getRandom",
				          "!type": "fn(startIndex: +Number, length: +Number) -> +Object"
				        },
				        "forEachExists": {
				          "!doc": "Phaser.Group.forEachExists",
				          "!type": "fn(callback: +Function, callbackContext: +Object, args: +Object)"
				        },
				        "getTop": {
				          "!doc": "Phaser.Group.getTop",
				          "!type": "fn() -> +Object"
				        },
				        "create": {
				          "!doc": "Phaser.Group.create",
				          "!type": "fn(x: +Number, y: +Number, key: +String, frame: +String, exists: +Boolean) -> +PIXI.DisplayObject"
				        },
				        "countDead": {
				          "!doc": "Phaser.Group.countDead",
				          "!type": "fn() -> +Number"
				        },
				        "subAll": {
				          "!doc": "Phaser.Group.subAll",
				          "!type": "fn(property: +String, amount: +Number, checkAlive: +Boolean, checkVisible: +Boolean)"
				        },
				        "fixedToCamera": {
				          "!doc": "Phaser.Group.fixedToCamera",
				          "!type": "+Boolean"
				        },
				        "add": {
				          "!doc": "Phaser.Group.add",
				          "!type": "fn(child: +DisplayObject, silent: +Boolean) -> +PIXI.DisplayObject"
				        },
				        "visible": {
				          "!doc": "Phaser.Group.visible",
				          "!type": "+Boolean"
				        },
				        "swap": {
				          "!doc": "Phaser.Group.swap",
				          "!type": "fn(child1: +Object, child2: +Object)"
				        },
				        "cameraOffset": {
				          "!doc": "Phaser.Group.cameraOffset",
				          "!type": "+Phaser.Point"
				        },
				        "sort": {
				          "!doc": "Phaser.Group.sort",
				          "!type": "fn(key: +String, order: +Number)"
				        },
				        "moveDown": {
				          "!doc": "Phaser.Group.moveDown",
				          "!type": "fn(child: +Object) -> +Object"
				        },
				        "hasProperty": {
				          "!doc": "Phaser.Group.hasProperty",
				          "!type": "fn(child: +Object, key: +Array._string_) -> +Boolean"
				        },
				        "updateZ": {
				          "!doc": "Phaser.Group.updateZ",
				          "!type": "fn()"
				        },
				        "name": {
				          "!doc": "Phaser.Group.name",
				          "!type": "+String"
				        },
				        "ascendingSortHandler": {
				          "!doc": "Phaser.Group.ascendingSortHandler",
				          "!type": "fn(a: +Object, b: +Object)"
				        },
				        "position": {
				          "!doc": "Phaser.Group.position",
				          "!type": "+Phaser.Point"
				        },
				        "removeBetween": {
				          "!doc": "Phaser.Group.removeBetween",
				          "!type": "fn(startIndex: +Number, endIndex: +Number, destroy: +Boolean, silent: +Boolean)"
				        },
				        "removeFromHash": {
				          "!doc": "Phaser.Group.removeFromHash",
				          "!type": "fn(child: +DisplayObject) -> +Boolean"
				        },
				        "classType": {
				          "!doc": "Phaser.Group.classType",
				          "!type": "+Object"
				        },
				        "next": {
				          "!doc": "Phaser.Group.next",
				          "!type": "fn() -> +Object"
				        },
				        "cursor": {
				          "!doc": "Phaser.Group.cursor",
				          "!type": "+PIXI.DisplayObject"
				        },
				        "worldRotation": {
				          "!doc": "Phaser.Group.worldRotation",
				          "!type": "+Number"
				        },
				        "game": {
				          "!doc": "Phaser.Group.game",
				          "!type": "+Phaser.Game"
				        },
				        "renderable": {
				          "!doc": "Phaser.Group.renderable",
				          "!type": "+Boolean"
				        },
				        "forEachDead": {
				          "!doc": "Phaser.Group.forEachDead",
				          "!type": "fn(callback: +Function, callbackContext: +Object, args: +Object)"
				        },
				        "update": {
				          "!doc": "Phaser.Group.update",
				          "!type": "fn()"
				        },
				        "scale": {
				          "!doc": "Phaser.Group.scale",
				          "!type": "+Phaser.Point"
				        },
				        "countLiving": {
				          "!doc": "Phaser.Group.countLiving",
				          "!type": "fn() -> +Number"
				        },
				        "remove": {
				          "!doc": "Phaser.Group.remove",
				          "!type": "fn(child: +Object, destroy: +Boolean, silent: +Boolean) -> +Boolean"
				        },
				        "callAll": {
				          "!doc": "Phaser.Group.callAll",
				          "!type": "fn(method: +String, context: +String, args: +Object)"
				        },
				        "total": {
				          "!doc": "Phaser.Group.total",
				          "!type": "+Number"
				        },
				        "alpha": {
				          "!doc": "Phaser.Group.alpha",
				          "!type": "+Number"
				        },
				        "createMultiple": {
				          "!doc": "Phaser.Group.createMultiple",
				          "!type": "fn(quantity: +Number, key: +String, frame: +Number, exists: +Boolean)"
				        },
				        "setAll": {
				          "!doc": "Phaser.Group.setAll",
				          "!type": "fn(key: +String, value: +Object, checkAlive: +Boolean, checkVisible: +Boolean, operation: +Number, force: +Boolean)"
				        },
				        "callAllExists": {
				          "!doc": "Phaser.Group.callAllExists",
				          "!type": "fn(callback: +String, existsValue: +Boolean, parameter: +Object)"
				        },
				        "checkAll": {
				          "!doc": "Phaser.Group.checkAll",
				          "!type": "fn(key: +String, value: +Object, checkAlive: +Boolean, checkVisible: +Boolean, force: +Boolean)"
				        },
				        "previous": {
				          "!doc": "Phaser.Group.previous",
				          "!type": "fn() -> +Object"
				        },
				        "forEach": {
				          "!doc": "Phaser.Group.forEach",
				          "!type": "fn(callback: +Function, callbackContext: +Object, checkExists: +Boolean, args: +Object)"
				        },
				        "rotation": {
				          "!doc": "Phaser.Group.rotation",
				          "!type": "+Number"
				        },
				        "length": {
				          "!doc": "Phaser.Group.length",
				          "!type": "+Number"
				        },
				        "sendToBack": {
				          "!doc": "Phaser.Group.sendToBack",
				          "!type": "fn(child: +Object) -> +Object"
				        },
				        "getAt": {
				          "!doc": "Phaser.Group.getAt",
				          "!type": "fn(index: +Number) -> +PIXI.DisplayObject"
				        },
				        "pendingDestroy": {
				          "!doc": "Phaser.Group.pendingDestroy",
				          "!type": "+Boolean"
				        },
				        "getFirstAlive": {
				          "!doc": "Phaser.Group.getFirstAlive",
				          "!type": "fn(createIfNull: +Boolean, x: +Number, y: +Number, key: +String, frame: +String) -> +PIXI.DisplayObject"
				        },
				        "hitArea": {
				          "!doc": "Phaser.Group.hitArea",
				          "!type": "+Phaser.Rectangle"
				        }
				      }
				    },
				    "Frame": {
				      "!doc": "Phaser.Frame",
				      "!type": "fn(index: +Number, x: +Number, y: +Number, width: +Number, height: +Number, name: +String)",
				      "prototype": {
				        "centerY": {
				          "!doc": "Phaser.Frame.centerY",
				          "!type": "+Number"
				        },
				        "distance": {
				          "!doc": "Phaser.Frame.distance",
				          "!type": "+Number"
				        },
				        "spriteSourceSizeW": {
				          "!doc": "Phaser.Frame.spriteSourceSizeW",
				          "!type": "+Number"
				        },
				        "centerX": {
				          "!doc": "Phaser.Frame.centerX",
				          "!type": "+Number"
				        },
				        "spriteSourceSizeX": {
				          "!doc": "Phaser.Frame.spriteSourceSizeX",
				          "!type": "+Number"
				        },
				        "bottom": {
				          "!doc": "Phaser.Frame.bottom",
				          "!type": "+Number"
				        },
				        "index": {
				          "!doc": "Phaser.Frame.index",
				          "!type": "+Number"
				        },
				        "rotated": {
				          "!doc": "Phaser.Frame.rotated",
				          "!type": "+Boolean"
				        },
				        "sourceSizeH": {
				          "!doc": "Phaser.Frame.sourceSizeH",
				          "!type": "+Number"
				        },
				        "spriteSourceSizeY": {
				          "!doc": "Phaser.Frame.spriteSourceSizeY",
				          "!type": "+Number"
				        },
				        "right": {
				          "!doc": "Phaser.Frame.right",
				          "!type": "+Number"
				        },
				        "setTrim": {
				          "!doc": "Phaser.Frame.setTrim",
				          "!type": "fn(trimmed: +Boolean, actualWidth: +Number, actualHeight: +Number, destX: +Number, destY: +Number, destWidth: +Number, destHeight: +Number)"
				        },
				        "spriteSourceSizeH": {
				          "!doc": "Phaser.Frame.spriteSourceSizeH",
				          "!type": "+Number"
				        },
				        "clone": {
				          "!doc": "Phaser.Frame.clone",
				          "!type": "fn() -> +Phaser.Frame"
				        },
				        "x": {
				          "!doc": "Phaser.Frame.x",
				          "!type": "+Number"
				        },
				        "width": {
				          "!doc": "Phaser.Frame.width",
				          "!type": "+Number"
				        },
				        "name": {
				          "!doc": "Phaser.Frame.name",
				          "!type": "+String"
				        },
				        "resize": {
				          "!doc": "Phaser.Frame.resize",
				          "!type": "fn(width: +Number, height: +Number)"
				        },
				        "y": {
				          "!doc": "Phaser.Frame.y",
				          "!type": "+Number"
				        },
				        "trimmed": {
				          "!doc": "Phaser.Frame.trimmed",
				          "!type": "+Boolean"
				        },
				        "sourceSizeW": {
				          "!doc": "Phaser.Frame.sourceSizeW",
				          "!type": "+Number"
				        },
				        "getRect": {
				          "!doc": "Phaser.Frame.getRect",
				          "!type": "fn(out: +Phaser.Rectangle) -> +Phaser.Rectangle"
				        },
				        "rotationDirection": {
				          "!doc": "Phaser.Frame.rotationDirection",
				          "!type": "+String"
				        },
				        "height": {
				          "!doc": "Phaser.Frame.height",
				          "!type": "+Number"
				        }
				      }
				    },
				    "RETROFONT": {
				      "!doc": "Phaser.RETROFONT",
				      "!type": "+Number"
				    },
				    "BUTTON": {
				      "!doc": "Phaser.BUTTON",
				      "!type": "+Number"
				    },
				    "TILESPRITE": {
				      "!doc": "Phaser.TILESPRITE",
				      "!type": "+Number"
				    },
				    "Pointer": {
				      "LEFT_BUTTON": "+Number",
				      "MIDDLE_BUTTON": "+Number",
				      "ERASER_BUTTON": "+Number",
				      "RIGHT_BUTTON": "+Number",
				      "FORWARD_BUTTON": "+Number",
				      "!doc": "Phaser.Pointer",
				      "BACK_BUTTON": "+Number",
				      "NO_BUTTON": "+Number",
				      "!type": "fn(game: +Phaser.Game, id: +Number, pointerMode: +Phaser.PointerMode)",
				      "prototype": {
				        "rawMovementY": {
				          "!doc": "Phaser.Pointer.rawMovementY",
				          "!type": "+Number"
				        },
				        "rawMovementX": {
				          "!doc": "Phaser.Pointer.rawMovementX",
				          "!type": "+Number"
				        },
				        "isMouse": {
				          "!doc": "Phaser.Pointer.isMouse",
				          "!type": "+Boolean"
				        },
				        "type": {
				          "!doc": "Phaser.Pointer.type",
				          "!type": "+Number"
				        },
				        "leave": {
				          "!doc": "Phaser.Pointer.leave",
				          "!type": "fn(event: +MouseEvent)"
				        },
				        "id": {
				          "!doc": "Phaser.Pointer.id",
				          "!type": "+Number"
				        },
				        "addClickTrampoline": {
				          "!doc": "Phaser.Pointer.addClickTrampoline",
				          "!type": "fn(name: +String, callback: +Function, callbackContext: +Object, callbackArgs: +Array._object_)"
				        },
				        "identifier": {
				          "!doc": "Phaser.Pointer.identifier",
				          "!type": "+Number"
				        },
				        "timeUp": {
				          "!doc": "Phaser.Pointer.timeUp",
				          "!type": "+Number"
				        },
				        "clientY": {
				          "!doc": "Phaser.Pointer.clientY",
				          "!type": "+Number"
				        },
				        "clientX": {
				          "!doc": "Phaser.Pointer.clientX",
				          "!type": "+Number"
				        },
				        "timeDown": {
				          "!doc": "Phaser.Pointer.timeDown",
				          "!type": "+Number"
				        },
				        "active": {
				          "!doc": "Phaser.Pointer.active",
				          "!type": "+Boolean"
				        },
				        "stop": {
				          "!doc": "Phaser.Pointer.stop",
				          "!type": "fn(event: +MouseEvent)"
				        },
				        "totalTouches": {
				          "!doc": "Phaser.Pointer.totalTouches",
				          "!type": "+Number"
				        },
				        "reset": {
				          "!doc": "Phaser.Pointer.reset",
				          "!type": "fn()"
				        },
				        "position": {
				          "!doc": "Phaser.Pointer.position",
				          "!type": "+Phaser.Point"
				        },
				        "circle": {
				          "!doc": "Phaser.Pointer.circle",
				          "!type": "+Phaser.Circle"
				        },
				        "screenX": {
				          "!doc": "Phaser.Pointer.screenX",
				          "!type": "+Number"
				        },
				        "screenY": {
				          "!doc": "Phaser.Pointer.screenY",
				          "!type": "+Number"
				        },
				        "updateButtons": {
				          "!doc": "Phaser.Pointer.updateButtons",
				          "!type": "fn(event: +MouseEvent)"
				        },
				        "game": {
				          "!doc": "Phaser.Pointer.game",
				          "!type": "+Phaser.Game"
				        },
				        "targetObject": {
				          "!doc": "Phaser.Pointer.targetObject",
				          "!type": "+Object"
				        },
				        "resetButtons": {
				          "!doc": "Phaser.Pointer.resetButtons",
				          "!type": "fn()"
				        },
				        "msSinceLastClick": {
				          "!doc": "Phaser.Pointer.msSinceLastClick",
				          "!type": "+Number"
				        },
				        "update": {
				          "!doc": "Phaser.Pointer.update",
				          "!type": "fn()"
				        },
				        "processInteractiveObjects": {
				          "!doc": "Phaser.Pointer.processInteractiveObjects",
				          "!type": "fn(fromClick: +Boolean) -> +Boolean"
				        },
				        "resetMovement": {
				          "!doc": "Phaser.Pointer.resetMovement",
				          "!type": "fn()"
				        },
				        "isDown": {
				          "!doc": "Phaser.Pointer.isDown",
				          "!type": "+Boolean"
				        },
				        "pointerMode": {
				          "!doc": "Phaser.Pointer.pointerMode",
				          "!type": "+Phaser.PointerMode"
				        },
				        "button": {
				          "!doc": "Phaser.Pointer.button",
				          "!type": "+Object"
				        },
				        "middleButton": {
				          "!doc": "Phaser.Pointer.middleButton",
				          "!type": "+Phaser.DeviceButton"
				        },
				        "duration": {
				          "!doc": "Phaser.Pointer.duration",
				          "!type": "+Number"
				        },
				        "leftButton": {
				          "!doc": "Phaser.Pointer.leftButton",
				          "!type": "+Phaser.DeviceButton"
				        },
				        "isUp": {
				          "!doc": "Phaser.Pointer.isUp",
				          "!type": "+Boolean"
				        },
				        "previousTapTime": {
				          "!doc": "Phaser.Pointer.previousTapTime",
				          "!type": "+Number"
				        },
				        "backButton": {
				          "!doc": "Phaser.Pointer.backButton",
				          "!type": "+Phaser.DeviceButton"
				        },
				        "justReleased": {
				          "!doc": "Phaser.Pointer.justReleased",
				          "!type": "fn(duration: +Number) -> +Boolean"
				        },
				        "justPressed": {
				          "!doc": "Phaser.Pointer.justPressed",
				          "!type": "fn(duration: +Number) -> +Boolean"
				        },
				        "withinGame": {
				          "!doc": "Phaser.Pointer.withinGame",
				          "!type": "+Boolean"
				        },
				        "dirty": {
				          "!doc": "Phaser.Pointer.dirty",
				          "!type": "+Boolean"
				        },
				        "move": {
				          "!doc": "Phaser.Pointer.move",
				          "!type": "fn(event: +MouseEvent, fromClick: +Boolean)"
				        },
				        "movementY": {
				          "!doc": "Phaser.Pointer.movementY",
				          "!type": "+Number"
				        },
				        "movementX": {
				          "!doc": "Phaser.Pointer.movementX",
				          "!type": "+Number"
				        },
				        "start": {
				          "!doc": "Phaser.Pointer.start",
				          "!type": "fn(event: +Object)"
				        },
				        "positionDown": {
				          "!doc": "Phaser.Pointer.positionDown",
				          "!type": "+Phaser.Point"
				        },
				        "target": {
				          "!doc": "Phaser.Pointer.target",
				          "!type": "+Object"
				        },
				        "pointerId": {
				          "!doc": "Phaser.Pointer.pointerId",
				          "!type": "+Number"
				        },
				        "positionUp": {
				          "!doc": "Phaser.Pointer.positionUp",
				          "!type": "+Phaser.Point"
				        },
				        "forwardButton": {
				          "!doc": "Phaser.Pointer.forwardButton",
				          "!type": "+Phaser.DeviceButton"
				        },
				        "x": {
				          "!doc": "Phaser.Pointer.x",
				          "!type": "+Number"
				        },
				        "exists": {
				          "!doc": "Phaser.Pointer.exists",
				          "!type": "+Boolean"
				        },
				        "y": {
				          "!doc": "Phaser.Pointer.y",
				          "!type": "+Number"
				        },
				        "rightButton": {
				          "!doc": "Phaser.Pointer.rightButton",
				          "!type": "+Phaser.DeviceButton"
				        },
				        "eraserButton": {
				          "!doc": "Phaser.Pointer.eraserButton",
				          "!type": "+Phaser.DeviceButton"
				        },
				        "pageY": {
				          "!doc": "Phaser.Pointer.pageY",
				          "!type": "+Number"
				        },
				        "pageX": {
				          "!doc": "Phaser.Pointer.pageX",
				          "!type": "+Number"
				        }
				      }
				    },
				    "GROUP": {
				      "!doc": "Phaser.GROUP",
				      "!type": "+Number"
				    },
				    "Signal": {
				      "!doc": "Phaser.Signal",
				      "!type": "fn()",
				      "prototype": {
				        "add": {
				          "!doc": "Phaser.Signal.add",
				          "!type": "fn(listener: +Function, listenerContext: +Object, priority: +Number, args: +Object) -> +Phaser.SignalBinding"
				        },
				        "dispatch": {
				          "!doc": "Phaser.Signal.dispatch",
				          "!type": "fn(params: +Object)"
				        },
				        "addOnce": {
				          "!doc": "Phaser.Signal.addOnce",
				          "!type": "fn(listener: +Function, listenerContext: +Object, priority: +Number, args: +Object) -> +Phaser.SignalBinding"
				        },
				        "active": {
				          "!doc": "Phaser.Signal.active",
				          "!type": "+Boolean"
				        },
				        "remove": {
				          "!doc": "Phaser.Signal.remove",
				          "!type": "fn(listener: +Function, context: +Object) -> +Function"
				        },
				        "getNumListeners": {
				          "!doc": "Phaser.Signal.getNumListeners",
				          "!type": "fn() -> +Number"
				        },
				        "halt": {
				          "!doc": "Phaser.Signal.halt",
				          "!type": "fn()"
				        },
				        "removeAll": {
				          "!doc": "Phaser.Signal.removeAll",
				          "!type": "fn(context: +Object)"
				        },
				        "forget": {
				          "!doc": "Phaser.Signal.forget",
				          "!type": "fn()"
				        },
				        "dispose": {
				          "!doc": "Phaser.Signal.dispose",
				          "!type": "fn()"
				        },
				        "toString": {
				          "!doc": "Phaser.Signal.toString",
				          "!type": "fn() -> +String"
				        },
				        "has": {
				          "!doc": "Phaser.Signal.has",
				          "!type": "fn(listener: +Function, context: +Object) -> +Boolean"
				        },
				        "memorize": {
				          "!doc": "Phaser.Signal.memorize",
				          "!type": "+Boolean"
				        }
				      }
				    },
				    "Events": {
				      "!doc": "Phaser.Events",
				      "!type": "fn(sprite: +Phaser.Sprite)",
				      "prototype": {
				        "parent": {
				          "!doc": "Phaser.Events.parent",
				          "!type": "+Phaser.Sprite"
				        },
				        "onDestroy": {
				          "!doc": "Phaser.Events.onDestroy",
				          "!type": "+Phaser.Signal"
				        },
				        "onAnimationComplete": {
				          "!doc": "Phaser.Events.onAnimationComplete",
				          "!type": "+Phaser.Signal"
				        },
				        "onAddedToGroup": {
				          "!doc": "Phaser.Events.onAddedToGroup",
				          "!type": "+Phaser.Signal"
				        },
				        "onDragUpdate": {
				          "!doc": "Phaser.Events.onDragUpdate",
				          "!type": "+Phaser.Signal"
				        },
				        "onRemovedFromWorld": {
				          "!doc": "Phaser.Events.onRemovedFromWorld",
				          "!type": "+Phaser.Signal"
				        },
				        "onRevived": {
				          "!doc": "Phaser.Events.onRevived",
				          "!type": "+Phaser.Signal"
				        },
				        "onEnterBounds": {
				          "!doc": "Phaser.Events.onEnterBounds",
				          "!type": "+Phaser.Signal"
				        },
				        "destroy": {
				          "!doc": "Phaser.Events.destroy",
				          "!type": "fn()"
				        },
				        "onInputOut": {
				          "!doc": "Phaser.Events.onInputOut",
				          "!type": "+Phaser.Signal"
				        },
				        "onInputDown": {
				          "!doc": "Phaser.Events.onInputDown",
				          "!type": "+Phaser.Signal"
				        },
				        "onInputUp": {
				          "!doc": "Phaser.Events.onInputUp",
				          "!type": "+Phaser.Signal"
				        },
				        "onOutOfBounds": {
				          "!doc": "Phaser.Events.onOutOfBounds",
				          "!type": "+Phaser.Signal"
				        },
				        "onAnimationLoop": {
				          "!doc": "Phaser.Events.onAnimationLoop",
				          "!type": "+Phaser.Signal"
				        },
				        "onRemovedFromGroup": {
				          "!doc": "Phaser.Events.onRemovedFromGroup",
				          "!type": "+Phaser.Signal"
				        },
				        "onKilled": {
				          "!doc": "Phaser.Events.onKilled",
				          "!type": "+Phaser.Signal"
				        },
				        "onInputOver": {
				          "!doc": "Phaser.Events.onInputOver",
				          "!type": "+Phaser.Signal"
				        },
				        "onDragStop": {
				          "!doc": "Phaser.Events.onDragStop",
				          "!type": "+Phaser.Signal"
				        },
				        "onDragStart": {
				          "!doc": "Phaser.Events.onDragStart",
				          "!type": "+Phaser.Signal"
				        },
				        "onAnimationStart": {
				          "!doc": "Phaser.Events.onAnimationStart",
				          "!type": "+Phaser.Signal"
				        }
				      }
				    },
				    "CANVAS": {
				      "!doc": "Phaser.CANVAS",
				      "!type": "+Number"
				    },
				    "SinglePad": {
				      "!doc": "Phaser.SinglePad",
				      "!type": "fn(game: +Phaser.Game, padParent: +Object)",
				      "prototype": {
				        "disconnect": {
				          "!doc": "Phaser.SinglePad.disconnect",
				          "!type": "fn()"
				        },
				        "game": {
				          "!doc": "Phaser.SinglePad.game",
				          "!type": "+Phaser.Game"
				        },
				        "buttonValue": {
				          "!doc": "Phaser.SinglePad.buttonValue",
				          "!type": "fn(buttonCode: +Number) -> +Number"
				        },
				        "onUpCallback": {
				          "!doc": "Phaser.SinglePad.onUpCallback",
				          "!type": "+Function"
				        },
				        "axis": {
				          "!doc": "Phaser.SinglePad.axis",
				          "!type": "fn(axisCode: +Number) -> +Number"
				        },
				        "deadZone": {
				          "!doc": "Phaser.SinglePad.deadZone",
				          "!type": "+Number"
				        },
				        "isDown": {
				          "!doc": "Phaser.SinglePad.isDown",
				          "!type": "fn(buttonCode: +Number) -> +Boolean"
				        },
				        "getButton": {
				          "!doc": "Phaser.SinglePad.getButton",
				          "!type": "fn(buttonCode: +Number) -> +Phaser.DeviceButton"
				        },
				        "processButtonDown": {
				          "!doc": "Phaser.SinglePad.processButtonDown",
				          "!type": "fn(buttonCode: +Number, value: +Object)"
				        },
				        "isUp": {
				          "!doc": "Phaser.SinglePad.isUp",
				          "!type": "fn(buttonCode: +Number) -> +Boolean"
				        },
				        "justReleased": {
				          "!doc": "Phaser.SinglePad.justReleased",
				          "!type": "fn(buttonCode: +Number, duration: +Number) -> +Boolean"
				        },
				        "connect": {
				          "!doc": "Phaser.SinglePad.connect",
				          "!type": "fn(rawPad: +Object)"
				        },
				        "justPressed": {
				          "!doc": "Phaser.SinglePad.justPressed",
				          "!type": "fn(buttonCode: +Number, duration: +Number) -> +Boolean"
				        },
				        "addCallbacks": {
				          "!doc": "Phaser.SinglePad.addCallbacks",
				          "!type": "fn(context: +Object, callbacks: +Object)"
				        },
				        "processAxisChange": {
				          "!doc": "Phaser.SinglePad.processAxisChange",
				          "!type": "fn(axisState: +Object)"
				        },
				        "destroy": {
				          "!doc": "Phaser.SinglePad.destroy",
				          "!type": "fn()"
				        },
				        "index": {
				          "!doc": "Phaser.SinglePad.index",
				          "!type": "+Number"
				        },
				        "onFloatCallback": {
				          "!doc": "Phaser.SinglePad.onFloatCallback",
				          "!type": "+Function"
				        },
				        "callbackContext": {
				          "!doc": "Phaser.SinglePad.callbackContext",
				          "!type": "+Object"
				        },
				        "connected": {
				          "!doc": "Phaser.SinglePad.connected",
				          "!type": "+Boolean"
				        },
				        "pollStatus": {
				          "!doc": "Phaser.SinglePad.pollStatus",
				          "!type": "fn()"
				        },
				        "onDownCallback": {
				          "!doc": "Phaser.SinglePad.onDownCallback",
				          "!type": "+Function"
				        },
				        "onDisconnectCallback": {
				          "!doc": "Phaser.SinglePad.onDisconnectCallback",
				          "!type": "+Function"
				        },
				        "processButtonUp": {
				          "!doc": "Phaser.SinglePad.processButtonUp",
				          "!type": "fn(buttonCode: +Number, value: +Object)"
				        },
				        "onConnectCallback": {
				          "!doc": "Phaser.SinglePad.onConnectCallback",
				          "!type": "+Function"
				        },
				        "processButtonFloat": {
				          "!doc": "Phaser.SinglePad.processButtonFloat",
				          "!type": "fn(buttonCode: +Number, value: +Object)"
				        },
				        "reset": {
				          "!doc": "Phaser.SinglePad.reset",
				          "!type": "fn()"
				        },
				        "onAxisCallback": {
				          "!doc": "Phaser.SinglePad.onAxisCallback",
				          "!type": "+Function"
				        }
				      }
				    },
				    "HEADLESS": {
				      "!doc": "Phaser.HEADLESS",
				      "!type": "+Number"
				    },
				    "ImageCollection": {
				      "!doc": "Phaser.ImageCollection",
				      "!type": "fn(name: +String, firstgid: +Number, width: +Number, height: +Number, margin: +Number, spacing: +Number, properties: +Object)",
				      "prototype": {
				        "imageWidth": {
				          "!doc": "Phaser.ImageCollection.imageWidth",
				          "!type": "+Number"
				        },
				        "imageSpacing": {
				          "!doc": "Phaser.ImageCollection.imageSpacing",
				          "!type": "+Number"
				        },
				        "images": {
				          "!doc": "Phaser.ImageCollection.images",
				          "!type": "+Array"
				        },
				        "total": {
				          "!doc": "Phaser.ImageCollection.total",
				          "!type": "+Number"
				        },
				        "addImage": {
				          "!doc": "Phaser.ImageCollection.addImage",
				          "!type": "fn(gid: +Number, image: +String)"
				        },
				        "name": {
				          "!doc": "Phaser.ImageCollection.name",
				          "!type": "+String"
				        },
				        "containsImageIndex": {
				          "!doc": "Phaser.ImageCollection.containsImageIndex",
				          "!type": "fn(imageIndex: +Number) -> +Boolean"
				        },
				        "firstgid": {
				          "!doc": "Phaser.ImageCollection.firstgid",
				          "!type": "+Number"
				        },
				        "imageMarge": {
				          "!doc": "Phaser.ImageCollection.imageMarge",
				          "!type": "+Number"
				        },
				        "imageHeight": {
				          "!doc": "Phaser.ImageCollection.imageHeight",
				          "!type": "+Number"
				        },
				        "properties": {
				          "!doc": "Phaser.ImageCollection.properties",
				          "!type": "+Object"
				        }
				      }
				    },
				    "MSPointer": {
				      "!doc": "Phaser.MSPointer",
				      "!type": "fn(game: +Phaser.Game)",
				      "prototype": {
				        "pointerMoveCallback": {
				          "!doc": "Phaser.MSPointer.pointerMoveCallback",
				          "!type": "+Function"
				        },
				        "game": {
				          "!doc": "Phaser.MSPointer.game",
				          "!type": "+Phaser.Game"
				        },
				        "pointerDownCallback": {
				          "!doc": "Phaser.MSPointer.pointerDownCallback",
				          "!type": "+Function"
				        },
				        "start": {
				          "!doc": "Phaser.MSPointer.start",
				          "!type": "fn()"
				        },
				        "capture": {
				          "!doc": "Phaser.MSPointer.capture",
				          "!type": "+Boolean"
				        },
				        "callbackContext": {
				          "!doc": "Phaser.MSPointer.callbackContext",
				          "!type": "+Object"
				        },
				        "onPointerUp": {
				          "!doc": "Phaser.MSPointer.onPointerUp",
				          "!type": "fn(event: +PointerEvent)"
				        },
				        "pointerUpCallback": {
				          "!doc": "Phaser.MSPointer.pointerUpCallback",
				          "!type": "+Function"
				        },
				        "enabled": {
				          "!doc": "Phaser.MSPointer.enabled",
				          "!type": "+Boolean"
				        },
				        "onPointerMove": {
				          "!doc": "Phaser.MSPointer.onPointerMove",
				          "!type": "fn(event: +PointerEvent)"
				        },
				        "button": {
				          "!doc": "Phaser.MSPointer.button",
				          "!type": "+Number"
				        },
				        "input": {
				          "!doc": "Phaser.MSPointer.input",
				          "!type": "+Phaser.Input"
				        },
				        "stop": {
				          "!doc": "Phaser.MSPointer.stop",
				          "!type": "fn()"
				        },
				        "onPointerDown": {
				          "!doc": "Phaser.MSPointer.onPointerDown",
				          "!type": "fn(event: +PointerEvent)"
				        },
				        "onPointerOut": {
				          "!doc": "Phaser.MSPointer.onPointerOut",
				          "!type": "fn(event: +PointerEvent)"
				        },
				        "event": {
				          "!doc": "Phaser.MSPointer.event",
				          "!type": "+MSPointerEvent"
				        },
				        "onPointerUpGlobal": {
				          "!doc": "Phaser.MSPointer.onPointerUpGlobal",
				          "!type": "fn(event: +PointerEvent)"
				        }
				      }
				    },
				    "RIGHT": {
				      "!doc": "Phaser.RIGHT",
				      "!type": "+Number"
				    },
				    "PointerMode": {
				      "CONTACT": "+Object",
				      "!doc": "Phaser.PointerMode",
				      "!type": "fn()",
				      "prototype": {},
				      "CURSOR": "+Object"
				    },
				    "KeyCode": {
				      "UNDERSCORE": {
				        "!doc": "Phaser.KeyCode.UNDERSCORE",
				        "!type": "+Object"
				      },
				      "FOUR": {
				        "!doc": "Phaser.KeyCode.FOUR",
				        "!type": "+Object"
				      },
				      "MINUS": {
				        "!doc": "Phaser.KeyCode.MINUS",
				        "!type": "+Object"
				      },
				      "NUMPAD_ADD": {
				        "!doc": "Phaser.KeyCode.NUMPAD_ADD",
				        "!type": "+Object"
				      },
				      "LEFT": {
				        "!doc": "Phaser.KeyCode.LEFT",
				        "!type": "+Object"
				      },
				      "NUMPAD_DECIMAL": {
				        "!doc": "Phaser.KeyCode.NUMPAD_DECIMAL",
				        "!type": "+Object"
				      },
				      "TWO": {
				        "!doc": "Phaser.KeyCode.TWO",
				        "!type": "+Object"
				      },
				      "NUMPAD_2": {
				        "!doc": "Phaser.KeyCode.NUMPAD_2",
				        "!type": "+Object"
				      },
				      "NUMPAD_3": {
				        "!doc": "Phaser.KeyCode.NUMPAD_3",
				        "!type": "+Object"
				      },
				      "NUMPAD_4": {
				        "!doc": "Phaser.KeyCode.NUMPAD_4",
				        "!type": "+Object"
				      },
				      "NUMPAD_5": {
				        "!doc": "Phaser.KeyCode.NUMPAD_5",
				        "!type": "+Object"
				      },
				      "NUMPAD_6": {
				        "!doc": "Phaser.KeyCode.NUMPAD_6",
				        "!type": "+Object"
				      },
				      "NUMPAD_7": {
				        "!doc": "Phaser.KeyCode.NUMPAD_7",
				        "!type": "+Object"
				      },
				      "NUMPAD_8": {
				        "!doc": "Phaser.KeyCode.NUMPAD_8",
				        "!type": "+Object"
				      },
				      "NUMPAD_9": {
				        "!doc": "Phaser.KeyCode.NUMPAD_9",
				        "!type": "+Object"
				      },
				      "A": {
				        "!doc": "Phaser.KeyCode.A",
				        "!type": "+Object"
				      },
				      "B": {
				        "!doc": "Phaser.KeyCode.B",
				        "!type": "+Object"
				      },
				      "C": {
				        "!doc": "Phaser.KeyCode.C",
				        "!type": "+Object"
				      },
				      "D": {
				        "!doc": "Phaser.KeyCode.D",
				        "!type": "+Object"
				      },
				      "E": {
				        "!doc": "Phaser.KeyCode.E",
				        "!type": "+Object"
				      },
				      "F": {
				        "!doc": "Phaser.KeyCode.F",
				        "!type": "+Object"
				      },
				      "NUMPAD_0": {
				        "!doc": "Phaser.KeyCode.NUMPAD_0",
				        "!type": "+Object"
				      },
				      "G": {
				        "!doc": "Phaser.KeyCode.G",
				        "!type": "+Object"
				      },
				      "ONE": {
				        "!doc": "Phaser.KeyCode.ONE",
				        "!type": "+Object"
				      },
				      "NUMPAD_1": {
				        "!doc": "Phaser.KeyCode.NUMPAD_1",
				        "!type": "+Object"
				      },
				      "H": {
				        "!doc": "Phaser.KeyCode.H",
				        "!type": "+Object"
				      },
				      "I": {
				        "!doc": "Phaser.KeyCode.I",
				        "!type": "+Object"
				      },
				      "ENTER": {
				        "!doc": "Phaser.KeyCode.ENTER",
				        "!type": "+Object"
				      },
				      "J": {
				        "!doc": "Phaser.KeyCode.J",
				        "!type": "+Object"
				      },
				      "K": {
				        "!doc": "Phaser.KeyCode.K",
				        "!type": "+Object"
				      },
				      "L": {
				        "!doc": "Phaser.KeyCode.L",
				        "!type": "+Object"
				      },
				      "M": {
				        "!doc": "Phaser.KeyCode.M",
				        "!type": "+Object"
				      },
				      "N": {
				        "!doc": "Phaser.KeyCode.N",
				        "!type": "+Object"
				      },
				      "O": {
				        "!doc": "Phaser.KeyCode.O",
				        "!type": "+Object"
				      },
				      "P": {
				        "!doc": "Phaser.KeyCode.P",
				        "!type": "+Object"
				      },
				      "Q": {
				        "!doc": "Phaser.KeyCode.Q",
				        "!type": "+Object"
				      },
				      "R": {
				        "!doc": "Phaser.KeyCode.R",
				        "!type": "+Object"
				      },
				      "DELETE": {
				        "!doc": "Phaser.KeyCode.DELETE",
				        "!type": "+Object"
				      },
				      "S": {
				        "!doc": "Phaser.KeyCode.S",
				        "!type": "+Object"
				      },
				      "T": {
				        "!doc": "Phaser.KeyCode.T",
				        "!type": "+Object"
				      },
				      "ESC": {
				        "!doc": "Phaser.KeyCode.ESC",
				        "!type": "+Object"
				      },
				      "U": {
				        "!doc": "Phaser.KeyCode.U",
				        "!type": "+Object"
				      },
				      "V": {
				        "!doc": "Phaser.KeyCode.V",
				        "!type": "+Object"
				      },
				      "W": {
				        "!doc": "Phaser.KeyCode.W",
				        "!type": "+Object"
				      },
				      "X": {
				        "!doc": "Phaser.KeyCode.X",
				        "!type": "+Object"
				      },
				      "Y": {
				        "!doc": "Phaser.KeyCode.Y",
				        "!type": "+Object"
				      },
				      "RIGHT": {
				        "!doc": "Phaser.KeyCode.RIGHT",
				        "!type": "+Object"
				      },
				      "Z": {
				        "!doc": "Phaser.KeyCode.Z",
				        "!type": "+Object"
				      },
				      "SEVEN": {
				        "!doc": "Phaser.KeyCode.SEVEN",
				        "!type": "+Object"
				      },
				      "COMMA": {
				        "!doc": "Phaser.KeyCode.COMMA",
				        "!type": "+Object"
				      },
				      "HELP": {
				        "!doc": "Phaser.KeyCode.HELP",
				        "!type": "+Object"
				      },
				      "BACKWARD_SLASH": {
				        "!doc": "Phaser.KeyCode.BACKWARD_SLASH",
				        "!type": "+Object"
				      },
				      "!doc": "Phaser.KeyCode",
				      "prototype": {
				        "UNDERSCORE": {
				          "!doc": "Phaser.KeyCode.UNDERSCORE",
				          "!type": "+Object"
				        },
				        "FOUR": {
				          "!doc": "Phaser.KeyCode.FOUR",
				          "!type": "+Object"
				        },
				        "MINUS": {
				          "!doc": "Phaser.KeyCode.MINUS",
				          "!type": "+Object"
				        },
				        "NUMPAD_ADD": {
				          "!doc": "Phaser.KeyCode.NUMPAD_ADD",
				          "!type": "+Object"
				        },
				        "LEFT": {
				          "!doc": "Phaser.KeyCode.LEFT",
				          "!type": "+Object"
				        },
				        "NUMPAD_DECIMAL": {
				          "!doc": "Phaser.KeyCode.NUMPAD_DECIMAL",
				          "!type": "+Object"
				        },
				        "TWO": {
				          "!doc": "Phaser.KeyCode.TWO",
				          "!type": "+Object"
				        },
				        "NUMPAD_2": {
				          "!doc": "Phaser.KeyCode.NUMPAD_2",
				          "!type": "+Object"
				        },
				        "NUMPAD_3": {
				          "!doc": "Phaser.KeyCode.NUMPAD_3",
				          "!type": "+Object"
				        },
				        "NUMPAD_4": {
				          "!doc": "Phaser.KeyCode.NUMPAD_4",
				          "!type": "+Object"
				        },
				        "NUMPAD_5": {
				          "!doc": "Phaser.KeyCode.NUMPAD_5",
				          "!type": "+Object"
				        },
				        "NUMPAD_6": {
				          "!doc": "Phaser.KeyCode.NUMPAD_6",
				          "!type": "+Object"
				        },
				        "NUMPAD_7": {
				          "!doc": "Phaser.KeyCode.NUMPAD_7",
				          "!type": "+Object"
				        },
				        "NUMPAD_8": {
				          "!doc": "Phaser.KeyCode.NUMPAD_8",
				          "!type": "+Object"
				        },
				        "NUMPAD_9": {
				          "!doc": "Phaser.KeyCode.NUMPAD_9",
				          "!type": "+Object"
				        },
				        "A": {
				          "!doc": "Phaser.KeyCode.A",
				          "!type": "+Object"
				        },
				        "B": {
				          "!doc": "Phaser.KeyCode.B",
				          "!type": "+Object"
				        },
				        "C": {
				          "!doc": "Phaser.KeyCode.C",
				          "!type": "+Object"
				        },
				        "D": {
				          "!doc": "Phaser.KeyCode.D",
				          "!type": "+Object"
				        },
				        "E": {
				          "!doc": "Phaser.KeyCode.E",
				          "!type": "+Object"
				        },
				        "F": {
				          "!doc": "Phaser.KeyCode.F",
				          "!type": "+Object"
				        },
				        "NUMPAD_0": {
				          "!doc": "Phaser.KeyCode.NUMPAD_0",
				          "!type": "+Object"
				        },
				        "G": {
				          "!doc": "Phaser.KeyCode.G",
				          "!type": "+Object"
				        },
				        "ONE": {
				          "!doc": "Phaser.KeyCode.ONE",
				          "!type": "+Object"
				        },
				        "NUMPAD_1": {
				          "!doc": "Phaser.KeyCode.NUMPAD_1",
				          "!type": "+Object"
				        },
				        "H": {
				          "!doc": "Phaser.KeyCode.H",
				          "!type": "+Object"
				        },
				        "I": {
				          "!doc": "Phaser.KeyCode.I",
				          "!type": "+Object"
				        },
				        "ENTER": {
				          "!doc": "Phaser.KeyCode.ENTER",
				          "!type": "+Object"
				        },
				        "J": {
				          "!doc": "Phaser.KeyCode.J",
				          "!type": "+Object"
				        },
				        "K": {
				          "!doc": "Phaser.KeyCode.K",
				          "!type": "+Object"
				        },
				        "L": {
				          "!doc": "Phaser.KeyCode.L",
				          "!type": "+Object"
				        },
				        "M": {
				          "!doc": "Phaser.KeyCode.M",
				          "!type": "+Object"
				        },
				        "N": {
				          "!doc": "Phaser.KeyCode.N",
				          "!type": "+Object"
				        },
				        "O": {
				          "!doc": "Phaser.KeyCode.O",
				          "!type": "+Object"
				        },
				        "P": {
				          "!doc": "Phaser.KeyCode.P",
				          "!type": "+Object"
				        },
				        "Q": {
				          "!doc": "Phaser.KeyCode.Q",
				          "!type": "+Object"
				        },
				        "R": {
				          "!doc": "Phaser.KeyCode.R",
				          "!type": "+Object"
				        },
				        "DELETE": {
				          "!doc": "Phaser.KeyCode.DELETE",
				          "!type": "+Object"
				        },
				        "S": {
				          "!doc": "Phaser.KeyCode.S",
				          "!type": "+Object"
				        },
				        "T": {
				          "!doc": "Phaser.KeyCode.T",
				          "!type": "+Object"
				        },
				        "ESC": {
				          "!doc": "Phaser.KeyCode.ESC",
				          "!type": "+Object"
				        },
				        "U": {
				          "!doc": "Phaser.KeyCode.U",
				          "!type": "+Object"
				        },
				        "V": {
				          "!doc": "Phaser.KeyCode.V",
				          "!type": "+Object"
				        },
				        "W": {
				          "!doc": "Phaser.KeyCode.W",
				          "!type": "+Object"
				        },
				        "X": {
				          "!doc": "Phaser.KeyCode.X",
				          "!type": "+Object"
				        },
				        "Y": {
				          "!doc": "Phaser.KeyCode.Y",
				          "!type": "+Object"
				        },
				        "RIGHT": {
				          "!doc": "Phaser.KeyCode.RIGHT",
				          "!type": "+Object"
				        },
				        "Z": {
				          "!doc": "Phaser.KeyCode.Z",
				          "!type": "+Object"
				        },
				        "SEVEN": {
				          "!doc": "Phaser.KeyCode.SEVEN",
				          "!type": "+Object"
				        },
				        "COMMA": {
				          "!doc": "Phaser.KeyCode.COMMA",
				          "!type": "+Object"
				        },
				        "HELP": {
				          "!doc": "Phaser.KeyCode.HELP",
				          "!type": "+Object"
				        },
				        "BACKWARD_SLASH": {
				          "!doc": "Phaser.KeyCode.BACKWARD_SLASH",
				          "!type": "+Object"
				        },
				        "TAB": {
				          "!doc": "Phaser.KeyCode.TAB",
				          "!type": "+Object"
				        },
				        "QUOTES": {
				          "!doc": "Phaser.KeyCode.QUOTES",
				          "!type": "+Object"
				        },
				        "ZERO": {
				          "!doc": "Phaser.KeyCode.ZERO",
				          "!type": "+Object"
				        },
				        "EIGHT": {
				          "!doc": "Phaser.KeyCode.EIGHT",
				          "!type": "+Object"
				        },
				        "DOWN": {
				          "!doc": "Phaser.KeyCode.DOWN",
				          "!type": "+Object"
				        },
				        "ALT": {
				          "!doc": "Phaser.KeyCode.ALT",
				          "!type": "+Object"
				        },
				        "FIVE": {
				          "!doc": "Phaser.KeyCode.FIVE",
				          "!type": "+Object"
				        },
				        "QUESTION_MARK": {
				          "!doc": "Phaser.KeyCode.QUESTION_MARK",
				          "!type": "+Object"
				        },
				        "NINE": {
				          "!doc": "Phaser.KeyCode.NINE",
				          "!type": "+Object"
				        },
				        "BACKSPACE": {
				          "!doc": "Phaser.KeyCode.BACKSPACE",
				          "!type": "+Object"
				        },
				        "UP": {
				          "!doc": "Phaser.KeyCode.UP",
				          "!type": "+Object"
				        },
				        "F1": {
				          "!doc": "Phaser.KeyCode.F1",
				          "!type": "+Object"
				        },
				        "F2": {
				          "!doc": "Phaser.KeyCode.F2",
				          "!type": "+Object"
				        },
				        "NUMPAD_ENTER": {
				          "!doc": "Phaser.KeyCode.NUMPAD_ENTER",
				          "!type": "+Object"
				        },
				        "F3": {
				          "!doc": "Phaser.KeyCode.F3",
				          "!type": "+Object"
				        },
				        "PAGE_UP": {
				          "!doc": "Phaser.KeyCode.PAGE_UP",
				          "!type": "+Object"
				        },
				        "F4": {
				          "!doc": "Phaser.KeyCode.F4",
				          "!type": "+Object"
				        },
				        "F5": {
				          "!doc": "Phaser.KeyCode.F5",
				          "!type": "+Object"
				        },
				        "F6": {
				          "!doc": "Phaser.KeyCode.F6",
				          "!type": "+Object"
				        },
				        "F7": {
				          "!doc": "Phaser.KeyCode.F7",
				          "!type": "+Object"
				        },
				        "F8": {
				          "!doc": "Phaser.KeyCode.F8",
				          "!type": "+Object"
				        },
				        "F9": {
				          "!doc": "Phaser.KeyCode.F9",
				          "!type": "+Object"
				        },
				        "NUM_LOCK": {
				          "!doc": "Phaser.KeyCode.NUM_LOCK",
				          "!type": "+Object"
				        },
				        "PERIOD": {
				          "!doc": "Phaser.KeyCode.PERIOD",
				          "!type": "+Object"
				        },
				        "END": {
				          "!doc": "Phaser.KeyCode.END",
				          "!type": "+Object"
				        },
				        "INSERT": {
				          "!doc": "Phaser.KeyCode.INSERT",
				          "!type": "+Object"
				        },
				        "THREE": {
				          "!doc": "Phaser.KeyCode.THREE",
				          "!type": "+Object"
				        },
				        "CONTROL": {
				          "!doc": "Phaser.KeyCode.CONTROL",
				          "!type": "+Object"
				        },
				        "PLUS": {
				          "!doc": "Phaser.KeyCode.PLUS",
				          "!type": "+Object"
				        },
				        "CAPS_LOCK": {
				          "!doc": "Phaser.KeyCode.CAPS_LOCK",
				          "!type": "+Object"
				        },
				        "SIX": {
				          "!doc": "Phaser.KeyCode.SIX",
				          "!type": "+Object"
				        },
				        "NUMPAD_DIVIDE": {
				          "!doc": "Phaser.KeyCode.NUMPAD_DIVIDE",
				          "!type": "+Object"
				        },
				        "PAGE_DOWN": {
				          "!doc": "Phaser.KeyCode.PAGE_DOWN",
				          "!type": "+Object"
				        },
				        "SHIFT": {
				          "!doc": "Phaser.KeyCode.SHIFT",
				          "!type": "+Object"
				        },
				        "NUMPAD_MULTIPLY": {
				          "!doc": "Phaser.KeyCode.NUMPAD_MULTIPLY",
				          "!type": "+Object"
				        },
				        "CLOSED_BRACKET": {
				          "!doc": "Phaser.KeyCode.CLOSED_BRACKET",
				          "!type": "+Object"
				        },
				        "SPACEBAR": {
				          "!doc": "Phaser.KeyCode.SPACEBAR",
				          "!type": "+Object"
				        },
				        "F10": {
				          "!doc": "Phaser.KeyCode.F10",
				          "!type": "+Object"
				        },
				        "EQUALS": {
				          "!doc": "Phaser.KeyCode.EQUALS",
				          "!type": "+Object"
				        },
				        "F12": {
				          "!doc": "Phaser.KeyCode.F12",
				          "!type": "+Object"
				        },
				        "F11": {
				          "!doc": "Phaser.KeyCode.F11",
				          "!type": "+Object"
				        },
				        "F14": {
				          "!doc": "Phaser.KeyCode.F14",
				          "!type": "+Object"
				        },
				        "OPEN_BRACKET": {
				          "!doc": "Phaser.KeyCode.OPEN_BRACKET",
				          "!type": "+Object"
				        },
				        "F13": {
				          "!doc": "Phaser.KeyCode.F13",
				          "!type": "+Object"
				        },
				        "COLON": {
				          "!doc": "Phaser.KeyCode.COLON",
				          "!type": "+Object"
				        },
				        "F15": {
				          "!doc": "Phaser.KeyCode.F15",
				          "!type": "+Object"
				        },
				        "NUMPAD_SUBTRACT": {
				          "!doc": "Phaser.KeyCode.NUMPAD_SUBTRACT",
				          "!type": "+Object"
				        },
				        "TILDE": {
				          "!doc": "Phaser.KeyCode.TILDE",
				          "!type": "+Object"
				        },
				        "CLEAR": {
				          "!doc": "Phaser.KeyCode.CLEAR",
				          "!type": "+Object"
				        },
				        "HOME": {
				          "!doc": "Phaser.KeyCode.HOME",
				          "!type": "+Object"
				        }
				      },
				      "TAB": {
				        "!doc": "Phaser.KeyCode.TAB",
				        "!type": "+Object"
				      },
				      "QUOTES": {
				        "!doc": "Phaser.KeyCode.QUOTES",
				        "!type": "+Object"
				      },
				      "ZERO": {
				        "!doc": "Phaser.KeyCode.ZERO",
				        "!type": "+Object"
				      },
				      "EIGHT": {
				        "!doc": "Phaser.KeyCode.EIGHT",
				        "!type": "+Object"
				      },
				      "DOWN": {
				        "!doc": "Phaser.KeyCode.DOWN",
				        "!type": "+Object"
				      },
				      "ALT": {
				        "!doc": "Phaser.KeyCode.ALT",
				        "!type": "+Object"
				      },
				      "FIVE": {
				        "!doc": "Phaser.KeyCode.FIVE",
				        "!type": "+Object"
				      },
				      "QUESTION_MARK": {
				        "!doc": "Phaser.KeyCode.QUESTION_MARK",
				        "!type": "+Object"
				      },
				      "NINE": {
				        "!doc": "Phaser.KeyCode.NINE",
				        "!type": "+Object"
				      },
				      "BACKSPACE": {
				        "!doc": "Phaser.KeyCode.BACKSPACE",
				        "!type": "+Object"
				      },
				      "UP": {
				        "!doc": "Phaser.KeyCode.UP",
				        "!type": "+Object"
				      },
				      "F1": {
				        "!doc": "Phaser.KeyCode.F1",
				        "!type": "+Object"
				      },
				      "F2": {
				        "!doc": "Phaser.KeyCode.F2",
				        "!type": "+Object"
				      },
				      "NUMPAD_ENTER": {
				        "!doc": "Phaser.KeyCode.NUMPAD_ENTER",
				        "!type": "+Object"
				      },
				      "F3": {
				        "!doc": "Phaser.KeyCode.F3",
				        "!type": "+Object"
				      },
				      "PAGE_UP": {
				        "!doc": "Phaser.KeyCode.PAGE_UP",
				        "!type": "+Object"
				      },
				      "F4": {
				        "!doc": "Phaser.KeyCode.F4",
				        "!type": "+Object"
				      },
				      "F5": {
				        "!doc": "Phaser.KeyCode.F5",
				        "!type": "+Object"
				      },
				      "F6": {
				        "!doc": "Phaser.KeyCode.F6",
				        "!type": "+Object"
				      },
				      "F7": {
				        "!doc": "Phaser.KeyCode.F7",
				        "!type": "+Object"
				      },
				      "F8": {
				        "!doc": "Phaser.KeyCode.F8",
				        "!type": "+Object"
				      },
				      "F9": {
				        "!doc": "Phaser.KeyCode.F9",
				        "!type": "+Object"
				      },
				      "NUM_LOCK": {
				        "!doc": "Phaser.KeyCode.NUM_LOCK",
				        "!type": "+Object"
				      },
				      "PERIOD": {
				        "!doc": "Phaser.KeyCode.PERIOD",
				        "!type": "+Object"
				      },
				      "END": {
				        "!doc": "Phaser.KeyCode.END",
				        "!type": "+Object"
				      },
				      "INSERT": {
				        "!doc": "Phaser.KeyCode.INSERT",
				        "!type": "+Object"
				      },
				      "THREE": {
				        "!doc": "Phaser.KeyCode.THREE",
				        "!type": "+Object"
				      },
				      "CONTROL": {
				        "!doc": "Phaser.KeyCode.CONTROL",
				        "!type": "+Object"
				      },
				      "PLUS": {
				        "!doc": "Phaser.KeyCode.PLUS",
				        "!type": "+Object"
				      },
				      "CAPS_LOCK": {
				        "!doc": "Phaser.KeyCode.CAPS_LOCK",
				        "!type": "+Object"
				      },
				      "SIX": {
				        "!doc": "Phaser.KeyCode.SIX",
				        "!type": "+Object"
				      },
				      "NUMPAD_DIVIDE": {
				        "!doc": "Phaser.KeyCode.NUMPAD_DIVIDE",
				        "!type": "+Object"
				      },
				      "PAGE_DOWN": {
				        "!doc": "Phaser.KeyCode.PAGE_DOWN",
				        "!type": "+Object"
				      },
				      "SHIFT": {
				        "!doc": "Phaser.KeyCode.SHIFT",
				        "!type": "+Object"
				      },
				      "NUMPAD_MULTIPLY": {
				        "!doc": "Phaser.KeyCode.NUMPAD_MULTIPLY",
				        "!type": "+Object"
				      },
				      "CLOSED_BRACKET": {
				        "!doc": "Phaser.KeyCode.CLOSED_BRACKET",
				        "!type": "+Object"
				      },
				      "!type": "fn()",
				      "SPACEBAR": {
				        "!doc": "Phaser.KeyCode.SPACEBAR",
				        "!type": "+Object"
				      },
				      "F10": {
				        "!doc": "Phaser.KeyCode.F10",
				        "!type": "+Object"
				      },
				      "EQUALS": {
				        "!doc": "Phaser.KeyCode.EQUALS",
				        "!type": "+Object"
				      },
				      "F12": {
				        "!doc": "Phaser.KeyCode.F12",
				        "!type": "+Object"
				      },
				      "F11": {
				        "!doc": "Phaser.KeyCode.F11",
				        "!type": "+Object"
				      },
				      "F14": {
				        "!doc": "Phaser.KeyCode.F14",
				        "!type": "+Object"
				      },
				      "OPEN_BRACKET": {
				        "!doc": "Phaser.KeyCode.OPEN_BRACKET",
				        "!type": "+Object"
				      },
				      "F13": {
				        "!doc": "Phaser.KeyCode.F13",
				        "!type": "+Object"
				      },
				      "COLON": {
				        "!doc": "Phaser.KeyCode.COLON",
				        "!type": "+Object"
				      },
				      "F15": {
				        "!doc": "Phaser.KeyCode.F15",
				        "!type": "+Object"
				      },
				      "NUMPAD_SUBTRACT": {
				        "!doc": "Phaser.KeyCode.NUMPAD_SUBTRACT",
				        "!type": "+Object"
				      },
				      "TILDE": {
				        "!doc": "Phaser.KeyCode.TILDE",
				        "!type": "+Object"
				      },
				      "CLEAR": {
				        "!doc": "Phaser.KeyCode.CLEAR",
				        "!type": "+Object"
				      },
				      "HOME": {
				        "!doc": "Phaser.KeyCode.HOME",
				        "!type": "+Object"
				      }
				    },
				    "BITMAPDATA": {
				      "!doc": "Phaser.BITMAPDATA",
				      "!type": "+Number"
				    },
				    "Text": {
				      "init": {
				        "!doc": "Phaser.Text.init",
				        "!type": "fn()"
				      },
				      "install": {
				        "!doc": "Phaser.Text.install",
				        "!type": "fn()"
				      },
				      "!doc": "Phaser.Text",
				      "!type": "fn(game: +Phaser.Game, x: +Number, y: +Number, text: +String, style: +Object, style_font: +String, style_fontStyle: +String, style_fontVariant: +String, style_fontWeight: +String, style_fontSize: +String, style_backgroundColor: +String, style_fill: +String, style_align: +String, style_boundsAlignH: +String, style_boundsAlignV: +String, style_stroke: +String, style_strokeThickness: +Number, style_wordWrap: +Boolean, style_wordWrapWidth: +Number, style_tabs: +Number)",
				      "prototype": {
				        "play": {
				          "!doc": "Phaser.Text.play",
				          "!type": "fn(name: +String, frameRate: +Number, loop: +Boolean, killOnComplete: +Boolean) -> +Phaser.Animation"
				        },
				        "parent": {
				          "!doc": "Phaser.Text.parent",
				          "!type": "+PIXI.DisplayObjectContainer"
				        },
				        "lifespan": {
				          "!doc": "Phaser.Text.lifespan",
				          "!type": "+Number"
				        },
				        "outOfBoundsKill": {
				          "!doc": "Phaser.Text.outOfBoundsKill",
				          "!type": "+Boolean"
				        },
				        "type": {
				          "!doc": "Phaser.Text.type",
				          "!type": "+Number"
				        },
				        "updateShadow": {
				          "!doc": "Phaser.Text.updateShadow",
				          "!type": "fn(state: +Boolean)"
				        },
				        "resolution": {
				          "!doc": "Phaser.Text.resolution",
				          "!type": "+Number"
				        },
				        "getBounds": {
				          "!doc": "Phaser.Text.getBounds",
				          "!type": "fn(matrix: +Phaser.Matrix) -> +Phaser.Rectangle"
				        },
				        "resizeFrame": {
				          "!doc": "Phaser.Text.resizeFrame",
				          "!type": "fn(parent: +Object, width: +Number, height: +Number)"
				        },
				        "children": {
				          "!doc": "Phaser.Text.children",
				          "!type": "+Array_DisplayObject_"
				        },
				        "context": {
				          "!doc": "Phaser.Text.context",
				          "!type": "+HTMLCanvasElement"
				        },
				        "pivot": {
				          "!doc": "Phaser.Text.pivot",
				          "!type": "+Phaser.Point"
				        },
				        "maxHealth": {
				          "!doc": "Phaser.Text.maxHealth",
				          "!type": "+Number"
				        },
				        "revive": {
				          "!doc": "Phaser.Text.revive",
				          "!type": "fn(health: +Number) -> +PIXI.DisplayObject"
				        },
				        "text": {
				          "!doc": "Phaser.Text.text",
				          "!type": "+String"
				        },
				        "clearFontValues": {
				          "!doc": "Phaser.Text.clearFontValues",
				          "!type": "fn() -> +Phaser.Text"
				        },
				        "shadowColor": {
				          "!doc": "Phaser.Text.shadowColor",
				          "!type": "+String"
				        },
				        "bringToTop": {
				          "!doc": "Phaser.Text.bringToTop",
				          "!type": "fn() -> +PIXI.DisplayObject"
				        },
				        "events": {
				          "!doc": "Phaser.Text.events",
				          "!type": "+Phaser.Events"
				        },
				        "moveUp": {
				          "!doc": "Phaser.Text.moveUp",
				          "!type": "fn() -> +PIXI.DisplayObject"
				        },
				        "physicsType": {
				          "!doc": "Phaser.Text.physicsType",
				          "!type": "+Number"
				        },
				        "height": {
				          "!doc": "Phaser.Text.height",
				          "!type": "+Number"
				        },
				        "canvas": {
				          "!doc": "Phaser.Text.canvas",
				          "!type": "+HTMLCanvasElement"
				        },
				        "postUpdate": {
				          "!doc": "Phaser.Text.postUpdate",
				          "!type": "fn()"
				        },
				        "smoothed": {
				          "!doc": "Phaser.Text.smoothed",
				          "!type": "+Boolean"
				        },
				        "destroy": {
				          "!doc": "Phaser.Text.destroy",
				          "!type": "fn(destroyChildren: +Boolean)"
				        },
				        "fontStyle": {
				          "!doc": "Phaser.Text.fontStyle",
				          "!type": "+String"
				        },
				        "input": {
				          "!doc": "Phaser.Text.input",
				          "!type": "+Phaser.InputHandler"
				        },
				        "worldPosition": {
				          "!doc": "Phaser.Text.worldPosition",
				          "!type": "+Phaser.Point"
				        },
				        "addStrokeColor": {
				          "!doc": "Phaser.Text.addStrokeColor",
				          "!type": "fn(color: +String, position: +Number) -> +Phaser.Text"
				        },
				        "left": {
				          "!doc": "Phaser.Text.left",
				          "!type": "+Number"
				        },
				        "reset": {
				          "!doc": "Phaser.Text.reset",
				          "!type": "fn(x: +Number, y: +Number, health: +Number) -> +PIXI.DisplayObject"
				        },
				        "setTextBounds": {
				          "!doc": "Phaser.Text.setTextBounds",
				          "!type": "fn(x: +Number, y: +Number, width: +Number, height: +Number) -> +Phaser.Text"
				        },
				        "fontSize": {
				          "!doc": "Phaser.Text.fontSize",
				          "!type": "+Number"
				        },
				        "preUpdate": {
				          "!doc": "Phaser.Text.preUpdate",
				          "!type": "fn()"
				        },
				        "filterArea": {
				          "!doc": "Phaser.Text.filterArea",
				          "!type": "+Phaser.Rectangle"
				        },
				        "damage": {
				          "!doc": "Phaser.Text.damage",
				          "!type": "fn(amount: +Number) -> +Phaser.Sprite"
				        },
				        "shadowOffsetX": {
				          "!doc": "Phaser.Text.shadowOffsetX",
				          "!type": "+Number"
				        },
				        "shadowOffsetY": {
				          "!doc": "Phaser.Text.shadowOffsetY",
				          "!type": "+Number"
				        },
				        "components": {
				          "!doc": "Phaser.Text.components",
				          "!type": "+Object"
				        },
				        "addFontWeight": {
				          "!doc": "Phaser.Text.addFontWeight",
				          "!type": "fn(style: +String, position: +Number) -> +Phaser.Text"
				        },
				        "worldScale": {
				          "!doc": "Phaser.Text.worldScale",
				          "!type": "+Phaser.Point"
				        },
				        "alive": {
				          "!doc": "Phaser.Text.alive",
				          "!type": "+Boolean"
				        },
				        "parseList": {
				          "!doc": "Phaser.Text.parseList",
				          "!type": "fn(list: +Array) -> +Phaser.Text"
				        },
				        "tabs": {
				          "!doc": "Phaser.Text.tabs",
				          "!type": "+Number"
				        },
				        "transformCallback": {
				          "!doc": "Phaser.Text.transformCallback",
				          "!type": "+Function"
				        },
				        "inWorld": {
				          "!doc": "Phaser.Text.inWorld",
				          "!type": "+Boolean"
				        },
				        "colors": {
				          "!doc": "Phaser.Text.colors",
				          "!type": "+Array"
				        },
				        "cssFont": {
				          "!doc": "Phaser.Text.cssFont",
				          "!type": "+String"
				        },
				        "worldAlpha": {
				          "!doc": "Phaser.Text.worldAlpha",
				          "!type": "+Number"
				        },
				        "fontStyles": {
				          "!doc": "Phaser.Text.fontStyles",
				          "!type": "+Array"
				        },
				        "setShadow": {
				          "!doc": "Phaser.Text.setShadow",
				          "!type": "fn(x: +Number, y: +Number, color: +String, blur: +Number, shadowStroke: +Boolean, shadowFill: +Boolean) -> +Phaser.Text"
				        },
				        "autoRound": {
				          "!doc": "Phaser.Text.autoRound",
				          "!type": "+Boolean"
				        },
				        "world": {
				          "!doc": "Phaser.Text.world",
				          "!type": "+Phaser.Point"
				        },
				        "top": {
				          "!doc": "Phaser.Text.top",
				          "!type": "+Number"
				        },
				        "addFontStyle": {
				          "!doc": "Phaser.Text.addFontStyle",
				          "!type": "fn(style: +String, position: +Number) -> +Phaser.Text"
				        },
				        "angle": {
				          "!doc": "Phaser.Text.angle",
				          "!type": "+Number"
				        },
				        "fontWeights": {
				          "!doc": "Phaser.Text.fontWeights",
				          "!type": "+Array"
				        },
				        "setScaleMinMax": {
				          "!doc": "Phaser.Text.setScaleMinMax",
				          "!type": "fn(minX: +Number, minY: +Number, maxX: +Number, maxY: +Number)"
				        },
				        "textBounds": {
				          "!doc": "Phaser.Text.textBounds",
				          "!type": "+Phaser.Rectangle"
				        },
				        "checkWorldBounds": {
				          "!doc": "Phaser.Text.checkWorldBounds",
				          "!type": "+Boolean"
				        },
				        "key": {
				          "!doc": "Phaser.Text.key",
				          "!type": "+String"
				        },
				        "shadowStroke": {
				          "!doc": "Phaser.Text.shadowStroke",
				          "!type": "+Boolean"
				        },
				        "texture": {
				          "!doc": "Phaser.Text.texture",
				          "!type": "+PIXI.Texture"
				        },
				        "health": {
				          "!doc": "Phaser.Text.health",
				          "!type": "+Number"
				        },
				        "destroyPhase": {
				          "!doc": "Phaser.Text.destroyPhase",
				          "!type": "+Boolean"
				        },
				        "boundsAlignH": {
				          "!doc": "Phaser.Text.boundsAlignH",
				          "!type": "+String"
				        },
				        "right": {
				          "!doc": "Phaser.Text.right",
				          "!type": "+Number"
				        },
				        "kill": {
				          "!doc": "Phaser.Text.kill",
				          "!type": "fn() -> +PIXI.DisplayObject"
				        },
				        "previousPosition": {
				          "!doc": "Phaser.Text.previousPosition",
				          "!type": "+Phaser.Point"
				        },
				        "scaleMax": {
				          "!doc": "Phaser.Text.scaleMax",
				          "!type": "+Phaser.Point"
				        },
				        "stage": {
				          "!doc": "Phaser.Text.stage",
				          "!type": "+Phaser.Stage"
				        },
				        "anchor": {
				          "!doc": "Phaser.Text.anchor",
				          "!type": "+Phaser.Point"
				        },
				        "strokeThickness": {
				          "!doc": "Phaser.Text.strokeThickness",
				          "!type": "+Number"
				        },
				        "width": {
				          "!doc": "Phaser.Text.width",
				          "!type": "+Number"
				        },
				        "autoCull": {
				          "!doc": "Phaser.Text.autoCull",
				          "!type": "+Boolean"
				        },
				        "x": {
				          "!doc": "Phaser.Text.x",
				          "!type": "+Number"
				        },
				        "exists": {
				          "!doc": "Phaser.Text.exists",
				          "!type": "+Boolean"
				        },
				        "y": {
				          "!doc": "Phaser.Text.y",
				          "!type": "+Number"
				        },
				        "z": {
				          "!doc": "Phaser.Text.z",
				          "!type": "+Number"
				        },
				        "font": {
				          "!doc": "Phaser.Text.font",
				          "!type": "+String"
				        },
				        "scaleMin": {
				          "!doc": "Phaser.Text.scaleMin",
				          "!type": "+Phaser.Point"
				        },
				        "shadowBlur": {
				          "!doc": "Phaser.Text.shadowBlur",
				          "!type": "+Number"
				        },
				        "addColor": {
				          "!doc": "Phaser.Text.addColor",
				          "!type": "fn(color: +String, position: +Number) -> +Phaser.Text"
				        },
				        "fontVariant": {
				          "!doc": "Phaser.Text.fontVariant",
				          "!type": "+String"
				        },
				        "align": {
				          "!doc": "Phaser.Text.align",
				          "!type": "+String"
				        },
				        "body": {
				          "!doc": "Phaser.Text.body",
				          "!type": "+Phaser.Physics.Arcade.Body"
				        },
				        "lineSpacing": {
				          "!doc": "Phaser.Text.lineSpacing",
				          "!type": "+Number"
				        },
				        "inCamera": {
				          "!doc": "Phaser.Text.inCamera",
				          "!type": "+Boolean"
				        },
				        "offsetX": {
				          "!doc": "Phaser.Text.offsetX",
				          "!type": "+Number"
				        },
				        "tintedTexture": {
				          "!doc": "Phaser.Text.tintedTexture",
				          "!type": "+Phaser.Canvas"
				        },
				        "offsetY": {
				          "!doc": "Phaser.Text.offsetY",
				          "!type": "+Number"
				        },
				        "boundsAlignV": {
				          "!doc": "Phaser.Text.boundsAlignV",
				          "!type": "+String"
				        },
				        "fixedToCamera": {
				          "!doc": "Phaser.Text.fixedToCamera",
				          "!type": "+Boolean"
				        },
				        "renderOrderID": {
				          "!doc": "Phaser.Text.renderOrderID",
				          "!type": "+Number"
				        },
				        "fontWeight": {
				          "!doc": "Phaser.Text.fontWeight",
				          "!type": "+String"
				        },
				        "previousRotation": {
				          "!doc": "Phaser.Text.previousRotation",
				          "!type": "+Number"
				        },
				        "visible": {
				          "!doc": "Phaser.Text.visible",
				          "!type": "+Boolean"
				        },
				        "bottom": {
				          "!doc": "Phaser.Text.bottom",
				          "!type": "+Number"
				        },
				        "cameraOffset": {
				          "!doc": "Phaser.Text.cameraOffset",
				          "!type": "+Phaser.Point"
				        },
				        "moveDown": {
				          "!doc": "Phaser.Text.moveDown",
				          "!type": "fn() -> +PIXI.DisplayObject"
				        },
				        "fill": {
				          "!doc": "Phaser.Text.fill",
				          "!type": "+Object"
				        },
				        "updateCrop": {
				          "!doc": "Phaser.Text.updateCrop",
				          "!type": "fn()"
				        },
				        "strokeColors": {
				          "!doc": "Phaser.Text.strokeColors",
				          "!type": "+Array"
				        },
				        "overlap": {
				          "!doc": "Phaser.Text.overlap",
				          "!type": "fn(displayObject: +Phaser.Sprite) -> +Boolean"
				        },
				        "loadTexture": {
				          "!doc": "Phaser.Text.loadTexture",
				          "!type": "fn(key: +String, frame: +String, stopAnimation: +Boolean)"
				        },
				        "name": {
				          "!doc": "Phaser.Text.name",
				          "!type": "+String"
				        },
				        "position": {
				          "!doc": "Phaser.Text.position",
				          "!type": "+Phaser.Point"
				        },
				        "crop": {
				          "!doc": "Phaser.Text.crop",
				          "!type": "fn(rect: +Phaser.Rectangle, copy: +Boolean)"
				        },
				        "frame": {
				          "!doc": "Phaser.Text.frame",
				          "!type": "+Number"
				        },
				        "worldRotation": {
				          "!doc": "Phaser.Text.worldRotation",
				          "!type": "+Number"
				        },
				        "shader": {
				          "!doc": "Phaser.Text.shader",
				          "!type": "+PIXI.AbstractFilter"
				        },
				        "cropRect": {
				          "!doc": "Phaser.Text.cropRect",
				          "!type": "+Phaser.Rectangle"
				        },
				        "game": {
				          "!doc": "Phaser.Text.game",
				          "!type": "+Phaser.Game"
				        },
				        "renderable": {
				          "!doc": "Phaser.Text.renderable",
				          "!type": "+Boolean"
				        },
				        "deltaZ": {
				          "!doc": "Phaser.Text.deltaZ",
				          "!type": "+Number"
				        },
				        "transformCallbackContext": {
				          "!doc": "Phaser.Text.transformCallbackContext",
				          "!type": "+Object"
				        },
				        "wordWrap": {
				          "!doc": "Phaser.Text.wordWrap",
				          "!type": "+Boolean"
				        },
				        "deltaX": {
				          "!doc": "Phaser.Text.deltaX",
				          "!type": "+Number"
				        },
				        "deltaY": {
				          "!doc": "Phaser.Text.deltaY",
				          "!type": "+Number"
				        },
				        "update": {
				          "!doc": "Phaser.Text.update",
				          "!type": "fn()"
				        },
				        "scale": {
				          "!doc": "Phaser.Text.scale",
				          "!type": "+Phaser.Point"
				        },
				        "tint": {
				          "!doc": "Phaser.Text.tint",
				          "!type": "+Number"
				        },
				        "inputEnabled": {
				          "!doc": "Phaser.Text.inputEnabled",
				          "!type": "+Boolean"
				        },
				        "setFrame": {
				          "!doc": "Phaser.Text.setFrame",
				          "!type": "fn(frame: +Phaser.Frame)"
				        },
				        "animations": {
				          "!doc": "Phaser.Text.animations",
				          "!type": "+Phaser.AnimationManager"
				        },
				        "alpha": {
				          "!doc": "Phaser.Text.alpha",
				          "!type": "+Number"
				        },
				        "heal": {
				          "!doc": "Phaser.Text.heal",
				          "!type": "fn(amount: +Number) -> +Phaser.Sprite"
				        },
				        "setStyle": {
				          "!doc": "Phaser.Text.setStyle",
				          "!type": "fn(style: +Object, style_font: +String, style_fontStyle: +String, style_fontVariant: +String, style_fontWeight: +String, style_fontSize: +String, style_backgroundColor: +String, style_fill: +String, style_align: +String, style_boundsAlignH: +String, style_boundsAlignV: +String, style_stroke: +String, style_strokeThickness: +Number, style_wordWrap: +Boolean, style_wordWrapWidth: +Number, style_tabs: +Number) -> +Phaser.Text"
				        },
				        "padding": {
				          "!doc": "Phaser.Text.padding",
				          "!type": "+Phaser.Point"
				        },
				        "debug": {
				          "!doc": "Phaser.Text.debug",
				          "!type": "+Boolean"
				        },
				        "frameName": {
				          "!doc": "Phaser.Text.frameName",
				          "!type": "+String"
				        },
				        "wordWrapWidth": {
				          "!doc": "Phaser.Text.wordWrapWidth",
				          "!type": "+Number"
				        },
				        "shadowFill": {
				          "!doc": "Phaser.Text.shadowFill",
				          "!type": "+Boolean"
				        },
				        "rotation": {
				          "!doc": "Phaser.Text.rotation",
				          "!type": "+Number"
				        },
				        "sendToBack": {
				          "!doc": "Phaser.Text.sendToBack",
				          "!type": "fn() -> +PIXI.DisplayObject"
				        },
				        "resetFrame": {
				          "!doc": "Phaser.Text.resetFrame",
				          "!type": "fn()"
				        },
				        "stroke": {
				          "!doc": "Phaser.Text.stroke",
				          "!type": "+String"
				        },
				        "pendingDestroy": {
				          "!doc": "Phaser.Text.pendingDestroy",
				          "!type": "+Boolean"
				        },
				        "clearColors": {
				          "!doc": "Phaser.Text.clearColors",
				          "!type": "fn() -> +Phaser.Text"
				        },
				        "blendMode": {
				          "!doc": "Phaser.Text.blendMode",
				          "!type": "+Number"
				        },
				        "hitArea": {
				          "!doc": "Phaser.Text.hitArea",
				          "!type": "+Phaser.Rectangle"
				        },
				        "fresh": {
				          "!doc": "Phaser.Text.fresh",
				          "!type": "+Boolean"
				        },
				        "setText": {
				          "!doc": "Phaser.Text.setText",
				          "!type": "fn(text: +String) -> +Phaser.Text"
				        }
				      }
				    },
				    "Physics": {
				      "P2": {
				        "RevoluteConstraint": {
				          "!doc": "Phaser.Physics.P2.RevoluteConstraint",
				          "!type": "fn(world: +Phaser.Physics.P2, bodyA: +p2.Body, pivotA: +Float32Array, bodyB: +p2.Body, pivotB: +Float32Array, maxForce: +Number, worldPivot: +Float32Array)",
				          "prototype": {
				            "game": {
				              "!doc": "Phaser.Physics.P2.RevoluteConstraint.game",
				              "!type": "+Phaser.Game"
				            },
				            "world": {
				              "!doc": "Phaser.Physics.P2.RevoluteConstraint.world",
				              "!type": "+Phaser.Physics.P2"
				            }
				          }
				        },
				        "LockConstraint": {
				          "!doc": "Phaser.Physics.P2.LockConstraint",
				          "!type": "fn(world: +Phaser.Physics.P2, bodyA: +p2.Body, bodyB: +p2.Body, offset: +Array, angle: +Number, maxForce: +Number)",
				          "prototype": {
				            "game": {
				              "!doc": "Phaser.Physics.P2.LockConstraint.game",
				              "!type": "+Phaser.Game"
				            },
				            "world": {
				              "!doc": "Phaser.Physics.P2.LockConstraint.world",
				              "!type": "+Phaser.Physics.P2"
				            }
				          }
				        },
				        "CollisionGroup": {
				          "!doc": "Phaser.Physics.P2.CollisionGroup",
				          "!type": "fn(bitmask: +Number)",
				          "prototype": {"mask": {
				            "!doc": "Phaser.Physics.P2.CollisionGroup.mask",
				            "!type": "+Number"
				          }}
				        },
				        "ContactMaterial": {
				          "!doc": "Phaser.Physics.P2.ContactMaterial",
				          "!type": "fn(materialA: +Phaser.Physics.P2.Material, materialB: +Phaser.Physics.P2.Material, options: +Object)",
				          "prototype": {}
				        },
				        "!doc": "Phaser.Physics.P2",
				        "PrismaticConstraint": {
				          "!doc": "Phaser.Physics.P2.PrismaticConstraint",
				          "!type": "fn(world: +Phaser.Physics.P2, bodyA: +p2.Body, bodyB: +p2.Body, lockRotation: +Boolean, anchorA: +Array, anchorB: +Array, axis: +Array, maxForce: +Number)",
				          "prototype": {
				            "game": {
				              "!doc": "Phaser.Physics.P2.PrismaticConstraint.game",
				              "!type": "+Phaser.Game"
				            },
				            "world": {
				              "!doc": "Phaser.Physics.P2.PrismaticConstraint.world",
				              "!type": "+Phaser.Physics.P2"
				            }
				          }
				        },
				        "DistanceConstraint": {
				          "!doc": "Phaser.Physics.P2.DistanceConstraint",
				          "!type": "fn(world: +Phaser.Physics.P2, bodyA: +p2.Body, bodyB: +p2.Body, distance: +Number, localAnchorA: +Array, localAnchorB: +Array, maxForce: +Object)",
				          "prototype": {
				            "game": {
				              "!doc": "Phaser.Physics.P2.DistanceConstraint.game",
				              "!type": "+Phaser.Game"
				            },
				            "world": {
				              "!doc": "Phaser.Physics.P2.DistanceConstraint.world",
				              "!type": "+Phaser.Physics.P2"
				            }
				          }
				        },
				        "PointProxy": {
				          "!doc": "Phaser.Physics.P2.PointProxy",
				          "!type": "fn(world: +Phaser.Physics.P2, destination: +Object)",
				          "prototype": {
				            "x": {
				              "!doc": "Phaser.Physics.P2.PointProxy.x",
				              "!type": "+Number"
				            },
				            "y": {
				              "!doc": "Phaser.Physics.P2.PointProxy.y",
				              "!type": "+Number"
				            },
				            "mx": {
				              "!doc": "Phaser.Physics.P2.PointProxy.mx",
				              "!type": "+Number"
				            },
				            "my": {
				              "!doc": "Phaser.Physics.P2.PointProxy.my",
				              "!type": "+Number"
				            }
				          }
				        },
				        "Material": {
				          "!doc": "Phaser.Physics.P2.Material",
				          "!type": "fn(name: +String)",
				          "prototype": {"name": {
				            "!doc": "Phaser.Physics.P2.Material.name",
				            "!type": "+String"
				          }}
				        },
				        "Spring": {
				          "!doc": "Phaser.Physics.P2.Spring",
				          "!type": "fn(world: +Phaser.Physics.P2, bodyA: +p2.Body, bodyB: +p2.Body, restLength: +Number, stiffness: +Number, damping: +Number, worldA: +Array, worldB: +Array, localA: +Array, localB: +Array)",
				          "prototype": {
				            "game": {
				              "!doc": "Phaser.Physics.P2.Spring.game",
				              "!type": "+Phaser.Game"
				            },
				            "world": {
				              "!doc": "Phaser.Physics.P2.Spring.world",
				              "!type": "+Phaser.Physics.P2"
				            },
				            "data": {
				              "!doc": "Phaser.Physics.P2.Spring.data",
				              "!type": "+p2.LinearSpring"
				            }
				          }
				        },
				        "prototype": {
				          "getSprings": {
				            "!doc": "Phaser.Physics.P2.getSprings",
				            "!type": "fn() -> +array._Phaser.Physics.P2.Spring_"
				          },
				          "paused": {
				            "!doc": "Phaser.Physics.P2.paused",
				            "!type": "+Boolean"
				          },
				          "onConstraintAdded": {
				            "!doc": "Phaser.Physics.P2.onConstraintAdded",
				            "!type": "+Phaser.Signal"
				          },
				          "addConstraint": {
				            "!doc": "Phaser.Physics.P2.addConstraint",
				            "!type": "fn(constraint: +Phaser.Physics.P2.Constraint) -> +Phaser.Physics.P2.Constraint"
				          },
				          "onConstraintRemoved": {
				            "!doc": "Phaser.Physics.P2.onConstraintRemoved",
				            "!type": "+Phaser.Signal"
				          },
				          "pxmi": {
				            "!doc": "Phaser.Physics.P2.pxmi",
				            "!type": "fn(v: +Number) -> +Number"
				          },
				          "getConstraints": {
				            "!doc": "Phaser.Physics.P2.getConstraints",
				            "!type": "fn() -> +array._Phaser.Physics.P2.Constraint_"
				          },
				          "frameRate": {
				            "!doc": "Phaser.Physics.P2.frameRate",
				            "!type": "+Number"
				          },
				          "convertTilemap": {
				            "!doc": "Phaser.Physics.P2.convertTilemap",
				            "!type": "fn(map: +Phaser.Tilemap, layer: +Number, addToWorld: +Boolean, optimize: +Boolean) -> +Array"
				          },
				          "createMaterial": {
				            "!doc": "Phaser.Physics.P2.createMaterial",
				            "!type": "fn(name: +String, body: +Phaser.Physics.P2.Body) -> +Phaser.Physics.P2.Material"
				          },
				          "onSpringRemoved": {
				            "!doc": "Phaser.Physics.P2.onSpringRemoved",
				            "!type": "+Phaser.Signal"
				          },
				          "enableBody": {
				            "!doc": "Phaser.Physics.P2.enableBody",
				            "!type": "fn(object: +Object, debug: +Boolean)"
				          },
				          "createContactMaterial": {
				            "!doc": "Phaser.Physics.P2.createContactMaterial",
				            "!type": "fn(materialA: +Phaser.Physics.P2.Material, materialB: +Phaser.Physics.P2.Material, options: +Object) -> +Phaser.Physics.P2.ContactMaterial"
				          },
				          "enable": {
				            "!doc": "Phaser.Physics.P2.enable",
				            "!type": "fn(object: +Object, debug: +Boolean, children: +Boolean)"
				          },
				          "onBodyRemoved": {
				            "!doc": "Phaser.Physics.P2.onBodyRemoved",
				            "!type": "+Phaser.Signal"
				          },
				          "everythingCollisionGroup": {
				            "!doc": "Phaser.Physics.P2.everythingCollisionGroup",
				            "!type": "+Phaser.Physics.P2.CollisionGroup"
				          },
				          "applyDamping": {
				            "!doc": "Phaser.Physics.P2.applyDamping",
				            "!type": "+Boolean"
				          },
				          "removeBodyNextStep": {
				            "!doc": "Phaser.Physics.P2.removeBodyNextStep",
				            "!type": "fn(body: +Phaser.Physics.P2.Body)"
				          },
				          "onSpringAdded": {
				            "!doc": "Phaser.Physics.P2.onSpringAdded",
				            "!type": "+Phaser.Signal"
				          },
				          "sleepMode": {
				            "!doc": "Phaser.Physics.P2.sleepMode",
				            "!type": "+Number"
				          },
				          "applySpringForces": {
				            "!doc": "Phaser.Physics.P2.applySpringForces",
				            "!type": "+Boolean"
				          },
				          "boundsCollidesWith": {
				            "!doc": "Phaser.Physics.P2.boundsCollidesWith",
				            "!type": "+Array"
				          },
				          "updateBoundsCollisionGroup": {
				            "!doc": "Phaser.Physics.P2.updateBoundsCollisionGroup",
				            "!type": "fn(setCollisionGroup: +Boolean)"
				          },
				          "destroy": {
				            "!doc": "Phaser.Physics.P2.destroy",
				            "!type": "fn()"
				          },
				          "createBody": {
				            "!doc": "Phaser.Physics.P2.createBody",
				            "!type": "fn(x: +Number, y: +Number, mass: +Number, addToWorld: +Boolean, options: +Object, options_optimalDecomp: +Boolean, options_skipSimpleCheck: +Boolean, options_removeCollinearPoints: +Boolean, points: +Array._number_) -> +Phaser.Physics.P2.Body"
				          },
				          "callbackContext": {
				            "!doc": "Phaser.Physics.P2.callbackContext",
				            "!type": "+Object"
				          },
				          "getBodies": {
				            "!doc": "Phaser.Physics.P2.getBodies",
				            "!type": "fn() -> +array._Phaser.Physics.P2.Body_"
				          },
				          "solveConstraints": {
				            "!doc": "Phaser.Physics.P2.solveConstraints",
				            "!type": "+Boolean"
				          },
				          "useElapsedTime": {
				            "!doc": "Phaser.Physics.P2.useElapsedTime",
				            "!type": "+Boolean"
				          },
				          "setPostBroadphaseCallback": {
				            "!doc": "Phaser.Physics.P2.setPostBroadphaseCallback",
				            "!type": "fn(callback: +Function, context: +Object)"
				          },
				          "pause": {
				            "!doc": "Phaser.Physics.P2.pause",
				            "!type": "fn()"
				          },
				          "boundsCollisionGroup": {
				            "!doc": "Phaser.Physics.P2.boundsCollisionGroup",
				            "!type": "+Phaser.Physics.P2.CollisionGroup"
				          },
				          "removeBody": {
				            "!doc": "Phaser.Physics.P2.removeBody",
				            "!type": "fn(body: +Phaser.Physics.P2.Body) -> +Phaser.Physics.P2.Body"
				          },
				          "mpx": {
				            "!doc": "Phaser.Physics.P2.mpx",
				            "!type": "fn(v: +Number) -> +Number"
				          },
				          "materials": {
				            "!doc": "Phaser.Physics.P2.materials",
				            "!type": "+array._Phaser.Physics.P2.Material_"
				          },
				          "createGearConstraint": {
				            "!doc": "Phaser.Physics.P2.createGearConstraint",
				            "!type": "fn(bodyA: +Phaser.Sprite, bodyB: +Phaser.Sprite, angle: +Number, ratio: +Number) -> +Phaser.Physics.P2.GearConstraint"
				          },
				          "reset": {
				            "!doc": "Phaser.Physics.P2.reset",
				            "!type": "fn()"
				          },
				          "addContactMaterial": {
				            "!doc": "Phaser.Physics.P2.addContactMaterial",
				            "!type": "fn(material: +Phaser.Physics.P2.ContactMaterial) -> +Phaser.Physics.P2.ContactMaterial"
				          },
				          "createCollisionGroup": {
				            "!doc": "Phaser.Physics.P2.createCollisionGroup",
				            "!type": "fn(object: +Phaser.Group)"
				          },
				          "nothingCollisionGroup": {
				            "!doc": "Phaser.Physics.P2.nothingCollisionGroup",
				            "!type": "+Phaser.Physics.P2.CollisionGroup"
				          },
				          "preUpdate": {
				            "!doc": "Phaser.Physics.P2.preUpdate",
				            "!type": "fn()"
				          },
				          "applyGravity": {
				            "!doc": "Phaser.Physics.P2.applyGravity",
				            "!type": "+Boolean"
				          },
				          "clearTilemapLayerBodies": {
				            "!doc": "Phaser.Physics.P2.clearTilemapLayerBodies",
				            "!type": "fn(map: +Phaser.Tilemap, layer: +Number)"
				          },
				          "getContactMaterial": {
				            "!doc": "Phaser.Physics.P2.getContactMaterial",
				            "!type": "fn(materialA: +Phaser.Physics.P2.Material, materialB: +Phaser.Physics.P2.Material) -> +Phaser.Physics.P2.ContactMaterial"
				          },
				          "game": {
				            "!doc": "Phaser.Physics.P2.game",
				            "!type": "+Phaser.Game"
				          },
				          "createRevoluteConstraint": {
				            "!doc": "Phaser.Physics.P2.createRevoluteConstraint",
				            "!type": "fn(bodyA: +Phaser.Sprite, pivotA: +Array, bodyB: +Phaser.Sprite, pivotB: +Array, maxForce: +Number, worldPivot: +Float32Array) -> +Phaser.Physics.P2.RevoluteConstraint"
				          },
				          "update": {
				            "!doc": "Phaser.Physics.P2.update",
				            "!type": "fn()"
				          },
				          "setMaterial": {
				            "!doc": "Phaser.Physics.P2.setMaterial",
				            "!type": "fn(material: +Phaser.Physics.P2.Material, bodies: +array._Phaser.Physics.P2.Body_)"
				          },
				          "toJSON": {
				            "!doc": "Phaser.Physics.P2.toJSON",
				            "!type": "fn() -> +Object"
				          },
				          "total": {
				            "!doc": "Phaser.Physics.P2.total",
				            "!type": "+Number"
				          },
				          "world": {
				            "!doc": "Phaser.Physics.P2.world",
				            "!type": "+p2.World"
				          },
				          "walls": {
				            "!doc": "Phaser.Physics.P2.walls",
				            "!type": "+Object"
				          },
				          "endContactHandler": {
				            "!doc": "Phaser.Physics.P2.endContactHandler",
				            "!type": "fn(event: +Object)"
				          },
				          "removeSpring": {
				            "!doc": "Phaser.Physics.P2.removeSpring",
				            "!type": "fn(spring: +Phaser.Physics.P2.Spring) -> +Phaser.Physics.P2.Spring"
				          },
				          "emitImpactEvent": {
				            "!doc": "Phaser.Physics.P2.emitImpactEvent",
				            "!type": "+Boolean"
				          },
				          "addSpring": {
				            "!doc": "Phaser.Physics.P2.addSpring",
				            "!type": "fn(spring: +Phaser.Physics.P2.Spring) -> +Phaser.Physics.P2.Spring"
				          },
				          "removeConstraint": {
				            "!doc": "Phaser.Physics.P2.removeConstraint",
				            "!type": "fn(constraint: +Phaser.Physics.P2.Constraint) -> +Phaser.Physics.P2.Constraint"
				          },
				          "setImpactEvents": {
				            "!doc": "Phaser.Physics.P2.setImpactEvents",
				            "!type": "fn(state: +Boolean)"
				          },
				          "createDistanceConstraint": {
				            "!doc": "Phaser.Physics.P2.createDistanceConstraint",
				            "!type": "fn(bodyA: +Phaser.Sprite, bodyB: +Phaser.Sprite, distance: +Number, localAnchorA: +Array, localAnchorB: +Array, maxForce: +Number) -> +Phaser.Physics.P2.DistanceConstraint"
				          },
				          "resume": {
				            "!doc": "Phaser.Physics.P2.resume",
				            "!type": "fn()"
				          },
				          "addBody": {
				            "!doc": "Phaser.Physics.P2.addBody",
				            "!type": "fn(body: +Phaser.Physics.P2.Body) -> +Boolean"
				          },
				          "pxm": {
				            "!doc": "Phaser.Physics.P2.pxm",
				            "!type": "fn(v: +Number) -> +Number"
				          },
				          "getBody": {
				            "!doc": "Phaser.Physics.P2.getBody",
				            "!type": "fn(object: +Object) -> +p2.Body"
				          },
				          "postBroadphaseCallback": {
				            "!doc": "Phaser.Physics.P2.postBroadphaseCallback",
				            "!type": "+Function"
				          },
				          "createPrismaticConstraint": {
				            "!doc": "Phaser.Physics.P2.createPrismaticConstraint",
				            "!type": "fn(bodyA: +Phaser.Sprite, bodyB: +Phaser.Sprite, lockRotation: +Boolean, anchorA: +Array, anchorB: +Array, axis: +Array, maxForce: +Number) -> +Phaser.Physics.P2.PrismaticConstraint"
				          },
				          "mpxi": {
				            "!doc": "Phaser.Physics.P2.mpxi",
				            "!type": "fn(v: +Number) -> +Number"
				          },
				          "onEndContact": {
				            "!doc": "Phaser.Physics.P2.onEndContact",
				            "!type": "+Phaser.Signal"
				          },
				          "clear": {
				            "!doc": "Phaser.Physics.P2.clear",
				            "!type": "fn()"
				          },
				          "contactMaterial": {
				            "!doc": "Phaser.Physics.P2.contactMaterial",
				            "!type": "+p2.ContactMaterial"
				          },
				          "collisionGroups": {
				            "!doc": "Phaser.Physics.P2.collisionGroups",
				            "!type": "+Array"
				          },
				          "convertCollisionObjects": {
				            "!doc": "Phaser.Physics.P2.convertCollisionObjects",
				            "!type": "fn(map: +Phaser.Tilemap, layer: +Number, addToWorld: +Boolean) -> +Array"
				          },
				          "createRotationalSpring": {
				            "!doc": "Phaser.Physics.P2.createRotationalSpring",
				            "!type": "fn(bodyA: +Phaser.Sprite, bodyB: +Phaser.Sprite, restAngle: +Number, stiffness: +Number, damping: +Number) -> +Phaser.Physics.P2.RotationalSpring"
				          },
				          "setBounds": {
				            "!doc": "Phaser.Physics.P2.setBounds",
				            "!type": "fn(x: +Number, y: +Number, width: +Number, height: +Number, left: +Boolean, right: +Boolean, top: +Boolean, bottom: +Boolean, setCollisionGroup: +Boolean)"
				          },
				          "friction": {
				            "!doc": "Phaser.Physics.P2.friction",
				            "!type": "+Number"
				          },
				          "createLockConstraint": {
				            "!doc": "Phaser.Physics.P2.createLockConstraint",
				            "!type": "fn(bodyA: +Phaser.Sprite, bodyB: +Phaser.Sprite, offset: +Array, angle: +Number, maxForce: +Number) -> +Phaser.Physics.P2.LockConstraint"
				          },
				          "onContactMaterialAdded": {
				            "!doc": "Phaser.Physics.P2.onContactMaterialAdded",
				            "!type": "+Phaser.Signal"
				          },
				          "onContactMaterialRemoved": {
				            "!doc": "Phaser.Physics.P2.onContactMaterialRemoved",
				            "!type": "+Phaser.Signal"
				          },
				          "onBodyAdded": {
				            "!doc": "Phaser.Physics.P2.onBodyAdded",
				            "!type": "+Phaser.Signal"
				          },
				          "restitution": {
				            "!doc": "Phaser.Physics.P2.restitution",
				            "!type": "+Number"
				          },
				          "gravity": {
				            "!doc": "Phaser.Physics.P2.gravity",
				            "!type": "+Phaser.Physics.P2.InversePointProxy"
				          },
				          "beginContactHandler": {
				            "!doc": "Phaser.Physics.P2.beginContactHandler",
				            "!type": "fn(event: +Object)"
				          },
				          "createSpring": {
				            "!doc": "Phaser.Physics.P2.createSpring",
				            "!type": "fn(bodyA: +Phaser.Sprite, bodyB: +Phaser.Sprite, restLength: +Number, stiffness: +Number, damping: +Number, worldA: +Array, worldB: +Array, localA: +Array, localB: +Array) -> +Phaser.Physics.P2.Spring"
				          },
				          "hitTest": {
				            "!doc": "Phaser.Physics.P2.hitTest",
				            "!type": "fn(worldPoint: +Phaser.Point, bodies: +Array.__Phaser.Physics.P2.Body_Phaser.Sprite_p2.Body__, precision: +Number, filterStatic: +Boolean) -> +Array"
				          },
				          "createParticle": {
				            "!doc": "Phaser.Physics.P2.createParticle",
				            "!type": "fn(x: +Number, y: +Number, mass: +Number, addToWorld: +Boolean, options: +Object, options_optimalDecomp: +Boolean, options_skipSimpleCheck: +Boolean, options_removeCollinearPoints: +Boolean, points: +Array._number_)"
				          },
				          "onBeginContact": {
				            "!doc": "Phaser.Physics.P2.onBeginContact",
				            "!type": "+Phaser.Signal"
				          },
				          "time": {
				            "!doc": "Phaser.Physics.P2.time",
				            "!type": "+Boolean"
				          },
				          "config": {
				            "!doc": "Phaser.Physics.P2.config",
				            "!type": "+Object"
				          },
				          "removeContactMaterial": {
				            "!doc": "Phaser.Physics.P2.removeContactMaterial",
				            "!type": "fn(material: +Phaser.Physics.P2.ContactMaterial) -> +Phaser.Physics.P2.ContactMaterial"
				          }
				        },
				        "BodyDebug": {
				          "SORT_ASCENDING": "+Number",
				          "RETURN_TOTAL": "+Number",
				          "!doc": "Phaser.Physics.P2.BodyDebug",
				          "RETURN_NONE": "+Number",
				          "!type": "fn(game: +Phaser.Game, body: +Phaser.Physics.P2.Body, settings: +Object)",
				          "SORT_DESCENDING": "+Number",
				          "RETURN_CHILD": "+Number",
				          "prototype": {
				            "xy": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.xy",
				              "!type": "fn(index: +Number, x: +Number, y: +Number)"
				            },
				            "parent": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.parent",
				              "!type": "+PIXI.DisplayObjectContainer"
				            },
				            "descendingSortHandler": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.descendingSortHandler",
				              "!type": "fn(a: +Object, b: +Object)"
				            },
				            "type": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.type",
				              "!type": "+Number"
				            },
				            "moveAll": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.moveAll",
				              "!type": "fn(group: +Phaser.Group, silent: +Boolean) -> +Phaser.Group"
				            },
				            "removeAll": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.removeAll",
				              "!type": "fn(destroy: +Boolean, silent: +Boolean)"
				            },
				            "enableBody": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.enableBody",
				              "!type": "+Boolean"
				            },
				            "children": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.children",
				              "!type": "+Array_DisplayObject_"
				            },
				            "customSort": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.customSort",
				              "!type": "fn(sortHandler: +Function, context: +Object)"
				            },
				            "enableBodyDebug": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.enableBodyDebug",
				              "!type": "+Boolean"
				            },
				            "pivot": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.pivot",
				              "!type": "+Phaser.Point"
				            },
				            "bringToTop": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.bringToTop",
				              "!type": "fn(child: +Object) -> +Object"
				            },
				            "moveUp": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.moveUp",
				              "!type": "fn(child: +Object) -> +Object"
				            },
				            "physicsType": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.physicsType",
				              "!type": "+Number"
				            },
				            "updateSpriteTransform": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.updateSpriteTransform",
				              "!type": "fn()"
				            },
				            "canvas": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.canvas",
				              "!type": "+Phaser.Graphics"
				            },
				            "postUpdate": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.postUpdate",
				              "!type": "fn()"
				            },
				            "destroy": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.destroy",
				              "!type": "fn(destroyChildren: +Boolean, soft: +Boolean)"
				            },
				            "cursorIndex": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.cursorIndex",
				              "!type": "+Number"
				            },
				            "getFirstDead": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.getFirstDead",
				              "!type": "fn(createIfNull: +Boolean, x: +Number, y: +Number, key: +String, frame: +String) -> +PIXI.DisplayObject"
				            },
				            "physicsSortDirection": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.physicsSortDirection",
				              "!type": "+Number"
				            },
				            "addAt": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.addAt",
				              "!type": "fn(child: +DisplayObject, index: +Number, silent: +Boolean) -> +PIXI.DisplayObject"
				            },
				            "worldPosition": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.worldPosition",
				              "!type": "+Phaser.Point"
				            },
				            "forEachAlive": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.forEachAlive",
				              "!type": "fn(callback: +Function, callbackContext: +Object, args: +Object)"
				            },
				            "resetCursor": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.resetCursor",
				              "!type": "fn(index: +Number) -> +Object"
				            },
				            "addMultiple": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.addMultiple",
				              "!type": "fn(children: +Array._DisplayObject_, silent: +Boolean) -> +Array._DisplayObject_"
				            },
				            "setProperty": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.setProperty",
				              "!type": "fn(child: +Object, key: +Array, value: +Object, operation: +Number, force: +Boolean) -> +Boolean"
				            },
				            "preUpdate": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.preUpdate",
				              "!type": "fn()"
				            },
				            "hash": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.hash",
				              "!type": "+Array"
				            },
				            "filterArea": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.filterArea",
				              "!type": "+Phaser.Rectangle"
				            },
				            "addToHash": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.addToHash",
				              "!type": "fn(child: +DisplayObject) -> +Boolean"
				            },
				            "worldScale": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.worldScale",
				              "!type": "+Phaser.Point"
				            },
				            "alive": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.alive",
				              "!type": "+Boolean"
				            },
				            "checkProperty": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.checkProperty",
				              "!type": "fn(child: +Object, key: +Array, value: +Object, force: +Boolean) -> +Boolean"
				            },
				            "callbackFromArray": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.callbackFromArray",
				              "!type": "fn(child: +Object, callback: +Array, length: +Number)"
				            },
				            "worldAlpha": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.worldAlpha",
				              "!type": "+Number"
				            },
				            "multiplyAll": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.multiplyAll",
				              "!type": "fn(property: +String, amount: +Number, checkAlive: +Boolean, checkVisible: +Boolean)"
				            },
				            "angle": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.angle",
				              "!type": "+Number"
				            },
				            "iterate": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.iterate",
				              "!type": "fn(key: +String, value: +Object, returnType: +Number, callback: +Function, callbackContext: +Object, args: +Array._any_) -> +Object"
				            },
				            "onDestroy": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.onDestroy",
				              "!type": "+Phaser.Signal"
				            },
				            "set": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.set",
				              "!type": "fn(child: +Phaser.Sprite, key: +String, value: +Object, checkAlive: +Boolean, checkVisible: +Boolean, operation: +Number, force: +Boolean) -> +Boolean"
				            },
				            "getFirstExists": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.getFirstExists",
				              "!type": "fn(exists: +Boolean, createIfNull: +Boolean, x: +Number, y: +Number, key: +String, frame: +String) -> +PIXI.DisplayObject"
				            },
				            "draw": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.draw",
				              "!type": "fn()"
				            },
				            "reverse": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.reverse",
				              "!type": "fn()"
				            },
				            "filter": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.filter",
				              "!type": "fn(predicate: +Function, checkExists: +Boolean) -> +Phaser.ArraySet"
				            },
				            "ppu": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.ppu",
				              "!type": "+Number"
				            },
				            "stage": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.stage",
				              "!type": "+Phaser.Stage"
				            },
				            "addAll": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.addAll",
				              "!type": "fn(property: +String, amount: +Number, checkAlive: +Boolean, checkVisible: +Boolean)"
				            },
				            "ignoreDestroy": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.ignoreDestroy",
				              "!type": "+Boolean"
				            },
				            "x": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.x",
				              "!type": "+Number"
				            },
				            "exists": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.exists",
				              "!type": "+Boolean"
				            },
				            "y": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.y",
				              "!type": "+Number"
				            },
				            "z": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.z",
				              "!type": "+Number"
				            },
				            "divideAll": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.divideAll",
				              "!type": "fn(property: +String, amount: +Number, checkAlive: +Boolean, checkVisible: +Boolean)"
				            },
				            "setAllChildren": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.setAllChildren",
				              "!type": "fn(key: +String, value: +Object, checkAlive: +Boolean, checkVisible: +Boolean, operation: +Number, force: +Boolean)"
				            },
				            "physicsBodyType": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.physicsBodyType",
				              "!type": "+Number"
				            },
				            "getIndex": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.getIndex",
				              "!type": "fn(child: +Object) -> +Number"
				            },
				            "getBottom": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.getBottom",
				              "!type": "fn() -> +Object"
				            },
				            "replace": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.replace",
				              "!type": "fn(oldChild: +Object, newChild: +Object) -> +Object"
				            },
				            "body": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.body",
				              "!type": "+Phaser.Physics.P2.Body"
				            },
				            "resetChild": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.resetChild",
				              "!type": "fn(child: +DisplayObject, x: +Number, y: +Number, key: +String, frame: +String) -> +PIXI.DisplayObject"
				            },
				            "getRandom": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.getRandom",
				              "!type": "fn(startIndex: +Number, length: +Number) -> +Object"
				            },
				            "forEachExists": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.forEachExists",
				              "!type": "fn(callback: +Function, callbackContext: +Object, args: +Object)"
				            },
				            "getTop": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.getTop",
				              "!type": "fn() -> +Object"
				            },
				            "create": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.create",
				              "!type": "fn(x: +Number, y: +Number, key: +String, frame: +String, exists: +Boolean) -> +PIXI.DisplayObject"
				            },
				            "countDead": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.countDead",
				              "!type": "fn() -> +Number"
				            },
				            "subAll": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.subAll",
				              "!type": "fn(property: +String, amount: +Number, checkAlive: +Boolean, checkVisible: +Boolean)"
				            },
				            "fixedToCamera": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.fixedToCamera",
				              "!type": "+Boolean"
				            },
				            "add": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.add",
				              "!type": "fn(child: +DisplayObject, silent: +Boolean) -> +PIXI.DisplayObject"
				            },
				            "visible": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.visible",
				              "!type": "+Boolean"
				            },
				            "swap": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.swap",
				              "!type": "fn(child1: +Object, child2: +Object)"
				            },
				            "cameraOffset": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.cameraOffset",
				              "!type": "+Phaser.Point"
				            },
				            "sort": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.sort",
				              "!type": "fn(key: +String, order: +Number)"
				            },
				            "moveDown": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.moveDown",
				              "!type": "fn(child: +Object) -> +Object"
				            },
				            "hasProperty": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.hasProperty",
				              "!type": "fn(child: +Object, key: +Array._string_) -> +Boolean"
				            },
				            "updateZ": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.updateZ",
				              "!type": "fn()"
				            },
				            "name": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.name",
				              "!type": "+String"
				            },
				            "ascendingSortHandler": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.ascendingSortHandler",
				              "!type": "fn(a: +Object, b: +Object)"
				            },
				            "position": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.position",
				              "!type": "+Phaser.Point"
				            },
				            "removeBetween": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.removeBetween",
				              "!type": "fn(startIndex: +Number, endIndex: +Number, destroy: +Boolean, silent: +Boolean)"
				            },
				            "removeFromHash": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.removeFromHash",
				              "!type": "fn(child: +DisplayObject) -> +Boolean"
				            },
				            "classType": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.classType",
				              "!type": "+Object"
				            },
				            "next": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.next",
				              "!type": "fn() -> +Object"
				            },
				            "cursor": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.cursor",
				              "!type": "+PIXI.DisplayObject"
				            },
				            "worldRotation": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.worldRotation",
				              "!type": "+Number"
				            },
				            "game": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.game",
				              "!type": "+Phaser.Game"
				            },
				            "renderable": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.renderable",
				              "!type": "+Boolean"
				            },
				            "forEachDead": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.forEachDead",
				              "!type": "fn(callback: +Function, callbackContext: +Object, args: +Object)"
				            },
				            "update": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.update",
				              "!type": "fn()"
				            },
				            "scale": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.scale",
				              "!type": "+Phaser.Point"
				            },
				            "countLiving": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.countLiving",
				              "!type": "fn() -> +Number"
				            },
				            "remove": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.remove",
				              "!type": "fn(child: +Object, destroy: +Boolean, silent: +Boolean) -> +Boolean"
				            },
				            "callAll": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.callAll",
				              "!type": "fn(method: +String, context: +String, args: +Object)"
				            },
				            "total": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.total",
				              "!type": "+Number"
				            },
				            "alpha": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.alpha",
				              "!type": "+Number"
				            },
				            "createMultiple": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.createMultiple",
				              "!type": "fn(quantity: +Number, key: +String, frame: +Number, exists: +Boolean)"
				            },
				            "setAll": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.setAll",
				              "!type": "fn(key: +String, value: +Object, checkAlive: +Boolean, checkVisible: +Boolean, operation: +Number, force: +Boolean)"
				            },
				            "callAllExists": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.callAllExists",
				              "!type": "fn(callback: +String, existsValue: +Boolean, parameter: +Object)"
				            },
				            "checkAll": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.checkAll",
				              "!type": "fn(key: +String, value: +Object, checkAlive: +Boolean, checkVisible: +Boolean, force: +Boolean)"
				            },
				            "previous": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.previous",
				              "!type": "fn() -> +Object"
				            },
				            "forEach": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.forEach",
				              "!type": "fn(callback: +Function, callbackContext: +Object, checkExists: +Boolean, args: +Object)"
				            },
				            "rotation": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.rotation",
				              "!type": "+Number"
				            },
				            "length": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.length",
				              "!type": "+Number"
				            },
				            "sendToBack": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.sendToBack",
				              "!type": "fn(child: +Object) -> +Object"
				            },
				            "getAt": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.getAt",
				              "!type": "fn(index: +Number) -> +PIXI.DisplayObject"
				            },
				            "pendingDestroy": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.pendingDestroy",
				              "!type": "+Boolean"
				            },
				            "getFirstAlive": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.getFirstAlive",
				              "!type": "fn(createIfNull: +Boolean, x: +Number, y: +Number, key: +String, frame: +String) -> +PIXI.DisplayObject"
				            },
				            "hitArea": {
				              "!doc": "Phaser.Physics.P2.BodyDebug.hitArea",
				              "!type": "+Phaser.Rectangle"
				            }
				          }
				        },
				        "InversePointProxy": {
				          "!doc": "Phaser.Physics.P2.InversePointProxy",
				          "!type": "fn(world: +Phaser.Physics.P2, destination: +Object)",
				          "prototype": {
				            "x": {
				              "!doc": "Phaser.Physics.P2.InversePointProxy.x",
				              "!type": "+Number"
				            },
				            "y": {
				              "!doc": "Phaser.Physics.P2.InversePointProxy.y",
				              "!type": "+Number"
				            },
				            "mx": {
				              "!doc": "Phaser.Physics.P2.InversePointProxy.mx",
				              "!type": "+Number"
				            },
				            "my": {
				              "!doc": "Phaser.Physics.P2.InversePointProxy.my",
				              "!type": "+Number"
				            }
				          }
				        },
				        "RotationalSpring": {
				          "!doc": "Phaser.Physics.P2.RotationalSpring",
				          "!type": "fn(world: +Phaser.Physics.P2, bodyA: +p2.Body, bodyB: +p2.Body, restAngle: +Number, stiffness: +Number, damping: +Number)",
				          "prototype": {
				            "game": {
				              "!doc": "Phaser.Physics.P2.RotationalSpring.game",
				              "!type": "+Phaser.Game"
				            },
				            "world": {
				              "!doc": "Phaser.Physics.P2.RotationalSpring.world",
				              "!type": "+Phaser.Physics.P2"
				            },
				            "data": {
				              "!doc": "Phaser.Physics.P2.RotationalSpring.data",
				              "!type": "+p2.RotationalSpring"
				            }
				          }
				        },
				        "GearConstraint": {
				          "!doc": "Phaser.Physics.P2.GearConstraint",
				          "!type": "fn(world: +Phaser.Physics.P2, bodyA: +p2.Body, bodyB: +p2.Body, angle: +Number, ratio: +Number)",
				          "prototype": {
				            "game": {
				              "!doc": "Phaser.Physics.P2.GearConstraint.game",
				              "!type": "+Phaser.Game"
				            },
				            "world": {
				              "!doc": "Phaser.Physics.P2.GearConstraint.world",
				              "!type": "+Phaser.Physics.P2"
				            }
				          }
				        },
				        "!type": "fn(game: +Phaser.Game, config: +Object)",
				        "Body": {
				          "!doc": "Phaser.Physics.P2.Body",
				          "KINEMATIC": {
				            "!doc": "Phaser.Physics.P2.Body.KINEMATIC",
				            "!type": "+Number"
				          },
				          "!type": "fn(game: +Phaser.Game, sprite: +Phaser.Sprite, x: +Number, y: +Number, mass: +Number)",
				          "prototype": {
				            "setCollisionGroup": {
				              "!doc": "Phaser.Physics.P2.Body.setCollisionGroup",
				              "!type": "fn(group: +Phaser.Physics.CollisionGroup, shape: +p2.Shape)"
				            },
				            "sleepSpeedLimit": {
				              "!doc": "Phaser.Physics.P2.Body.sleepSpeedLimit",
				              "!type": "+Number"
				            },
				            "collidesWith": {
				              "!doc": "Phaser.Physics.P2.Body.collidesWith",
				              "!type": "+Array"
				            },
				            "data": {
				              "!doc": "Phaser.Physics.P2.Body.data",
				              "!type": "+p2.Body"
				            },
				            "createGroupCallback": {
				              "!doc": "Phaser.Physics.P2.Body.createGroupCallback",
				              "!type": "fn(group: +Phaser.Physics.CollisionGroup, callback: +Function, callbackContext: +Object)"
				            },
				            "type": {
				              "!doc": "Phaser.Physics.P2.Body.type",
				              "!type": "+Number"
				            },
				            "addParticle": {
				              "!doc": "Phaser.Physics.P2.Body.addParticle",
				              "!type": "fn(offsetX: +Number, offsetY: +Number, rotation: +Number) -> +p2.Particle"
				            },
				            "addToWorld": {
				              "!doc": "Phaser.Physics.P2.Body.addToWorld",
				              "!type": "fn()"
				            },
				            "STATIC": {
				              "!doc": "Phaser.Physics.P2.Body.STATIC",
				              "!type": "+Number"
				            },
				            "removeCollisionGroup": {
				              "!doc": "Phaser.Physics.P2.Body.removeCollisionGroup",
				              "!type": "fn(group: +Phaser.Physics.CollisionGroup, clearCallback: +Boolean, shape: +p2.Shape)"
				            },
				            "angularForce": {
				              "!doc": "Phaser.Physics.P2.Body.angularForce",
				              "!type": "+Number"
				            },
				            "clearCollision": {
				              "!doc": "Phaser.Physics.P2.Body.clearCollision",
				              "!type": "fn(clearGroup: +Boolean, clearMask: +Boolean, shape: +p2.Shape)"
				            },
				            "applyDamping": {
				              "!doc": "Phaser.Physics.P2.Body.applyDamping",
				              "!type": "fn(dt: +Number)"
				            },
				            "dynamic": {
				              "!doc": "Phaser.Physics.P2.Body.dynamic",
				              "!type": "+Boolean"
				            },
				            "collideWorldBounds": {
				              "!doc": "Phaser.Physics.P2.Body.collideWorldBounds",
				              "!type": "+Boolean"
				            },
				            "id": {
				              "!doc": "Phaser.Physics.P2.Body.id",
				              "!type": "+Number"
				            },
				            "getVelocityAtPoint": {
				              "!doc": "Phaser.Physics.P2.Body.getVelocityAtPoint",
				              "!type": "fn(result: +Array, relativePoint: +Array) -> +Array"
				            },
				            "motionState": {
				              "!doc": "Phaser.Physics.P2.Body.motionState",
				              "!type": "+Number"
				            },
				            "moveUp": {
				              "!doc": "Phaser.Physics.P2.Body.moveUp",
				              "!type": "fn(speed: +Number)"
				            },
				            "collides": {
				              "!doc": "Phaser.Physics.P2.Body.collides",
				              "!type": "fn(group: +Phaser.Physics.CollisionGroup, callback: +Function, callbackContext: +Object, shape: +p2.Shape)"
				            },
				            "static": {
				              "!doc": "Phaser.Physics.P2.Body.static",
				              "!type": "+Boolean"
				            },
				            "offset": {
				              "!doc": "Phaser.Physics.P2.Body.offset",
				              "!type": "+Phaser.Point"
				            },
				            "postUpdate": {
				              "!doc": "Phaser.Physics.P2.Body.postUpdate",
				              "!type": "fn()"
				            },
				            "setRectangleFromSprite": {
				              "!doc": "Phaser.Physics.P2.Body.setRectangleFromSprite",
				              "!type": "fn(sprite: +Phaser.Sprite) -> +p2.Rectangle"
				            },
				            "createBodyCallback": {
				              "!doc": "Phaser.Physics.P2.Body.createBodyCallback",
				              "!type": "fn(object: +Phaser.Sprite, callback: +Function, callbackContext: +Object)"
				            },
				            "angularDamping": {
				              "!doc": "Phaser.Physics.P2.Body.angularDamping",
				              "!type": "+Number"
				            },
				            "moveBackward": {
				              "!doc": "Phaser.Physics.P2.Body.moveBackward",
				              "!type": "fn(speed: +Number)"
				            },
				            "addShape": {
				              "!doc": "Phaser.Physics.P2.Body.addShape",
				              "!type": "fn(shape: +p2.Shape, offsetX: +Number, offsetY: +Number, rotation: +Number) -> +p2.Shape"
				            },
				            "destroy": {
				              "!doc": "Phaser.Physics.P2.Body.destroy",
				              "!type": "fn()"
				            },
				            "damping": {
				              "!doc": "Phaser.Physics.P2.Body.damping",
				              "!type": "+Number"
				            },
				            "moveDown": {
				              "!doc": "Phaser.Physics.P2.Body.moveDown",
				              "!type": "fn(speed: +Number)"
				            },
				            "removeShape": {
				              "!doc": "Phaser.Physics.P2.Body.removeShape",
				              "!type": "fn(shape: +p2.Circle) -> +Boolean"
				            },
				            "toWorldFrame": {
				              "!doc": "Phaser.Physics.P2.Body.toWorldFrame",
				              "!type": "fn(out: +Array, localPoint: +Array)"
				            },
				            "addLine": {
				              "!doc": "Phaser.Physics.P2.Body.addLine",
				              "!type": "fn(length: +Number, offsetX: +Number, offsetY: +Number, rotation: +Number) -> +p2.Line"
				            },
				            "debugBody": {
				              "!doc": "Phaser.Physics.P2.Body.debugBody",
				              "!type": "+Phaser.Physics.P2.BodyDebug"
				            },
				            "setZeroVelocity": {
				              "!doc": "Phaser.Physics.P2.Body.setZeroVelocity",
				              "!type": "fn()"
				            },
				            "moveRight": {
				              "!doc": "Phaser.Physics.P2.Body.moveRight",
				              "!type": "fn(speed: +Number)"
				            },
				            "thrust": {
				              "!doc": "Phaser.Physics.P2.Body.thrust",
				              "!type": "fn(speed: +Number)"
				            },
				            "reset": {
				              "!doc": "Phaser.Physics.P2.Body.reset",
				              "!type": "fn(x: +Number, y: +Number, resetDamping: +Boolean, resetMass: +Boolean)"
				            },
				            "setZeroRotation": {
				              "!doc": "Phaser.Physics.P2.Body.setZeroRotation",
				              "!type": "fn()"
				            },
				            "moveLeft": {
				              "!doc": "Phaser.Physics.P2.Body.moveLeft",
				              "!type": "fn(speed: +Number)"
				            },
				            "force": {
				              "!doc": "Phaser.Physics.P2.Body.force",
				              "!type": "+Phaser.Physics.P2.InversePointProxy"
				            },
				            "setRectangle": {
				              "!doc": "Phaser.Physics.P2.Body.setRectangle",
				              "!type": "fn(width: +Number, height: +Number, offsetX: +Number, offsetY: +Number, rotation: +Number) -> +p2.Rectangle"
				            },
				            "preUpdate": {
				              "!doc": "Phaser.Physics.P2.Body.preUpdate",
				              "!type": "fn()"
				            },
				            "updateCollisionMask": {
				              "!doc": "Phaser.Physics.P2.Body.updateCollisionMask",
				              "!type": "fn(shape: +p2.Shape)"
				            },
				            "applyImpulseLocal": {
				              "!doc": "Phaser.Physics.P2.Body.applyImpulseLocal",
				              "!type": "fn(impulse: +Float32Array, localX: +Number, localY: +Number)"
				            },
				            "moveForward": {
				              "!doc": "Phaser.Physics.P2.Body.moveForward",
				              "!type": "fn(speed: +Number)"
				            },
				            "game": {
				              "!doc": "Phaser.Physics.P2.Body.game",
				              "!type": "+Phaser.Game"
				            },
				            "getCollisionMask": {
				              "!doc": "Phaser.Physics.P2.Body.getCollisionMask",
				              "!type": "fn() -> +Number"
				            },
				            "addPlane": {
				              "!doc": "Phaser.Physics.P2.Body.addPlane",
				              "!type": "fn(offsetX: +Number, offsetY: +Number, rotation: +Number) -> +p2.Plane"
				            },
				            "shapeChanged": {
				              "!doc": "Phaser.Physics.P2.Body.shapeChanged",
				              "!type": "fn()"
				            },
				            "mass": {
				              "!doc": "Phaser.Physics.P2.Body.mass",
				              "!type": "+Number"
				            },
				            "setZeroDamping": {
				              "!doc": "Phaser.Physics.P2.Body.setZeroDamping",
				              "!type": "fn()"
				            },
				            "rotateLeft": {
				              "!doc": "Phaser.Physics.P2.Body.rotateLeft",
				              "!type": "fn(speed: +Number)"
				            },
				            "adjustCenterOfMass": {
				              "!doc": "Phaser.Physics.P2.Body.adjustCenterOfMass",
				              "!type": "fn()"
				            },
				            "loadPolygon": {
				              "!doc": "Phaser.Physics.P2.Body.loadPolygon",
				              "!type": "fn(key: +String, object: +String) -> +Boolean"
				            },
				            "setMaterial": {
				              "!doc": "Phaser.Physics.P2.Body.setMaterial",
				              "!type": "fn(material: +Phaser.Physics.P2.Material, shape: +p2.Shape)"
				            },
				            "clearShapes": {
				              "!doc": "Phaser.Physics.P2.Body.clearShapes",
				              "!type": "fn()"
				            },
				            "setZeroForce": {
				              "!doc": "Phaser.Physics.P2.Body.setZeroForce",
				              "!type": "fn()"
				            },
				            "addPolygon": {
				              "!doc": "Phaser.Physics.P2.Body.addPolygon",
				              "!type": "fn(options: +Object, options_optimalDecomp: +Boolean, options_skipSimpleCheck: +Boolean, options_removeCollinearPoints: +Boolean, points: +Array._number_) -> +Boolean"
				            },
				            "inertia": {
				              "!doc": "Phaser.Physics.P2.Body.inertia",
				              "!type": "+Number"
				            },
				            "toLocalFrame": {
				              "!doc": "Phaser.Physics.P2.Body.toLocalFrame",
				              "!type": "fn(out: +Float32Array, worldPoint: +Float32Array)"
				            },
				            "addRectangle": {
				              "!doc": "Phaser.Physics.P2.Body.addRectangle",
				              "!type": "fn(width: +Number, height: +Number, offsetX: +Number, offsetY: +Number, rotation: +Number) -> +p2.Box"
				            },
				            "world": {
				              "!doc": "Phaser.Physics.P2.Body.world",
				              "!type": "+Phaser.Physics.P2"
				            },
				            "allowSleep": {
				              "!doc": "Phaser.Physics.P2.Body.allowSleep",
				              "!type": "+Boolean"
				            },
				            "sprite": {
				              "!doc": "Phaser.Physics.P2.Body.sprite",
				              "!type": "+Phaser.Sprite"
				            },
				            "angle": {
				              "!doc": "Phaser.Physics.P2.Body.angle",
				              "!type": "+Number"
				            },
				            "removeFromWorld": {
				              "!doc": "Phaser.Physics.P2.Body.removeFromWorld",
				              "!type": "fn()"
				            },
				            "addFixture": {
				              "!doc": "Phaser.Physics.P2.Body.addFixture",
				              "!type": "fn(fixtureData: +String) -> +Array"
				            },
				            "removeNextStep": {
				              "!doc": "Phaser.Physics.P2.Body.removeNextStep",
				              "!type": "+Boolean"
				            },
				            "addCapsule": {
				              "!doc": "Phaser.Physics.P2.Body.addCapsule",
				              "!type": "fn(length: +Number, radius: +Number, offsetX: +Number, offsetY: +Number, rotation: +Number) -> +p2.Capsule"
				            },
				            "dirty": {
				              "!doc": "Phaser.Physics.P2.Body.dirty",
				              "!type": "+Boolean"
				            },
				            "debug": {
				              "!doc": "Phaser.Physics.P2.Body.debug",
				              "!type": "+Boolean"
				            },
				            "rotateRight": {
				              "!doc": "Phaser.Physics.P2.Body.rotateRight",
				              "!type": "fn(speed: +Number)"
				            },
				            "onEndContact": {
				              "!doc": "Phaser.Physics.P2.Body.onEndContact",
				              "!type": "+Phaser.Signal"
				            },
				            "KINEMATIC": {
				              "!doc": "Phaser.Physics.P2.Body.KINEMATIC",
				              "!type": "+Number"
				            },
				            "rotation": {
				              "!doc": "Phaser.Physics.P2.Body.rotation",
				              "!type": "+Number"
				            },
				            "setCircle": {
				              "!doc": "Phaser.Physics.P2.Body.setCircle",
				              "!type": "fn(radius: +Number, offsetX: +Number, offsetY: +Number, rotation: +Number)"
				            },
				            "velocity": {
				              "!doc": "Phaser.Physics.P2.Body.velocity",
				              "!type": "+Phaser.Physics.P2.InversePointProxy"
				            },
				            "reverse": {
				              "!doc": "Phaser.Physics.P2.Body.reverse",
				              "!type": "fn(speed: +Number)"
				            },
				            "addPhaserPolygon": {
				              "!doc": "Phaser.Physics.P2.Body.addPhaserPolygon",
				              "!type": "fn(key: +String, object: +String) -> +Array"
				            },
				            "angularVelocity": {
				              "!doc": "Phaser.Physics.P2.Body.angularVelocity",
				              "!type": "+Number"
				            },
				            "applyForce": {
				              "!doc": "Phaser.Physics.P2.Body.applyForce",
				              "!type": "fn(force: +Float32Array, worldX: +Number, worldY: +Number)"
				            },
				            "DYNAMIC": {
				              "!doc": "Phaser.Physics.P2.Body.DYNAMIC",
				              "!type": "+Number"
				            },
				            "kinematic": {
				              "!doc": "Phaser.Physics.P2.Body.kinematic",
				              "!type": "+Boolean"
				            },
				            "applyImpulse": {
				              "!doc": "Phaser.Physics.P2.Body.applyImpulse",
				              "!type": "fn(impulse: +Float32Array, worldX: +Number, worldY: +Number)"
				            },
				            "addCircle": {
				              "!doc": "Phaser.Physics.P2.Body.addCircle",
				              "!type": "fn(radius: +Number, offsetX: +Number, offsetY: +Number, rotation: +Number) -> +p2.Circle"
				            },
				            "gravity": {
				              "!doc": "Phaser.Physics.P2.Body.gravity",
				              "!type": "+Phaser.Point"
				            },
				            "x": {
				              "!doc": "Phaser.Physics.P2.Body.x",
				              "!type": "+Number"
				            },
				            "y": {
				              "!doc": "Phaser.Physics.P2.Body.y",
				              "!type": "+Number"
				            },
				            "onBeginContact": {
				              "!doc": "Phaser.Physics.P2.Body.onBeginContact",
				              "!type": "+Phaser.Signal"
				            },
				            "fixedRotation": {
				              "!doc": "Phaser.Physics.P2.Body.fixedRotation",
				              "!type": "+Boolean"
				            }
				          },
				          "STATIC": {
				            "!doc": "Phaser.Physics.P2.Body.STATIC",
				            "!type": "+Number"
				          },
				          "DYNAMIC": {
				            "!doc": "Phaser.Physics.P2.Body.DYNAMIC",
				            "!type": "+Number"
				          }
				        },
				        "FixtureList": {
				          "!doc": "Phaser.Physics.P2.FixtureList",
				          "!type": "fn(list: +Array)",
				          "prototype": {
				            "setSensor": {
				              "!doc": "Phaser.Physics.P2.FixtureList.setSensor",
				              "!type": "fn(value: +Boolean, fixtureKey: +String)"
				            },
				            "flatten": {
				              "!doc": "Phaser.Physics.P2.FixtureList.flatten",
				              "!type": "fn(array: +Array)"
				            },
				            "init": {
				              "!doc": "Phaser.Physics.P2.FixtureList.init",
				              "!type": "fn()"
				            },
				            "setMask": {
				              "!doc": "Phaser.Physics.P2.FixtureList.setMask",
				              "!type": "fn(bit: +Number, fixtureKey: +String)"
				            },
				            "setCategory": {
				              "!doc": "Phaser.Physics.P2.FixtureList.setCategory",
				              "!type": "fn(bit: +Number, fixtureKey: +String)"
				            },
				            "getGroup": {
				              "!doc": "Phaser.Physics.P2.FixtureList.getGroup",
				              "!type": "fn(groupID: +Number)"
				            },
				            "parse": {
				              "!doc": "Phaser.Physics.P2.FixtureList.parse",
				              "!type": "fn()"
				            },
				            "setMaterial": {
				              "!doc": "Phaser.Physics.P2.FixtureList.setMaterial",
				              "!type": "fn(material: +Object, fixtureKey: +String)"
				            },
				            "getFixtures": {
				              "!doc": "Phaser.Physics.P2.FixtureList.getFixtures",
				              "!type": "fn(keys: +Array)"
				            },
				            "getFixtureByKey": {
				              "!doc": "Phaser.Physics.P2.FixtureList.getFixtureByKey",
				              "!type": "fn(key: +String)"
				            }
				          }
				        }
				      },
				      "Ninja": {
				        "Circle": {
				          "!doc": "Phaser.Physics.Ninja.Circle",
				          "!type": "fn(body: +Phaser.Physics.Ninja.Body, x: +Number, y: +Number, radius: +Number)",
				          "prototype": {
				            "resolveCircleTile": {
				              "!doc": "Phaser.Physics.Ninja.Circle.resolveCircleTile",
				              "!type": "fn(x: +Number, y: +Number, oH: +Number, oV: +Number, obj: +Phaser.Physics.Ninja.Circle, t: +Phaser.Physics.Ninja.Tile) -> +Number"
				            },
				            "oldpos": {
				              "!doc": "Phaser.Physics.Ninja.Circle.oldpos",
				              "!type": "+Phaser.Point"
				            },
				            "circleTileProjections": {
				              "!doc": "Phaser.Physics.Ninja.Circle.circleTileProjections",
				              "!type": "+Object"
				            },
				            "pos": {
				              "!doc": "Phaser.Physics.Ninja.Circle.pos",
				              "!type": "+Phaser.Point"
				            },
				            "projCircle_Convex": {
				              "!doc": "Phaser.Physics.Ninja.Circle.projCircle_Convex",
				              "!type": "fn(x: +Number, y: +Number, oH: +Number, oV: +Number, obj: +Phaser.Physics.Ninja.Circle, t: +Phaser.Physics.Ninja.Tile) -> +Number"
				            },
				            "projCircle_67DegB": {
				              "!doc": "Phaser.Physics.Ninja.Circle.projCircle_67DegB",
				              "!type": "fn(x: +Number, y: +Number, oH: +Number, oV: +Number, obj: +Phaser.Physics.Ninja.Circle, t: +Phaser.Physics.Ninja.Tile) -> +Number"
				            },
				            "collideWorldBounds": {
				              "!doc": "Phaser.Physics.Ninja.Circle.collideWorldBounds",
				              "!type": "fn()"
				            },
				            "projCircle_45Deg": {
				              "!doc": "Phaser.Physics.Ninja.Circle.projCircle_45Deg",
				              "!type": "fn(x: +Number, y: +Number, oH: +Number, oV: +Number, obj: +Phaser.Physics.Ninja.Circle, t: +Phaser.Physics.Ninja.Tile) -> +Number"
				            },
				            "radius": {
				              "!doc": "Phaser.Physics.Ninja.Circle.radius",
				              "!type": "+Number"
				            },
				            "render": {
				              "!doc": "Phaser.Physics.Ninja.Circle.render",
				              "!type": "fn(context: +Object, xOffset: +Number, yOffset: +Number, color: +String, filled: +Boolean)"
				            },
				            "projCircle_Full": {
				              "!doc": "Phaser.Physics.Ninja.Circle.projCircle_Full",
				              "!type": "fn(x: +Number, y: +Number, oH: +Number, oV: +Number, obj: +Phaser.Physics.Ninja.Circle, t: +Phaser.Physics.Ninja.Tile) -> +Number"
				            },
				            "height": {
				              "!doc": "Phaser.Physics.Ninja.Circle.height",
				              "!type": "+Number"
				            },
				            "projCircle_22DegS": {
				              "!doc": "Phaser.Physics.Ninja.Circle.projCircle_22DegS",
				              "!type": "fn(x: +Number, y: +Number, oH: +Number, oV: +Number, obj: +Phaser.Physics.Ninja.Circle, t: +Phaser.Physics.Ninja.Tile) -> +Number"
				            },
				            "projCircle_Concave": {
				              "!doc": "Phaser.Physics.Ninja.Circle.projCircle_Concave",
				              "!type": "fn(x: +Number, y: +Number, oH: +Number, oV: +Number, obj: +Phaser.Physics.Ninja.Circle, t: +Phaser.Physics.Ninja.Tile) -> +Number"
				            },
				            "destroy": {
				              "!doc": "Phaser.Physics.Ninja.Circle.destroy",
				              "!type": "fn()"
				            },
				            "collideCircleVsTile": {
				              "!doc": "Phaser.Physics.Ninja.Circle.collideCircleVsTile",
				              "!type": "fn(t: +Phaser.Physics.Ninja.Tile) -> +Boolean"
				            },
				            "velocity": {
				              "!doc": "Phaser.Physics.Ninja.Circle.velocity",
				              "!type": "+Phaser.Point"
				            },
				            "integrate": {
				              "!doc": "Phaser.Physics.Ninja.Circle.integrate",
				              "!type": "fn()"
				            },
				            "reportCollisionVsWorld": {
				              "!doc": "Phaser.Physics.Ninja.Circle.reportCollisionVsWorld",
				              "!type": "fn(px: +Number, py: +Number, dx: +Number, dy: +Number, obj: +Number)"
				            },
				            "projCircle_22DegB": {
				              "!doc": "Phaser.Physics.Ninja.Circle.projCircle_22DegB",
				              "!type": "fn(x: +Number, y: +Number, oH: +Number, oV: +Number, obj: +Phaser.Physics.Ninja.Circle, t: +Phaser.Physics.Ninja.Tile) -> +Number"
				            },
				            "system": {
				              "!doc": "Phaser.Physics.Ninja.Circle.system",
				              "!type": "+Phaser.Physics.Ninja.Body"
				            },
				            "projCircle_67DegS": {
				              "!doc": "Phaser.Physics.Ninja.Circle.projCircle_67DegS",
				              "!type": "fn(x: +Number, y: +Number, oH: +Number, oV: +Number, obj: +Phaser.Physics.Ninja.Circle, t: +Phaser.Physics.Ninja.Tile) -> +Number"
				            },
				            "width": {
				              "!doc": "Phaser.Physics.Ninja.Circle.width",
				              "!type": "+Number"
				            },
				            "projCircle_Half": {
				              "!doc": "Phaser.Physics.Ninja.Circle.projCircle_Half",
				              "!type": "fn(x: +Number, y: +Number, oH: +Number, oV: +Number, obj: +Phaser.Physics.Ninja.Circle, t: +Phaser.Physics.Ninja.Tile) -> +Number"
				            },
				            "xw": {
				              "!doc": "Phaser.Physics.Ninja.Circle.xw",
				              "!type": "+Number"
				            }
				          }
				        },
				        "!doc": "Phaser.Physics.Ninja",
				        "Tile": {
				          "!doc": "Phaser.Physics.Ninja.Tile",
				          "!type": "fn(body: +Phaser.Physics.Ninja.Body, x: +Number, y: +Number, width: +Number, height: +Number, type: +Number)",
				          "prototype": {
				            "bottom": {
				              "!doc": "Phaser.Physics.Ninja.Tile.bottom",
				              "!type": "+Number"
				            },
				            "oldpos": {
				              "!doc": "Phaser.Physics.Ninja.Tile.oldpos",
				              "!type": "+Phaser.Point"
				            },
				            "clear": {
				              "!doc": "Phaser.Physics.Ninja.Tile.clear",
				              "!type": "fn()"
				            },
				            "destroy": {
				              "!doc": "Phaser.Physics.Ninja.Tile.destroy",
				              "!type": "fn()"
				            },
				            "velocity": {
				              "!doc": "Phaser.Physics.Ninja.Tile.velocity",
				              "!type": "+Phaser.Point"
				            },
				            "right": {
				              "!doc": "Phaser.Physics.Ninja.Tile.right",
				              "!type": "+Number"
				            },
				            "setType": {
				              "!doc": "Phaser.Physics.Ninja.Tile.setType",
				              "!type": "fn(id: +Number)"
				            },
				            "type": {
				              "!doc": "Phaser.Physics.Ninja.Tile.type",
				              "!type": "+Number"
				            },
				            "integrate": {
				              "!doc": "Phaser.Physics.Ninja.Tile.integrate",
				              "!type": "fn()"
				            },
				            "reportCollisionVsWorld": {
				              "!doc": "Phaser.Physics.Ninja.Tile.reportCollisionVsWorld",
				              "!type": "fn(px: +Number, py: +Number, dx: +Number, dy: +Number, obj: +Number)"
				            },
				            "system": {
				              "!doc": "Phaser.Physics.Ninja.Tile.system",
				              "!type": "+Phaser.Physics.Ninja.Body"
				            },
				            "pos": {
				              "!doc": "Phaser.Physics.Ninja.Tile.pos",
				              "!type": "+Phaser.Point"
				            },
				            "width": {
				              "!doc": "Phaser.Physics.Ninja.Tile.width",
				              "!type": "+Number"
				            },
				            "x": {
				              "!doc": "Phaser.Physics.Ninja.Tile.x",
				              "!type": "+Number"
				            },
				            "y": {
				              "!doc": "Phaser.Physics.Ninja.Tile.y",
				              "!type": "+Number"
				            },
				            "collideWorldBounds": {
				              "!doc": "Phaser.Physics.Ninja.Tile.collideWorldBounds",
				              "!type": "fn()"
				            },
				            "id": {
				              "!doc": "Phaser.Physics.Ninja.Tile.id",
				              "!type": "+Number"
				            },
				            "xw": {
				              "!doc": "Phaser.Physics.Ninja.Tile.xw",
				              "!type": "+Number"
				            },
				            "height": {
				              "!doc": "Phaser.Physics.Ninja.Tile.height",
				              "!type": "+Number"
				            }
				          }
				        },
				        "!type": "fn(game: +Phaser.Game)",
				        "Body": {
				          "!doc": "Phaser.Physics.Ninja.Body",
				          "!type": "fn(system: +Phaser.Physics.Ninja, sprite: +Phaser.Sprite, type: +Number, id: +Number, radius: +Number, x: +Number, y: +Number, width: +Number, height: +Number)",
				          "prototype": {
				            "game": {
				              "!doc": "Phaser.Physics.Ninja.Body.game",
				              "!type": "+Phaser.Game"
				            },
				            "gravityScale": {
				              "!doc": "Phaser.Physics.Ninja.Body.gravityScale",
				              "!type": "+Number"
				            },
				            "bounce": {
				              "!doc": "Phaser.Physics.Ninja.Body.bounce",
				              "!type": "+Number"
				            },
				            "immovable": {
				              "!doc": "Phaser.Physics.Ninja.Body.immovable",
				              "!type": "+Boolean"
				            },
				            "deltaX": {
				              "!doc": "Phaser.Physics.Ninja.Body.deltaX",
				              "!type": "fn() -> +Number"
				            },
				            "deltaY": {
				              "!doc": "Phaser.Physics.Ninja.Body.deltaY",
				              "!type": "fn() -> +Number"
				            },
				            "facing": {
				              "!doc": "Phaser.Physics.Ninja.Body.facing",
				              "!type": "+Number"
				            },
				            "type": {
				              "!doc": "Phaser.Physics.Ninja.Body.type",
				              "!type": "+Number"
				            },
				            "aabb": {
				              "!doc": "Phaser.Physics.Ninja.Body.aabb",
				              "!type": "+Phaser.Physics.Ninja.AABB"
				            },
				            "speed": {
				              "!doc": "Phaser.Physics.Ninja.Body.speed",
				              "!type": "+Number"
				            },
				            "sprite": {
				              "!doc": "Phaser.Physics.Ninja.Body.sprite",
				              "!type": "+Phaser.Sprite"
				            },
				            "tile": {
				              "!doc": "Phaser.Physics.Ninja.Body.tile",
				              "!type": "+Phaser.Physics.Ninja.Tile"
				            },
				            "angle": {
				              "!doc": "Phaser.Physics.Ninja.Body.angle",
				              "!type": "+Number"
				            },
				            "collideWorldBounds": {
				              "!doc": "Phaser.Physics.Ninja.Body.collideWorldBounds",
				              "!type": "+Boolean"
				            },
				            "drag": {
				              "!doc": "Phaser.Physics.Ninja.Body.drag",
				              "!type": "+Number"
				            },
				            "render": {
				              "!doc": "Phaser.Physics.Ninja.Body.render",
				              "!type": "fn(context: +Object, body: +Phaser.Physics.Ninja.Body, color: +String, filled: +Boolean)"
				            },
				            "height": {
				              "!doc": "Phaser.Physics.Ninja.Body.height",
				              "!type": "+Number"
				            },
				            "deltaAbsY": {
				              "!doc": "Phaser.Physics.Ninja.Body.deltaAbsY",
				              "!type": "fn() -> +Number"
				            },
				            "shape": {
				              "!doc": "Phaser.Physics.Ninja.Body.shape",
				              "!type": "+Object"
				            },
				            "checkCollision": {
				              "!doc": "Phaser.Physics.Ninja.Body.checkCollision",
				              "!type": "+Object"
				            },
				            "postUpdate": {
				              "!doc": "Phaser.Physics.Ninja.Body.postUpdate",
				              "!type": "fn()"
				            },
				            "deltaAbsX": {
				              "!doc": "Phaser.Physics.Ninja.Body.deltaAbsX",
				              "!type": "fn() -> +Number"
				            },
				            "touching": {
				              "!doc": "Phaser.Physics.Ninja.Body.touching",
				              "!type": "+Object"
				            },
				            "bottom": {
				              "!doc": "Phaser.Physics.Ninja.Body.bottom",
				              "!type": "+Number"
				            },
				            "destroy": {
				              "!doc": "Phaser.Physics.Ninja.Body.destroy",
				              "!type": "fn()"
				            },
				            "velocity": {
				              "!doc": "Phaser.Physics.Ninja.Body.velocity",
				              "!type": "+Phaser.Point"
				            },
				            "maxSpeed": {
				              "!doc": "Phaser.Physics.Ninja.Body.maxSpeed",
				              "!type": "+Number"
				            },
				            "right": {
				              "!doc": "Phaser.Physics.Ninja.Body.right",
				              "!type": "+Number"
				            },
				            "friction": {
				              "!doc": "Phaser.Physics.Ninja.Body.friction",
				              "!type": "+Number"
				            },
				            "wasTouching": {
				              "!doc": "Phaser.Physics.Ninja.Body.wasTouching",
				              "!type": "+Object"
				            },
				            "system": {
				              "!doc": "Phaser.Physics.Ninja.Body.system",
				              "!type": "+Phaser.Physics.Ninja"
				            },
				            "setZeroVelocity": {
				              "!doc": "Phaser.Physics.Ninja.Body.setZeroVelocity",
				              "!type": "fn()"
				            },
				            "x": {
				              "!doc": "Phaser.Physics.Ninja.Body.x",
				              "!type": "+Number"
				            },
				            "width": {
				              "!doc": "Phaser.Physics.Ninja.Body.width",
				              "!type": "+Number"
				            },
				            "reset": {
				              "!doc": "Phaser.Physics.Ninja.Body.reset",
				              "!type": "fn()"
				            },
				            "y": {
				              "!doc": "Phaser.Physics.Ninja.Body.y",
				              "!type": "+Number"
				            },
				            "circle": {
				              "!doc": "Phaser.Physics.Ninja.Body.circle",
				              "!type": "+Phaser.Physics.Ninja.Circle"
				            },
				            "preUpdate": {
				              "!doc": "Phaser.Physics.Ninja.Body.preUpdate",
				              "!type": "fn()"
				            }
				          }
				        },
				        "prototype": {
				          "game": {
				            "!doc": "Phaser.Physics.Ninja.game",
				            "!type": "+Phaser.Game"
				          },
				          "separate": {
				            "!doc": "Phaser.Physics.Ninja.separate",
				            "!type": "fn(body1: +Phaser.Physics.Ninja.Body, body2: +Phaser.Physics.Ninja.Body) -> +Boolean"
				          },
				          "maxLevels": {
				            "!doc": "Phaser.Physics.Ninja.maxLevels",
				            "!type": "+Number"
				          },
				          "quadTree": {
				            "!doc": "Phaser.Physics.Ninja.quadTree",
				            "!type": "+Phaser.QuadTree"
				          },
				          "enableTile": {
				            "!doc": "Phaser.Physics.Ninja.enableTile",
				            "!type": "fn(object: +Object, id: +Number, children: +Boolean)"
				          },
				          "collide": {
				            "!doc": "Phaser.Physics.Ninja.collide",
				            "!type": "fn(object1: +Phaser.Sprite, object2: +Phaser.Sprite, collideCallback: +Function, processCallback: +Function, callbackContext: +Object) -> +Boolean"
				          },
				          "enableAABB": {
				            "!doc": "Phaser.Physics.Ninja.enableAABB",
				            "!type": "fn(object: +Object, children: +Boolean)"
				          },
				          "setBounds": {
				            "!doc": "Phaser.Physics.Ninja.setBounds",
				            "!type": "fn(x: +Number, y: +Number, width: +Number, height: +Number)"
				          },
				          "setBoundsToWorld": {
				            "!doc": "Phaser.Physics.Ninja.setBoundsToWorld",
				            "!type": "fn()"
				          },
				          "convertTilemap": {
				            "!doc": "Phaser.Physics.Ninja.convertTilemap",
				            "!type": "fn(map: +Phaser.Tilemap, layer: +Number, slopeMap: +Object) -> +Array"
				          },
				          "overlap": {
				            "!doc": "Phaser.Physics.Ninja.overlap",
				            "!type": "fn(object1: +Phaser.Sprite, object2: +Phaser.Sprite, overlapCallback: +Function, processCallback: +Function, callbackContext: +Object) -> +Boolean"
				          },
				          "enableCircle": {
				            "!doc": "Phaser.Physics.Ninja.enableCircle",
				            "!type": "fn(object: +Object, radius: +Number, children: +Boolean)"
				          },
				          "enableBody": {
				            "!doc": "Phaser.Physics.Ninja.enableBody",
				            "!type": "fn(object: +Object)"
				          },
				          "enable": {
				            "!doc": "Phaser.Physics.Ninja.enable",
				            "!type": "fn(object: +Object, type: +Number, id: +Number, radius: +Number, children: +Boolean)"
				          },
				          "gravity": {
				            "!doc": "Phaser.Physics.Ninja.gravity",
				            "!type": "+Number"
				          },
				          "bounds": {
				            "!doc": "Phaser.Physics.Ninja.bounds",
				            "!type": "+Phaser.Rectangle"
				          },
				          "time": {
				            "!doc": "Phaser.Physics.Ninja.time",
				            "!type": "+Phaser.Time"
				          },
				          "maxObjects": {
				            "!doc": "Phaser.Physics.Ninja.maxObjects",
				            "!type": "+Number"
				          },
				          "clearTilemapLayerBodies": {
				            "!doc": "Phaser.Physics.Ninja.clearTilemapLayerBodies",
				            "!type": "fn(map: +Phaser.Tilemap, layer: +Number)"
				          }
				        },
				        "AABB": {
				          "!doc": "Phaser.Physics.Ninja.AABB",
				          "!type": "fn(body: +Phaser.Physics.Ninja.Body, x: +Number, y: +Number, width: +Number, height: +Number)",
				          "prototype": {
				            "projAABB_22DegS": {
				              "!doc": "Phaser.Physics.Ninja.AABB.projAABB_22DegS",
				              "!type": "fn(x: +Number, y: +Number, obj: +Phaser.Physics.Ninja.AABB, t: +Phaser.Physics.Ninja.Tile) -> +Number"
				            },
				            "aabbTileProjections": {
				              "!doc": "Phaser.Physics.Ninja.AABB.aabbTileProjections",
				              "!type": "+Object"
				            },
				            "projAABB_Concave": {
				              "!doc": "Phaser.Physics.Ninja.AABB.projAABB_Concave",
				              "!type": "fn(x: +Number, y: +Number, obj: +Phaser.Physics.Ninja.AABB, t: +Phaser.Physics.Ninja.Tile) -> +Number"
				            },
				            "oldpos": {
				              "!doc": "Phaser.Physics.Ninja.AABB.oldpos",
				              "!type": "+Phaser.Point"
				            },
				            "collideAABBVsAABB": {
				              "!doc": "Phaser.Physics.Ninja.AABB.collideAABBVsAABB",
				              "!type": "fn(aabb: +Phaser.Physics.Ninja.AABB)"
				            },
				            "reportCollisionVsBody": {
				              "!doc": "Phaser.Physics.Ninja.AABB.reportCollisionVsBody",
				              "!type": "fn(px: +Number, py: +Number, dx: +Number, dy: +Number, obj: +Number)"
				            },
				            "collideAABBVsTile": {
				              "!doc": "Phaser.Physics.Ninja.AABB.collideAABBVsTile",
				              "!type": "fn(tile: +Phaser.Physics.Ninja.Tile)"
				            },
				            "projAABB_Full": {
				              "!doc": "Phaser.Physics.Ninja.AABB.projAABB_Full",
				              "!type": "fn(x: +Number, y: +Number, obj: +Phaser.Physics.Ninja.AABB, t: +Phaser.Physics.Ninja.Tile) -> +Number"
				            },
				            "pos": {
				              "!doc": "Phaser.Physics.Ninja.AABB.pos",
				              "!type": "+Phaser.Point"
				            },
				            "projAABB_Convex": {
				              "!doc": "Phaser.Physics.Ninja.AABB.projAABB_Convex",
				              "!type": "fn(x: +Number, y: +Number, obj: +Phaser.Physics.Ninja.AABB, t: +Phaser.Physics.Ninja.Tile) -> +Number"
				            },
				            "projAABB_67DegB": {
				              "!doc": "Phaser.Physics.Ninja.AABB.projAABB_67DegB",
				              "!type": "fn(x: +Number, y: +Number, obj: +Phaser.Physics.Ninja.AABB, t: +Phaser.Physics.Ninja.Tile) -> +Number"
				            },
				            "projAABB_45Deg": {
				              "!doc": "Phaser.Physics.Ninja.AABB.projAABB_45Deg",
				              "!type": "fn(x: +Number, y: +Number, obj: +Phaser.Physics.Ninja.AABB, t: +Phaser.Physics.Ninja.Tile) -> +Number"
				            },
				            "collideWorldBounds": {
				              "!doc": "Phaser.Physics.Ninja.AABB.collideWorldBounds",
				              "!type": "fn()"
				            },
				            "render": {
				              "!doc": "Phaser.Physics.Ninja.AABB.render",
				              "!type": "fn(context: +Object, xOffset: +Number, yOffset: +Number, color: +String, filled: +Boolean)"
				            },
				            "resolveTile": {
				              "!doc": "Phaser.Physics.Ninja.AABB.resolveTile",
				              "!type": "fn(x: +Number, y: +Number, body: +Phaser.Physics.Ninja.AABB, tile: +Phaser.Physics.Ninja.Tile) -> +Boolean"
				            },
				            "height": {
				              "!doc": "Phaser.Physics.Ninja.AABB.height",
				              "!type": "+Number"
				            },
				            "destroy": {
				              "!doc": "Phaser.Physics.Ninja.AABB.destroy",
				              "!type": "fn()"
				            },
				            "velocity": {
				              "!doc": "Phaser.Physics.Ninja.AABB.velocity",
				              "!type": "+Phaser.Point"
				            },
				            "reverse": {
				              "!doc": "Phaser.Physics.Ninja.AABB.reverse",
				              "!type": "fn()"
				            },
				            "integrate": {
				              "!doc": "Phaser.Physics.Ninja.AABB.integrate",
				              "!type": "fn()"
				            },
				            "projAABB_Half": {
				              "!doc": "Phaser.Physics.Ninja.AABB.projAABB_Half",
				              "!type": "fn(x: +Number, y: +Number, obj: +Phaser.Physics.Ninja.AABB, t: +Phaser.Physics.Ninja.Tile) -> +Number"
				            },
				            "reportCollisionVsWorld": {
				              "!doc": "Phaser.Physics.Ninja.AABB.reportCollisionVsWorld",
				              "!type": "fn(px: +Number, py: +Number, dx: +Number, dy: +Number)"
				            },
				            "projAABB_22DegB": {
				              "!doc": "Phaser.Physics.Ninja.AABB.projAABB_22DegB",
				              "!type": "fn(x: +Number, y: +Number, obj: +Phaser.Physics.Ninja.AABB, t: +Phaser.Physics.Ninja.Tile) -> +Number"
				            },
				            "system": {
				              "!doc": "Phaser.Physics.Ninja.AABB.system",
				              "!type": "+Phaser.Physics.Ninja.Body"
				            },
				            "projAABB_67DegS": {
				              "!doc": "Phaser.Physics.Ninja.AABB.projAABB_67DegS",
				              "!type": "fn(x: +Number, y: +Number, obj: +Phaser.Physics.Ninja.AABB, t: +Phaser.Physics.Ninja.Tile) -> +Number"
				            },
				            "width": {
				              "!doc": "Phaser.Physics.Ninja.AABB.width",
				              "!type": "+Number"
				            },
				            "reportCollision": {
				              "!doc": "Phaser.Physics.Ninja.AABB.reportCollision",
				              "!type": "fn(px: +Number, py: +Number, dx: +Number, dy: +Number)"
				            },
				            "xw": {
				              "!doc": "Phaser.Physics.Ninja.AABB.xw",
				              "!type": "+Number"
				            }
				          }
				        }
				      },
				      "!doc": "Phaser.Physics",
				      "NINJA": "+Number",
				      "BOX2D": "+Number",
				      "!type": "fn(game: +Phaser.Game, physicsConfig: +Object)",
				      "MATTERJS": "+Number",
				      "ARCADE": "+Number",
				      "CHIPMUNK": "+Number",
				      "prototype": {
				        "game": {
				          "!doc": "Phaser.Physics.game",
				          "!type": "+Phaser.Game"
				        },
				        "p2": {
				          "!doc": "Phaser.Physics.p2",
				          "!type": "+Phaser.Physics.P2"
				        },
				        "box2d": {
				          "!doc": "Phaser.Physics.box2d",
				          "!type": "+Phaser.Physics.Box2D"
				        },
				        "clear": {
				          "!doc": "Phaser.Physics.clear",
				          "!type": "fn()"
				        },
				        "update": {
				          "!doc": "Phaser.Physics.update",
				          "!type": "fn()"
				        },
				        "parseConfig": {
				          "!doc": "Phaser.Physics.parseConfig",
				          "!type": "fn()"
				        },
				        "destroy": {
				          "!doc": "Phaser.Physics.destroy",
				          "!type": "fn()"
				        },
				        "arcade": {
				          "!doc": "Phaser.Physics.arcade",
				          "!type": "+Phaser.Physics.Arcade"
				        },
				        "matter": {
				          "!doc": "Phaser.Physics.matter",
				          "!type": "+Phaser.Physics.Matter"
				        },
				        "setBoundsToWorld": {
				          "!doc": "Phaser.Physics.setBoundsToWorld",
				          "!type": "fn(left: +Boolean, right: +Boolean, top: +Boolean, bottom: +Boolean, setCollisionGroup: +Boolean)"
				        },
				        "ninja": {
				          "!doc": "Phaser.Physics.ninja",
				          "!type": "+Phaser.Physics.Ninja"
				        },
				        "enable": {
				          "!doc": "Phaser.Physics.enable",
				          "!type": "fn(object: +Object, system: +Number, debug: +Boolean)"
				        },
				        "setWorldMaterial": {
				          "!doc": "Phaser.Physics.setWorldMaterial",
				          "!type": "fn(material: +Phaser.Physics.P2.Material, left: +Boolean, right: +Boolean, top: +Boolean, bottom: +Boolean)"
				        },
				        "chipmunk": {
				          "!doc": "Phaser.Physics.chipmunk",
				          "!type": "+Phaser.Physics.Chipmunk"
				        },
				        "reset": {
				          "!doc": "Phaser.Physics.reset",
				          "!type": "fn()"
				        },
				        "startSystem": {
				          "!doc": "Phaser.Physics.startSystem",
				          "!type": "fn(system: +Number)"
				        },
				        "preUpdate": {
				          "!doc": "Phaser.Physics.preUpdate",
				          "!type": "fn()"
				        },
				        "config": {
				          "!doc": "Phaser.Physics.config",
				          "!type": "+Object"
				        }
				      },
				      "P2JS": "+Number",
				      "Arcade": {
				        "TOP_BOTTOM": "+Number",
				        "BOTTOM_TOP": "+Number",
				        "TilemapCollision": {
				          "!doc": "Phaser.Physics.Arcade.TilemapCollision",
				          "!type": "fn()",
				          "prototype": {"TILE_BIAS": {
				            "!doc": "Phaser.Physics.Arcade.TilemapCollision.TILE_BIAS",
				            "!type": "+Number"
				          }}
				        },
				        "!doc": "Phaser.Physics.Arcade",
				        "RIGHT_LEFT": "+Number",
				        "SORT_NONE": "+Number",
				        "LEFT_RIGHT": "+Number",
				        "!type": "fn(game: +Phaser.Game)",
				        "Body": {
				          "!doc": "Phaser.Physics.Arcade.Body",
				          "!type": "fn(sprite: +Phaser.Sprite)",
				          "prototype": {
				            "angularDrag": {
				              "!doc": "Phaser.Physics.Arcade.Body.angularDrag",
				              "!type": "+Number"
				            },
				            "newVelocity": {
				              "!doc": "Phaser.Physics.Arcade.Body.newVelocity",
				              "!type": "+Phaser.Point"
				            },
				            "bounce": {
				              "!doc": "Phaser.Physics.Arcade.Body.bounce",
				              "!type": "+Phaser.Point"
				            },
				            "prev": {
				              "!doc": "Phaser.Physics.Arcade.Body.prev",
				              "!type": "+Phaser.Point"
				            },
				            "type": {
				              "!doc": "Phaser.Physics.Arcade.Body.type",
				              "!type": "+Number"
				            },
				            "acceleration": {
				              "!doc": "Phaser.Physics.Arcade.Body.acceleration",
				              "!type": "+Phaser.Point"
				            },
				            "angularAcceleration": {
				              "!doc": "Phaser.Physics.Arcade.Body.angularAcceleration",
				              "!type": "+Number"
				            },
				            "maxAngular": {
				              "!doc": "Phaser.Physics.Arcade.Body.maxAngular",
				              "!type": "+Number"
				            },
				            "sourceWidth": {
				              "!doc": "Phaser.Physics.Arcade.Body.sourceWidth",
				              "!type": "+Number"
				            },
				            "enable": {
				              "!doc": "Phaser.Physics.Arcade.Body.enable",
				              "!type": "+Boolean"
				            },
				            "halfWidth": {
				              "!doc": "Phaser.Physics.Arcade.Body.halfWidth",
				              "!type": "+Number"
				            },
				            "collideWorldBounds": {
				              "!doc": "Phaser.Physics.Arcade.Body.collideWorldBounds",
				              "!type": "+Boolean"
				            },
				            "drag": {
				              "!doc": "Phaser.Physics.Arcade.Body.drag",
				              "!type": "+Phaser.Point"
				            },
				            "tilePadding": {
				              "!doc": "Phaser.Physics.Arcade.Body.tilePadding",
				              "!type": "+Phaser.Point"
				            },
				            "customSeparateY": {
				              "!doc": "Phaser.Physics.Arcade.Body.customSeparateY",
				              "!type": "+Boolean"
				            },
				            "height": {
				              "!doc": "Phaser.Physics.Arcade.Body.height",
				              "!type": "+Number"
				            },
				            "customSeparateX": {
				              "!doc": "Phaser.Physics.Arcade.Body.customSeparateX",
				              "!type": "+Boolean"
				            },
				            "syncBounds": {
				              "!doc": "Phaser.Physics.Arcade.Body.syncBounds",
				              "!type": "+Boolean"
				            },
				            "offset": {
				              "!doc": "Phaser.Physics.Arcade.Body.offset",
				              "!type": "+Phaser.Point"
				            },
				            "checkCollision": {
				              "!doc": "Phaser.Physics.Arcade.Body.checkCollision",
				              "!type": "+Object"
				            },
				            "postUpdate": {
				              "!doc": "Phaser.Physics.Arcade.Body.postUpdate",
				              "!type": "fn()"
				            },
				            "halfHeight": {
				              "!doc": "Phaser.Physics.Arcade.Body.halfHeight",
				              "!type": "+Number"
				            },
				            "bottom": {
				              "!doc": "Phaser.Physics.Arcade.Body.bottom",
				              "!type": "+Number"
				            },
				            "destroy": {
				              "!doc": "Phaser.Physics.Arcade.Body.destroy",
				              "!type": "fn()"
				            },
				            "sourceHeight": {
				              "!doc": "Phaser.Physics.Arcade.Body.sourceHeight",
				              "!type": "+Number"
				            },
				            "deltaMax": {
				              "!doc": "Phaser.Physics.Arcade.Body.deltaMax",
				              "!type": "+Phaser.Point"
				            },
				            "wasTouching": {
				              "!doc": "Phaser.Physics.Arcade.Body.wasTouching",
				              "!type": "+Object"
				            },
				            "reset": {
				              "!doc": "Phaser.Physics.Arcade.Body.reset",
				              "!type": "fn(x: +Number, y: +Number)"
				            },
				            "maxVelocity": {
				              "!doc": "Phaser.Physics.Arcade.Body.maxVelocity",
				              "!type": "+Phaser.Point"
				            },
				            "position": {
				              "!doc": "Phaser.Physics.Arcade.Body.position",
				              "!type": "+Phaser.Point"
				            },
				            "preUpdate": {
				              "!doc": "Phaser.Physics.Arcade.Body.preUpdate",
				              "!type": "fn()"
				            },
				            "skipQuadTree": {
				              "!doc": "Phaser.Physics.Arcade.Body.skipQuadTree",
				              "!type": "+Boolean"
				            },
				            "game": {
				              "!doc": "Phaser.Physics.Arcade.Body.game",
				              "!type": "+Phaser.Game"
				            },
				            "renderBodyInfo": {
				              "!doc": "Phaser.Physics.Arcade.Body.renderBodyInfo",
				              "!type": "fn(body: +Phaser.Physics.Arcade.Body, x: +Number, y: +Number, color: +String)"
				            },
				            "deltaZ": {
				              "!doc": "Phaser.Physics.Arcade.Body.deltaZ",
				              "!type": "fn() -> +Number"
				            },
				            "immovable": {
				              "!doc": "Phaser.Physics.Arcade.Body.immovable",
				              "!type": "+Boolean"
				            },
				            "deltaX": {
				              "!doc": "Phaser.Physics.Arcade.Body.deltaX",
				              "!type": "fn() -> +Number"
				            },
				            "deltaY": {
				              "!doc": "Phaser.Physics.Arcade.Body.deltaY",
				              "!type": "fn() -> +Number"
				            },
				            "mass": {
				              "!doc": "Phaser.Physics.Arcade.Body.mass",
				              "!type": "+Number"
				            },
				            "facing": {
				              "!doc": "Phaser.Physics.Arcade.Body.facing",
				              "!type": "+Number"
				            },
				            "allowRotation": {
				              "!doc": "Phaser.Physics.Arcade.Body.allowRotation",
				              "!type": "+Boolean"
				            },
				            "allowGravity": {
				              "!doc": "Phaser.Physics.Arcade.Body.allowGravity",
				              "!type": "+Boolean"
				            },
				            "speed": {
				              "!doc": "Phaser.Physics.Arcade.Body.speed",
				              "!type": "+Number"
				            },
				            "setSize": {
				              "!doc": "Phaser.Physics.Arcade.Body.setSize",
				              "!type": "fn(width: +Number, height: +Number, offsetX: +Number, offsetY: +Number)"
				            },
				            "blocked": {
				              "!doc": "Phaser.Physics.Arcade.Body.blocked",
				              "!type": "+Object"
				            },
				            "sprite": {
				              "!doc": "Phaser.Physics.Arcade.Body.sprite",
				              "!type": "+Phaser.Sprite"
				            },
				            "angle": {
				              "!doc": "Phaser.Physics.Arcade.Body.angle",
				              "!type": "+Number"
				            },
				            "checkWorldBounds": {
				              "!doc": "Phaser.Physics.Arcade.Body.checkWorldBounds",
				              "!type": "fn()"
				            },
				            "render": {
				              "!doc": "Phaser.Physics.Arcade.Body.render",
				              "!type": "fn(context: +Object, body: +Phaser.Physics.Arcade.Body, color: +String, filled: +Boolean)"
				            },
				            "embedded": {
				              "!doc": "Phaser.Physics.Arcade.Body.embedded",
				              "!type": "+Boolean"
				            },
				            "dirty": {
				              "!doc": "Phaser.Physics.Arcade.Body.dirty",
				              "!type": "+Boolean"
				            },
				            "deltaAbsY": {
				              "!doc": "Phaser.Physics.Arcade.Body.deltaAbsY",
				              "!type": "fn() -> +Number"
				            },
				            "deltaAbsX": {
				              "!doc": "Phaser.Physics.Arcade.Body.deltaAbsX",
				              "!type": "fn() -> +Number"
				            },
				            "overlapX": {
				              "!doc": "Phaser.Physics.Arcade.Body.overlapX",
				              "!type": "+Number"
				            },
				            "touching": {
				              "!doc": "Phaser.Physics.Arcade.Body.touching",
				              "!type": "+Object"
				            },
				            "overlapY": {
				              "!doc": "Phaser.Physics.Arcade.Body.overlapY",
				              "!type": "+Number"
				            },
				            "rotation": {
				              "!doc": "Phaser.Physics.Arcade.Body.rotation",
				              "!type": "+Number"
				            },
				            "center": {
				              "!doc": "Phaser.Physics.Arcade.Body.center",
				              "!type": "+Phaser.Point"
				            },
				            "onWall": {
				              "!doc": "Phaser.Physics.Arcade.Body.onWall",
				              "!type": "fn() -> +Boolean"
				            },
				            "velocity": {
				              "!doc": "Phaser.Physics.Arcade.Body.velocity",
				              "!type": "+Phaser.Point"
				            },
				            "right": {
				              "!doc": "Phaser.Physics.Arcade.Body.right",
				              "!type": "+Number"
				            },
				            "friction": {
				              "!doc": "Phaser.Physics.Arcade.Body.friction",
				              "!type": "+Phaser.Point"
				            },
				            "angularVelocity": {
				              "!doc": "Phaser.Physics.Arcade.Body.angularVelocity",
				              "!type": "+Number"
				            },
				            "updateBounds": {
				              "!doc": "Phaser.Physics.Arcade.Body.updateBounds",
				              "!type": "fn()"
				            },
				            "preRotation": {
				              "!doc": "Phaser.Physics.Arcade.Body.preRotation",
				              "!type": "+Number"
				            },
				            "gravity": {
				              "!doc": "Phaser.Physics.Arcade.Body.gravity",
				              "!type": "+Phaser.Point"
				            },
				            "moves": {
				              "!doc": "Phaser.Physics.Arcade.Body.moves",
				              "!type": "+Boolean"
				            },
				            "onFloor": {
				              "!doc": "Phaser.Physics.Arcade.Body.onFloor",
				              "!type": "fn() -> +Boolean"
				            },
				            "width": {
				              "!doc": "Phaser.Physics.Arcade.Body.width",
				              "!type": "+Number"
				            },
				            "x": {
				              "!doc": "Phaser.Physics.Arcade.Body.x",
				              "!type": "+Number"
				            },
				            "y": {
				              "!doc": "Phaser.Physics.Arcade.Body.y",
				              "!type": "+Number"
				            },
				            "hitTest": {
				              "!doc": "Phaser.Physics.Arcade.Body.hitTest",
				              "!type": "fn(x: +Number, y: +Number) -> +Boolean"
				            }
				          }
				        },
				        "prototype": {
				          "getObjectsAtLocation": {
				            "!doc": "Phaser.Physics.Arcade.getObjectsAtLocation",
				            "!type": "fn(x: +Number, y: +Number, group: +Phaser.Group, callback: +Function, callbackContext: +Object, callbackArg: +Object) -> +Array._PIXI.DisplayObject_"
				          },
				          "game": {
				            "!doc": "Phaser.Physics.Arcade.game",
				            "!type": "+Phaser.Game"
				          },
				          "intersects": {
				            "!doc": "Phaser.Physics.Arcade.intersects",
				            "!type": "fn(body1: +Phaser.Physics.Arcade.Body, body2: +Phaser.Physics.Arcade.Body) -> +Boolean"
				          },
				          "distanceBetween": {
				            "!doc": "Phaser.Physics.Arcade.distanceBetween",
				            "!type": "fn(source: +Object, target: +Object) -> +Number"
				          },
				          "quadTree": {
				            "!doc": "Phaser.Physics.Arcade.quadTree",
				            "!type": "+Phaser.QuadTree"
				          },
				          "moveToObject": {
				            "!doc": "Phaser.Physics.Arcade.moveToObject",
				            "!type": "fn(displayObject: +Object, destination: +Object, speed: +Number, maxTime: +Number) -> +Number"
				          },
				          "distanceToXY": {
				            "!doc": "Phaser.Physics.Arcade.distanceToXY",
				            "!type": "fn(displayObject: +Object, x: +Number, y: +Number) -> +Number"
				          },
				          "getObjectsUnderPointer": {
				            "!doc": "Phaser.Physics.Arcade.getObjectsUnderPointer",
				            "!type": "fn(pointer: +Phaser.Pointer, group: +Phaser.Group, callback: +Function, callbackContext: +Object) -> +Array._PIXI.DisplayObject_"
				          },
				          "accelerateToObject": {
				            "!doc": "Phaser.Physics.Arcade.accelerateToObject",
				            "!type": "fn(displayObject: +Object, destination: +Object, speed: +Number, xSpeedMax: +Number, ySpeedMax: +Number) -> +Number"
				          },
				          "angleBetween": {
				            "!doc": "Phaser.Physics.Arcade.angleBetween",
				            "!type": "fn(source: +Object, target: +Object) -> +Number"
				          },
				          "computeVelocity": {
				            "!doc": "Phaser.Physics.Arcade.computeVelocity",
				            "!type": "fn(axis: +Number, body: +Phaser.Physics.Arcade.Body, velocity: +Number, acceleration: +Number, drag: +Number, max: +Number) -> +Number"
				          },
				          "moveToPointer": {
				            "!doc": "Phaser.Physics.Arcade.moveToPointer",
				            "!type": "fn(displayObject: +Object, speed: +Number, pointer: +Phaser.Pointer, maxTime: +Number) -> +Number"
				          },
				          "forceX": {
				            "!doc": "Phaser.Physics.Arcade.forceX",
				            "!type": "+Boolean"
				          },
				          "sortDirection": {
				            "!doc": "Phaser.Physics.Arcade.sortDirection",
				            "!type": "+Number"
				          },
				          "enableBody": {
				            "!doc": "Phaser.Physics.Arcade.enableBody",
				            "!type": "fn(object: +Object)"
				          },
				          "enable": {
				            "!doc": "Phaser.Physics.Arcade.enable",
				            "!type": "fn(object: +Object, children: +Boolean)"
				          },
				          "OVERLAP_BIAS": {
				            "!doc": "Phaser.Physics.Arcade.OVERLAP_BIAS",
				            "!type": "+Number"
				          },
				          "angleToPointer": {
				            "!doc": "Phaser.Physics.Arcade.angleToPointer",
				            "!type": "fn(displayObject: +Object, pointer: +Phaser.Pointer) -> +Number"
				          },
				          "sortLeftRight": {
				            "!doc": "Phaser.Physics.Arcade.sortLeftRight",
				            "!type": "fn(a: +Phaser.Sprite, b: +Phaser.Sprite) -> +Number"
				          },
				          "maxObjects": {
				            "!doc": "Phaser.Physics.Arcade.maxObjects",
				            "!type": "+Number"
				          },
				          "accelerateToPointer": {
				            "!doc": "Phaser.Physics.Arcade.accelerateToPointer",
				            "!type": "fn(displayObject: +Object, pointer: +Phaser.Pointer, speed: +Number, xSpeedMax: +Number, ySpeedMax: +Number) -> +Number"
				          },
				          "distanceToPointer": {
				            "!doc": "Phaser.Physics.Arcade.distanceToPointer",
				            "!type": "fn(displayObject: +Object, pointer: +Phaser.Pointer) -> +Number"
				          },
				          "isPaused": {
				            "!doc": "Phaser.Physics.Arcade.isPaused",
				            "!type": "+Boolean"
				          },
				          "checkCollision": {
				            "!doc": "Phaser.Physics.Arcade.checkCollision",
				            "!type": "+Object"
				          },
				          "maxLevels": {
				            "!doc": "Phaser.Physics.Arcade.maxLevels",
				            "!type": "+Number"
				          },
				          "sortTopBottom": {
				            "!doc": "Phaser.Physics.Arcade.sortTopBottom",
				            "!type": "fn(a: +Phaser.Sprite, b: +Phaser.Sprite) -> +Number"
				          },
				          "velocityFromAngle": {
				            "!doc": "Phaser.Physics.Arcade.velocityFromAngle",
				            "!type": "fn(angle: +Number, speed: +Number, point: +Phaser.Point) -> +Phaser.Point"
				          },
				          "collide": {
				            "!doc": "Phaser.Physics.Arcade.collide",
				            "!type": "fn(object1: +Phaser.Sprite, object2: +Phaser.Sprite, collideCallback: +Function, processCallback: +Function, callbackContext: +Object) -> +Boolean"
				          },
				          "sort": {
				            "!doc": "Phaser.Physics.Arcade.sort",
				            "!type": "fn(group: +Phaser.Group, sortDirection: +Number)"
				          },
				          "moveToXY": {
				            "!doc": "Phaser.Physics.Arcade.moveToXY",
				            "!type": "fn(displayObject: +Object, x: +Number, y: +Number, speed: +Number, maxTime: +Number) -> +Number"
				          },
				          "sortRightLeft": {
				            "!doc": "Phaser.Physics.Arcade.sortRightLeft",
				            "!type": "fn(a: +Phaser.Sprite, b: +Phaser.Sprite) -> +Number"
				          },
				          "updateMotion": {
				            "!doc": "Phaser.Physics.Arcade.updateMotion",
				            "!type": "fn(The: +Phaser.Physics.Arcade.Body)"
				          },
				          "setBounds": {
				            "!doc": "Phaser.Physics.Arcade.setBounds",
				            "!type": "fn(x: +Number, y: +Number, width: +Number, height: +Number)"
				          },
				          "setBoundsToWorld": {
				            "!doc": "Phaser.Physics.Arcade.setBoundsToWorld",
				            "!type": "fn()"
				          },
				          "sortBottomTop": {
				            "!doc": "Phaser.Physics.Arcade.sortBottomTop",
				            "!type": "fn(a: +Phaser.Sprite, b: +Phaser.Sprite) -> +Number"
				          },
				          "accelerateToXY": {
				            "!doc": "Phaser.Physics.Arcade.accelerateToXY",
				            "!type": "fn(displayObject: +Object, x: +Number, y: +Number, speed: +Number, xSpeedMax: +Number, ySpeedMax: +Number) -> +Number"
				          },
				          "overlap": {
				            "!doc": "Phaser.Physics.Arcade.overlap",
				            "!type": "fn(object1: +Phaser.Sprite, object2: +Phaser.Sprite, overlapCallback: +Function, processCallback: +Function, callbackContext: +Object) -> +Boolean"
				          },
				          "gravity": {
				            "!doc": "Phaser.Physics.Arcade.gravity",
				            "!type": "+Phaser.Point"
				          },
				          "velocityFromRotation": {
				            "!doc": "Phaser.Physics.Arcade.velocityFromRotation",
				            "!type": "fn(rotation: +Number, speed: +Number, point: +Phaser.Point) -> +Phaser.Point"
				          },
				          "accelerationFromRotation": {
				            "!doc": "Phaser.Physics.Arcade.accelerationFromRotation",
				            "!type": "fn(rotation: +Number, speed: +Number, point: +Phaser.Point) -> +Phaser.Point"
				          },
				          "bounds": {
				            "!doc": "Phaser.Physics.Arcade.bounds",
				            "!type": "+Phaser.Rectangle"
				          },
				          "angleToXY": {
				            "!doc": "Phaser.Physics.Arcade.angleToXY",
				            "!type": "fn(displayObject: +Object, x: +Number, y: +Number) -> +Number"
				          },
				          "skipQuadTree": {
				            "!doc": "Phaser.Physics.Arcade.skipQuadTree",
				            "!type": "+Boolean"
				          }
				        }
				      }
				    },
				    "Graphics": {
				      "init": {
				        "!doc": "Phaser.Graphics.init",
				        "!type": "fn()"
				      },
				      "install": {
				        "!doc": "Phaser.Graphics.install",
				        "!type": "fn()"
				      },
				      "!doc": "Phaser.Graphics",
				      "!type": "fn(game: +Phaser.Game, x: +Number, y: +Number)",
				      "prototype": {
				        "parent": {
				          "!doc": "Phaser.Graphics.parent",
				          "!type": "+PIXI.DisplayObjectContainer"
				        },
				        "lifespan": {
				          "!doc": "Phaser.Graphics.lifespan",
				          "!type": "+Number"
				        },
				        "outOfBoundsKill": {
				          "!doc": "Phaser.Graphics.outOfBoundsKill",
				          "!type": "+Boolean"
				        },
				        "type": {
				          "!doc": "Phaser.Graphics.type",
				          "!type": "+Number"
				        },
				        "body": {
				          "!doc": "Phaser.Graphics.body",
				          "!type": "+Phaser.Physics.Arcade.Body"
				        },
				        "inCamera": {
				          "!doc": "Phaser.Graphics.inCamera",
				          "!type": "+Boolean"
				        },
				        "offsetX": {
				          "!doc": "Phaser.Graphics.offsetX",
				          "!type": "+Number"
				        },
				        "offsetY": {
				          "!doc": "Phaser.Graphics.offsetY",
				          "!type": "+Number"
				        },
				        "children": {
				          "!doc": "Phaser.Graphics.children",
				          "!type": "+Array_DisplayObject_"
				        },
				        "pivot": {
				          "!doc": "Phaser.Graphics.pivot",
				          "!type": "+Phaser.Point"
				        },
				        "revive": {
				          "!doc": "Phaser.Graphics.revive",
				          "!type": "fn(health: +Number) -> +PIXI.DisplayObject"
				        },
				        "fixedToCamera": {
				          "!doc": "Phaser.Graphics.fixedToCamera",
				          "!type": "+Boolean"
				        },
				        "renderOrderID": {
				          "!doc": "Phaser.Graphics.renderOrderID",
				          "!type": "+Number"
				        },
				        "events": {
				          "!doc": "Phaser.Graphics.events",
				          "!type": "+Phaser.Events"
				        },
				        "physicsType": {
				          "!doc": "Phaser.Graphics.physicsType",
				          "!type": "+Number"
				        },
				        "previousRotation": {
				          "!doc": "Phaser.Graphics.previousRotation",
				          "!type": "+Number"
				        },
				        "visible": {
				          "!doc": "Phaser.Graphics.visible",
				          "!type": "+Boolean"
				        },
				        "postUpdate": {
				          "!doc": "Phaser.Graphics.postUpdate",
				          "!type": "fn()"
				        },
				        "bottom": {
				          "!doc": "Phaser.Graphics.bottom",
				          "!type": "+Number"
				        },
				        "cameraOffset": {
				          "!doc": "Phaser.Graphics.cameraOffset",
				          "!type": "+Phaser.Point"
				        },
				        "destroy": {
				          "!doc": "Phaser.Graphics.destroy",
				          "!type": "fn(destroyChildren: +Boolean)"
				        },
				        "input": {
				          "!doc": "Phaser.Graphics.input",
				          "!type": "+Phaser.InputHandler"
				        },
				        "worldPosition": {
				          "!doc": "Phaser.Graphics.worldPosition",
				          "!type": "+Phaser.Point"
				        },
				        "left": {
				          "!doc": "Phaser.Graphics.left",
				          "!type": "+Number"
				        },
				        "name": {
				          "!doc": "Phaser.Graphics.name",
				          "!type": "+String"
				        },
				        "reset": {
				          "!doc": "Phaser.Graphics.reset",
				          "!type": "fn(x: +Number, y: +Number, health: +Number) -> +PIXI.DisplayObject"
				        },
				        "position": {
				          "!doc": "Phaser.Graphics.position",
				          "!type": "+Phaser.Point"
				        },
				        "preUpdate": {
				          "!doc": "Phaser.Graphics.preUpdate",
				          "!type": "fn()"
				        },
				        "worldRotation": {
				          "!doc": "Phaser.Graphics.worldRotation",
				          "!type": "+Number"
				        },
				        "filterArea": {
				          "!doc": "Phaser.Graphics.filterArea",
				          "!type": "+Phaser.Rectangle"
				        },
				        "game": {
				          "!doc": "Phaser.Graphics.game",
				          "!type": "+Phaser.Game"
				        },
				        "components": {
				          "!doc": "Phaser.Graphics.components",
				          "!type": "+Object"
				        },
				        "renderable": {
				          "!doc": "Phaser.Graphics.renderable",
				          "!type": "+Boolean"
				        },
				        "worldScale": {
				          "!doc": "Phaser.Graphics.worldScale",
				          "!type": "+Phaser.Point"
				        },
				        "alive": {
				          "!doc": "Phaser.Graphics.alive",
				          "!type": "+Boolean"
				        },
				        "update": {
				          "!doc": "Phaser.Graphics.update",
				          "!type": "fn()"
				        },
				        "scale": {
				          "!doc": "Phaser.Graphics.scale",
				          "!type": "+Phaser.Point"
				        },
				        "inWorld": {
				          "!doc": "Phaser.Graphics.inWorld",
				          "!type": "+Boolean"
				        },
				        "inputEnabled": {
				          "!doc": "Phaser.Graphics.inputEnabled",
				          "!type": "+Boolean"
				        },
				        "worldAlpha": {
				          "!doc": "Phaser.Graphics.worldAlpha",
				          "!type": "+Number"
				        },
				        "world": {
				          "!doc": "Phaser.Graphics.world",
				          "!type": "+Phaser.Point"
				        },
				        "top": {
				          "!doc": "Phaser.Graphics.top",
				          "!type": "+Number"
				        },
				        "animations": {
				          "!doc": "Phaser.Graphics.animations",
				          "!type": "+Phaser.AnimationManager"
				        },
				        "alpha": {
				          "!doc": "Phaser.Graphics.alpha",
				          "!type": "+Number"
				        },
				        "angle": {
				          "!doc": "Phaser.Graphics.angle",
				          "!type": "+Number"
				        },
				        "checkWorldBounds": {
				          "!doc": "Phaser.Graphics.checkWorldBounds",
				          "!type": "+Boolean"
				        },
				        "key": {
				          "!doc": "Phaser.Graphics.key",
				          "!type": "+String"
				        },
				        "debug": {
				          "!doc": "Phaser.Graphics.debug",
				          "!type": "+Boolean"
				        },
				        "rotation": {
				          "!doc": "Phaser.Graphics.rotation",
				          "!type": "+Number"
				        },
				        "destroyPhase": {
				          "!doc": "Phaser.Graphics.destroyPhase",
				          "!type": "+Boolean"
				        },
				        "right": {
				          "!doc": "Phaser.Graphics.right",
				          "!type": "+Number"
				        },
				        "kill": {
				          "!doc": "Phaser.Graphics.kill",
				          "!type": "fn() -> +PIXI.DisplayObject"
				        },
				        "previousPosition": {
				          "!doc": "Phaser.Graphics.previousPosition",
				          "!type": "+Phaser.Point"
				        },
				        "pendingDestroy": {
				          "!doc": "Phaser.Graphics.pendingDestroy",
				          "!type": "+Boolean"
				        },
				        "stage": {
				          "!doc": "Phaser.Graphics.stage",
				          "!type": "+Phaser.Stage"
				        },
				        "hitArea": {
				          "!doc": "Phaser.Graphics.hitArea",
				          "!type": "+Phaser.Rectangle"
				        },
				        "autoCull": {
				          "!doc": "Phaser.Graphics.autoCull",
				          "!type": "+Boolean"
				        },
				        "x": {
				          "!doc": "Phaser.Graphics.x",
				          "!type": "+Number"
				        },
				        "exists": {
				          "!doc": "Phaser.Graphics.exists",
				          "!type": "+Boolean"
				        },
				        "y": {
				          "!doc": "Phaser.Graphics.y",
				          "!type": "+Number"
				        },
				        "z": {
				          "!doc": "Phaser.Graphics.z",
				          "!type": "+Number"
				        },
				        "fresh": {
				          "!doc": "Phaser.Graphics.fresh",
				          "!type": "+Boolean"
				        }
				      }
				    },
				    "Utils": {
				      "extend": {
				        "!doc": "Phaser.Utils.extend",
				        "!type": "fn(deep: +Boolean, target: +Object) -> +Object"
				      },
				      "mixin": {
				        "!doc": "Phaser.Utils.mixin",
				        "!type": "fn(from: +Object, to: +Object) -> +Object"
				      },
				      "pad": {
				        "!doc": "Phaser.Utils.pad",
				        "!type": "fn(str: +String, len: +Number, pad: +String, dir: +Number) -> +String"
				      },
				      "getProperty": {
				        "!doc": "Phaser.Utils.getProperty",
				        "!type": "fn(obj: +Object, prop: +String) -> +any"
				      },
				      "isPlainObject": {
				        "!doc": "Phaser.Utils.isPlainObject",
				        "!type": "fn(obj: +Object) -> +Boolean"
				      },
				      "!doc": "Phaser.Utils",
				      "setProperty": {
				        "!doc": "Phaser.Utils.setProperty",
				        "!type": "fn(obj: +Object, prop: +String) -> +Object"
				      },
				      "!type": "fn()",
				      "prototype": {"randomChoice": {
				        "!doc": "Phaser.Utils.randomChoice",
				        "!type": "fn(choice1: +Object, choice2: +Object) -> +Object"
				      }},
				      "Debug": {
				        "!doc": "Phaser.Utils.Debug",
				        "!type": "fn(game: +Phaser.Game)",
				        "prototype": {
				          "ropeSegments": {
				            "!doc": "Phaser.Utils.Debug.ropeSegments",
				            "!type": "fn(rope: +Phaser.Rope, color: +String, filled: +Boolean)"
				          },
				          "game": {
				            "!doc": "Phaser.Utils.Debug.game",
				            "!type": "+Phaser.Game"
				          },
				          "line": {
				            "!doc": "Phaser.Utils.Debug.line",
				            "!type": "fn()"
				          },
				          "currentAlpha": {
				            "!doc": "Phaser.Utils.Debug.currentAlpha",
				            "!type": "+Number"
				          },
				          "spriteInputInfo": {
				            "!doc": "Phaser.Utils.Debug.spriteInputInfo",
				            "!type": "fn(sprite: +Phaser.Sprite, x: +Number, y: +Number, color: +String)"
				          },
				          "bodyInfo": {
				            "!doc": "Phaser.Utils.Debug.bodyInfo",
				            "!type": "fn(sprite: +Phaser.Sprite, x: +Number, y: +Number, color: +String)"
				          },
				          "quadTree": {
				            "!doc": "Phaser.Utils.Debug.quadTree",
				            "!type": "fn(quadtree: +Phaser.QuadTree, color: +String)"
				          },
				          "currentY": {
				            "!doc": "Phaser.Utils.Debug.currentY",
				            "!type": "+Number"
				          },
				          "geom": {
				            "!doc": "Phaser.Utils.Debug.geom",
				            "!type": "fn(object: +Phaser.Rectangle, color: +String, filled: +Boolean, forceType: +Number)"
				          },
				          "body": {
				            "!doc": "Phaser.Utils.Debug.body",
				            "!type": "fn(sprite: +Phaser.Sprite, color: +String, filled: +Boolean)"
				          },
				          "box2dBody": {
				            "!doc": "Phaser.Utils.Debug.box2dBody",
				            "!type": "fn(sprite: +Phaser.Sprite, color: +String)"
				          },
				          "renderShadow": {
				            "!doc": "Phaser.Utils.Debug.renderShadow",
				            "!type": "+Boolean"
				          },
				          "timer": {
				            "!doc": "Phaser.Utils.Debug.timer",
				            "!type": "fn(timer: +Phaser.Timer, x: +Number, y: +Number, color: +String)"
				          },
				          "spriteInfo": {
				            "!doc": "Phaser.Utils.Debug.spriteInfo",
				            "!type": "fn(sprite: +Phaser.Sprite, x: +Number, y: +Number, color: +String)"
				          },
				          "lineInfo": {
				            "!doc": "Phaser.Utils.Debug.lineInfo",
				            "!type": "fn(line: +Phaser.Line, x: +Number, y: +Number, color: +String)"
				          },
				          "sprite": {
				            "!doc": "Phaser.Utils.Debug.sprite",
				            "!type": "+Phaser.Image"
				          },
				          "context": {
				            "!doc": "Phaser.Utils.Debug.context",
				            "!type": "+CanvasRenderingContext2D"
				          },
				          "columnWidth": {
				            "!doc": "Phaser.Utils.Debug.columnWidth",
				            "!type": "+Number"
				          },
				          "text": {
				            "!doc": "Phaser.Utils.Debug.text",
				            "!type": "fn(text: +String, x: +Number, y: +Number, color: +String, font: +String)"
				          },
				          "boot": {
				            "!doc": "Phaser.Utils.Debug.boot",
				            "!type": "fn()"
				          },
				          "pixel": {
				            "!doc": "Phaser.Utils.Debug.pixel",
				            "!type": "fn(x: +Number, y: +Number, color: +String, size: +Number)"
				          },
				          "key": {
				            "!doc": "Phaser.Utils.Debug.key",
				            "!type": "fn(key: +Phaser.Key, x: +Number, y: +Number, color: +String)"
				          },
				          "dirty": {
				            "!doc": "Phaser.Utils.Debug.dirty",
				            "!type": "+Boolean"
				          },
				          "inputInfo": {
				            "!doc": "Phaser.Utils.Debug.inputInfo",
				            "!type": "fn(x: +Number, y: +Number, color: +String)"
				          },
				          "pointer": {
				            "!doc": "Phaser.Utils.Debug.pointer",
				            "!type": "fn(pointer: +Phaser.Pointer, hideIfUp: +Boolean, downColor: +String, upColor: +String, color: +String)"
				          },
				          "canvas": {
				            "!doc": "Phaser.Utils.Debug.canvas",
				            "!type": "+HTMLCanvasElement"
				          },
				          "box2dWorld": {
				            "!doc": "Phaser.Utils.Debug.box2dWorld",
				            "!type": "fn()"
				          },
				          "spriteCoords": {
				            "!doc": "Phaser.Utils.Debug.spriteCoords",
				            "!type": "fn(sprite: +Phaser.Sprite, x: +Number, y: +Number, color: +String)"
				          },
				          "start": {
				            "!doc": "Phaser.Utils.Debug.start",
				            "!type": "fn(x: +Number, y: +Number, color: +String, columnWidth: +Number)"
				          },
				          "destroy": {
				            "!doc": "Phaser.Utils.Debug.destroy",
				            "!type": "fn()"
				          },
				          "spriteBounds": {
				            "!doc": "Phaser.Utils.Debug.spriteBounds",
				            "!type": "fn(sprite: +Phaser.Sprite, color: +String, filled: +Boolean)"
				          },
				          "soundInfo": {
				            "!doc": "Phaser.Utils.Debug.soundInfo",
				            "!type": "fn(sound: +Phaser.Sound, x: +Number, y: +Number, color: +String)"
				          },
				          "stop": {
				            "!doc": "Phaser.Utils.Debug.stop",
				            "!type": "fn()"
				          },
				          "currentX": {
				            "!doc": "Phaser.Utils.Debug.currentX",
				            "!type": "+Number"
				          },
				          "bmd": {
				            "!doc": "Phaser.Utils.Debug.bmd",
				            "!type": "+Phaser.BitmapData"
				          },
				          "reset": {
				            "!doc": "Phaser.Utils.Debug.reset",
				            "!type": "fn()"
				          },
				          "lineHeight": {
				            "!doc": "Phaser.Utils.Debug.lineHeight",
				            "!type": "+Number"
				          },
				          "preUpdate": {
				            "!doc": "Phaser.Utils.Debug.preUpdate",
				            "!type": "fn()"
				          },
				          "cameraInfo": {
				            "!doc": "Phaser.Utils.Debug.cameraInfo",
				            "!type": "fn(camera: +Phaser.Camera, x: +Number, y: +Number, color: +String)"
				          },
				          "font": {
				            "!doc": "Phaser.Utils.Debug.font",
				            "!type": "+String"
				          }
				        }
				      },
				      "mixinPrototype": {
				        "!doc": "Phaser.Utils.mixinPrototype",
				        "!type": "fn(target: +Object, mixin: +Object, replace: +Boolean)"
				      },
				      "parseDimension": {
				        "!doc": "Phaser.Utils.parseDimension",
				        "!type": "fn(size: +String, dimension: +Number) -> +Number"
				      }
				    },
				    "BitmapData": {
				      "!doc": "Phaser.BitmapData",
				      "!type": "fn(game: +Phaser.Game, key: +String, width: +Number, height: +Number)",
				      "prototype": {
				        "generateTexture": {
				          "!doc": "Phaser.BitmapData.generateTexture",
				          "!type": "fn(key: +String) -> +PIXI.Texture"
				        },
				        "blendSaturation": {
				          "!doc": "Phaser.BitmapData.blendSaturation",
				          "!type": "fn() -> +Phaser.BitmapData"
				        },
				        "shadow": {
				          "!doc": "Phaser.BitmapData.shadow",
				          "!type": "fn(color: +String, blur: +Number, x: +Number, y: +Number) -> +Phaser.BitmapData"
				        },
				        "textureLine": {
				          "!doc": "Phaser.BitmapData.textureLine",
				          "!type": "fn(line: +Phaser.Line, image: +String, repeat: +String) -> +Phaser.BitmapData"
				        },
				        "data": {
				          "!doc": "Phaser.BitmapData.data",
				          "!type": "+Uint8ClampedArray"
				        },
				        "imageData": {
				          "!doc": "Phaser.BitmapData.imageData",
				          "!type": "+ImageData"
				        },
				        "type": {
				          "!doc": "Phaser.BitmapData.type",
				          "!type": "+Number"
				        },
				        "blendSourceOut": {
				          "!doc": "Phaser.BitmapData.blendSourceOut",
				          "!type": "fn() -> +Phaser.BitmapData"
				        },
				        "blendHue": {
				          "!doc": "Phaser.BitmapData.blendHue",
				          "!type": "fn() -> +Phaser.BitmapData"
				        },
				        "getPixelRGB": {
				          "!doc": "Phaser.BitmapData.getPixelRGB",
				          "!type": "fn(x: +Number, y: +Number, out: +Object, hsl: +Boolean, hsv: +Boolean) -> +Object"
				        },
				        "getBounds": {
				          "!doc": "Phaser.BitmapData.getBounds",
				          "!type": "fn(rect: +Phaser.Rectangle) -> +Phaser.Rectangle"
				        },
				        "addToWorld": {
				          "!doc": "Phaser.BitmapData.addToWorld",
				          "!type": "fn(x: +Number, y: +Number, anchorX: +Number, anchorY: +Number, scaleX: +Number, scaleY: +Number) -> +Phaser.Image"
				        },
				        "moveV": {
				          "!doc": "Phaser.BitmapData.moveV",
				          "!type": "fn(distance: +Number, wrap: +Boolean) -> +Phaser.BitmapData"
				        },
				        "textureFrame": {
				          "!doc": "Phaser.BitmapData.textureFrame",
				          "!type": "+Phaser.Frame"
				        },
				        "getPixels": {
				          "!doc": "Phaser.BitmapData.getPixels",
				          "!type": "fn(rect: +Phaser.Rectangle) -> +ImageData"
				        },
				        "blendLighten": {
				          "!doc": "Phaser.BitmapData.blendLighten",
				          "!type": "fn() -> +Phaser.BitmapData"
				        },
				        "context": {
				          "!doc": "Phaser.BitmapData.context",
				          "!type": "+CanvasRenderingContext2D"
				        },
				        "text": {
				          "!doc": "Phaser.BitmapData.text",
				          "!type": "fn(text: +String, x: +Number, y: +Number, font: +String, color: +String, shadow: +Boolean) -> +Phaser.BitmapData"
				        },
				        "blendSourceIn": {
				          "!doc": "Phaser.BitmapData.blendSourceIn",
				          "!type": "fn() -> +Phaser.BitmapData"
				        },
				        "blendScreen": {
				          "!doc": "Phaser.BitmapData.blendScreen",
				          "!type": "fn() -> +Phaser.BitmapData"
				        },
				        "blendDarken": {
				          "!doc": "Phaser.BitmapData.blendDarken",
				          "!type": "fn() -> +Phaser.BitmapData"
				        },
				        "height": {
				          "!doc": "Phaser.BitmapData.height",
				          "!type": "+Number"
				        },
				        "add": {
				          "!doc": "Phaser.BitmapData.add",
				          "!type": "fn(object: +Phaser.Sprite) -> +Phaser.BitmapData"
				        },
				        "blendXor": {
				          "!doc": "Phaser.BitmapData.blendXor",
				          "!type": "fn() -> +Phaser.BitmapData"
				        },
				        "baseTexture": {
				          "!doc": "Phaser.BitmapData.baseTexture",
				          "!type": "+PIXI.BaseTexture"
				        },
				        "blendSoftLight": {
				          "!doc": "Phaser.BitmapData.blendSoftLight",
				          "!type": "fn() -> +Phaser.BitmapData"
				        },
				        "canvas": {
				          "!doc": "Phaser.BitmapData.canvas",
				          "!type": "+HTMLCanvasElement"
				        },
				        "moveH": {
				          "!doc": "Phaser.BitmapData.moveH",
				          "!type": "fn(distance: +Number, wrap: +Boolean) -> +Phaser.BitmapData"
				        },
				        "blendLuminosity": {
				          "!doc": "Phaser.BitmapData.blendLuminosity",
				          "!type": "fn() -> +Phaser.BitmapData"
				        },
				        "blendDestinationAtop": {
				          "!doc": "Phaser.BitmapData.blendDestinationAtop",
				          "!type": "fn() -> +Phaser.BitmapData"
				        },
				        "ctx": {
				          "!doc": "Phaser.BitmapData.ctx",
				          "!type": "+CanvasRenderingContext2D"
				        },
				        "getPixel": {
				          "!doc": "Phaser.BitmapData.getPixel",
				          "!type": "fn(x: +Number, y: +Number, out: +Object) -> +Object"
				        },
				        "destroy": {
				          "!doc": "Phaser.BitmapData.destroy",
				          "!type": "fn()"
				        },
				        "cls": {
				          "!doc": "Phaser.BitmapData.cls",
				          "!type": "fn()"
				        },
				        "fill": {
				          "!doc": "Phaser.BitmapData.fill",
				          "!type": "fn(r: +Number, g: +Number, b: +Number, a: +Number) -> +Phaser.BitmapData"
				        },
				        "blendDestinationOver": {
				          "!doc": "Phaser.BitmapData.blendDestinationOver",
				          "!type": "fn() -> +Phaser.BitmapData"
				        },
				        "blendDifference": {
				          "!doc": "Phaser.BitmapData.blendDifference",
				          "!type": "fn() -> +Phaser.BitmapData"
				        },
				        "processPixel": {
				          "!doc": "Phaser.BitmapData.processPixel",
				          "!type": "fn(callback: +Function, callbackContext: +Object, x: +Number, y: +Number, width: +Number, height: +Number) -> +Phaser.BitmapData"
				        },
				        "copyRect": {
				          "!doc": "Phaser.BitmapData.copyRect",
				          "!type": "fn(source: +Phaser.Sprite, area: +Phaser.Rectangle, x: +Number, y: +Number, alpha: +Number, blendMode: +String, roundPx: +Boolean) -> +Phaser.BitmapData"
				        },
				        "extract": {
				          "!doc": "Phaser.BitmapData.extract",
				          "!type": "fn(destination: +Phaser.BitmapData, r: +Number, g: +Number, b: +Number, a: +Number, resize: +Boolean, r2: +Number, g2: +Number, b2: +Number) -> +Phaser.BitmapData"
				        },
				        "pixels": {
				          "!doc": "Phaser.BitmapData.pixels",
				          "!type": "+Uint32Array"
				        },
				        "blendColorBurn": {
				          "!doc": "Phaser.BitmapData.blendColorBurn",
				          "!type": "fn() -> +Phaser.BitmapData"
				        },
				        "blendSourceAtop": {
				          "!doc": "Phaser.BitmapData.blendSourceAtop",
				          "!type": "fn() -> +Phaser.BitmapData"
				        },
				        "disableTextureUpload": {
				          "!doc": "Phaser.BitmapData.disableTextureUpload",
				          "!type": "+Boolean"
				        },
				        "circle": {
				          "!doc": "Phaser.BitmapData.circle",
				          "!type": "fn(x: +Number, y: +Number, radius: +Number, fillStyle: +String) -> +Phaser.BitmapData"
				        },
				        "blendSourceOver": {
				          "!doc": "Phaser.BitmapData.blendSourceOver",
				          "!type": "fn() -> +Phaser.BitmapData"
				        },
				        "blendOverlay": {
				          "!doc": "Phaser.BitmapData.blendOverlay",
				          "!type": "fn() -> +Phaser.BitmapData"
				        },
				        "game": {
				          "!doc": "Phaser.BitmapData.game",
				          "!type": "+Phaser.Game"
				        },
				        "setPixel": {
				          "!doc": "Phaser.BitmapData.setPixel",
				          "!type": "fn(x: +Number, y: +Number, red: +Number, green: +Number, blue: +Number, immediate: +Boolean) -> +Phaser.BitmapData"
				        },
				        "drawFull": {
				          "!doc": "Phaser.BitmapData.drawFull",
				          "!type": "fn(parent: +Phaser.World, blendMode: +String, roundPx: +Boolean) -> +Phaser.BitmapData"
				        },
				        "line": {
				          "!doc": "Phaser.BitmapData.line",
				          "!type": "fn(x1: +Number, y1: +Number, x2: +Number, y2: +Number, color: +String, width: +Number) -> +Phaser.BitmapData"
				        },
				        "update": {
				          "!doc": "Phaser.BitmapData.update",
				          "!type": "fn(x: +Number, y: +Number, width: +Number, height: +Number) -> +Phaser.BitmapData"
				        },
				        "setPixel32": {
				          "!doc": "Phaser.BitmapData.setPixel32",
				          "!type": "fn(x: +Number, y: +Number, red: +Number, green: +Number, blue: +Number, alpha: +Number, immediate: +Boolean) -> +Phaser.BitmapData"
				        },
				        "blendDestinationOut": {
				          "!doc": "Phaser.BitmapData.blendDestinationOut",
				          "!type": "fn() -> +Phaser.BitmapData"
				        },
				        "blendExclusion": {
				          "!doc": "Phaser.BitmapData.blendExclusion",
				          "!type": "fn() -> +Phaser.BitmapData"
				        },
				        "blendHardLight": {
				          "!doc": "Phaser.BitmapData.blendHardLight",
				          "!type": "fn() -> +Phaser.BitmapData"
				        },
				        "getPixel32": {
				          "!doc": "Phaser.BitmapData.getPixel32",
				          "!type": "fn(x: +Number, y: +Number) -> +Number"
				        },
				        "rect": {
				          "!doc": "Phaser.BitmapData.rect",
				          "!type": "fn(x: +Number, y: +Number, width: +Number, height: +Number, fillStyle: +String) -> +Phaser.BitmapData"
				        },
				        "load": {
				          "!doc": "Phaser.BitmapData.load",
				          "!type": "fn(source: +Phaser.Sprite) -> +Phaser.BitmapData"
				        },
				        "copy": {
				          "!doc": "Phaser.BitmapData.copy",
				          "!type": "fn(source: +Phaser.Sprite, x: +Number, y: +Number, width: +Number, height: +Number, tx: +Number, ty: +Number, newWidth: +Number, newHeight: +Number, rotate: +Number, anchorX: +Number, anchorY: +Number, scaleX: +Number, scaleY: +Number, alpha: +Number, blendMode: +String, roundPx: +Boolean) -> +Phaser.BitmapData"
				        },
				        "blendColor": {
				          "!doc": "Phaser.BitmapData.blendColor",
				          "!type": "fn() -> +Phaser.BitmapData"
				        },
				        "render": {
				          "!doc": "Phaser.BitmapData.render",
				          "!type": "fn() -> +Phaser.BitmapData"
				        },
				        "key": {
				          "!doc": "Phaser.BitmapData.key",
				          "!type": "+String"
				        },
				        "blendDestinationIn": {
				          "!doc": "Phaser.BitmapData.blendDestinationIn",
				          "!type": "fn() -> +Phaser.BitmapData"
				        },
				        "dirty": {
				          "!doc": "Phaser.BitmapData.dirty",
				          "!type": "+Boolean"
				        },
				        "move": {
				          "!doc": "Phaser.BitmapData.move",
				          "!type": "fn(x: +Number, y: +Number, wrap: +Boolean) -> +Phaser.BitmapData"
				        },
				        "blendMultiply": {
				          "!doc": "Phaser.BitmapData.blendMultiply",
				          "!type": "fn() -> +Phaser.BitmapData"
				        },
				        "blendReset": {
				          "!doc": "Phaser.BitmapData.blendReset",
				          "!type": "fn() -> +Phaser.BitmapData"
				        },
				        "texture": {
				          "!doc": "Phaser.BitmapData.texture",
				          "!type": "+PIXI.Texture"
				        },
				        "clear": {
				          "!doc": "Phaser.BitmapData.clear",
				          "!type": "fn(x: +Number, y: +Number, width: +Number, height: +Number) -> +Phaser.BitmapData"
				        },
				        "draw": {
				          "!doc": "Phaser.BitmapData.draw",
				          "!type": "fn(source: +Phaser.Sprite, x: +Number, y: +Number, width: +Number, height: +Number, blendMode: +String, roundPx: +Boolean) -> +Phaser.BitmapData"
				        },
				        "shiftHSL": {
				          "!doc": "Phaser.BitmapData.shiftHSL",
				          "!type": "fn(h: +Number, s: +Number, l: +Number, region: +Phaser.Rectangle) -> +Phaser.BitmapData"
				        },
				        "alphaMask": {
				          "!doc": "Phaser.BitmapData.alphaMask",
				          "!type": "fn(source: +Phaser.Sprite, mask: +Phaser.Sprite, sourceRect: +Phaser.Rectangle, maskRect: +Phaser.Rectangle) -> +Phaser.BitmapData"
				        },
				        "drawGroup": {
				          "!doc": "Phaser.BitmapData.drawGroup",
				          "!type": "fn(group: +Phaser.Group, blendMode: +String, roundPx: +Boolean) -> +Phaser.BitmapData"
				        },
				        "processPixelRGB": {
				          "!doc": "Phaser.BitmapData.processPixelRGB",
				          "!type": "fn(callback: +Function, callbackContext: +Object, x: +Number, y: +Number, width: +Number, height: +Number) -> +Phaser.BitmapData"
				        },
				        "replaceRGB": {
				          "!doc": "Phaser.BitmapData.replaceRGB",
				          "!type": "fn(r1: +Number, g1: +Number, b1: +Number, a1: +Number, r2: +Number, g2: +Number, b2: +Number, a2: +Number, region: +Phaser.Rectangle) -> +Phaser.BitmapData"
				        },
				        "width": {
				          "!doc": "Phaser.BitmapData.width",
				          "!type": "+Number"
				        },
				        "resize": {
				          "!doc": "Phaser.BitmapData.resize",
				          "!type": "fn() -> +Phaser.BitmapData"
				        },
				        "blendAdd": {
				          "!doc": "Phaser.BitmapData.blendAdd",
				          "!type": "fn() -> +Phaser.BitmapData"
				        },
				        "blendColorDodge": {
				          "!doc": "Phaser.BitmapData.blendColorDodge",
				          "!type": "fn() -> +Phaser.BitmapData"
				        },
				        "setHSL": {
				          "!doc": "Phaser.BitmapData.setHSL",
				          "!type": "fn(h: +Number, s: +Number, l: +Number, region: +Phaser.Rectangle) -> +Phaser.BitmapData"
				        },
				        "getFirstPixel": {
				          "!doc": "Phaser.BitmapData.getFirstPixel",
				          "!type": "fn(direction: +Number) -> +Object"
				        }
				      },
				      "getTransform": {
				        "!doc": "Phaser.BitmapData.getTransform",
				        "!type": "fn(translateX: +Number, translateY: +Number, scaleX: +Number, scaleY: +Number, skewX: +Number, skewY: +Number) -> +Object"
				      }
				    },
				    "VERSION": {
				      "!doc": "Phaser.VERSION",
				      "!type": "+String"
				    },
				    "Animation": {
				      "generateFrameNames": {
				        "!doc": "Phaser.Animation.generateFrameNames",
				        "!type": "fn(prefix: +String, start: +Number, stop: +Number, suffix: +String, zeroPad: +Number) -> +Array._string_"
				      },
				      "!doc": "Phaser.Animation",
				      "!type": "fn(game: +Phaser.Game, parent: +Phaser.Sprite, name: +String, frameData: +Phaser.FrameData, frames: +Array._number_, frameRate: +Number, loop: +Boolean, loop: +Boolean)",
				      "prototype": {
				        "play": {
				          "!doc": "Phaser.Animation.play",
				          "!type": "fn(frameRate: +Number, loop: +Boolean, killOnComplete: +Boolean) -> +Phaser.Animation"
				        },
				        "next": {
				          "!doc": "Phaser.Animation.next",
				          "!type": "fn(quantity: +Number)"
				        },
				        "game": {
				          "!doc": "Phaser.Animation.game",
				          "!type": "+Phaser.Game"
				        },
				        "paused": {
				          "!doc": "Phaser.Animation.paused",
				          "!type": "+Boolean"
				        },
				        "update": {
				          "!doc": "Phaser.Animation.update",
				          "!type": "fn()"
				        },
				        "onPause": {
				          "!doc": "Phaser.Animation.onPause",
				          "!type": "fn()"
				        },
				        "speed": {
				          "!doc": "Phaser.Animation.speed",
				          "!type": "+Number"
				        },
				        "loopCount": {
				          "!doc": "Phaser.Animation.loopCount",
				          "!type": "+Number"
				        },
				        "onStart": {
				          "!doc": "Phaser.Animation.onStart",
				          "!type": "+Phaser.Signal"
				        },
				        "frameTotal": {
				          "!doc": "Phaser.Animation.frameTotal",
				          "!type": "+Number"
				        },
				        "setFrame": {
				          "!doc": "Phaser.Animation.setFrame",
				          "!type": "fn(frameId: +String, useLocalFrameIndex: +Boolean)"
				        },
				        "loop": {
				          "!doc": "Phaser.Animation.loop",
				          "!type": "+Boolean"
				        },
				        "currentFrame": {
				          "!doc": "Phaser.Animation.currentFrame",
				          "!type": "+Phaser.Frame"
				        },
				        "isPaused": {
				          "!doc": "Phaser.Animation.isPaused",
				          "!type": "+Boolean"
				        },
				        "isPlaying": {
				          "!doc": "Phaser.Animation.isPlaying",
				          "!type": "+Boolean"
				        },
				        "previous": {
				          "!doc": "Phaser.Animation.previous",
				          "!type": "fn(quantity: +Number)"
				        },
				        "restart": {
				          "!doc": "Phaser.Animation.restart",
				          "!type": "fn()"
				        },
				        "onComplete": {
				          "!doc": "Phaser.Animation.onComplete",
				          "!type": "+Phaser.Signal"
				        },
				        "destroy": {
				          "!doc": "Phaser.Animation.destroy",
				          "!type": "fn()"
				        },
				        "isFinished": {
				          "!doc": "Phaser.Animation.isFinished",
				          "!type": "+Boolean"
				        },
				        "onResume": {
				          "!doc": "Phaser.Animation.onResume",
				          "!type": "fn()"
				        },
				        "delay": {
				          "!doc": "Phaser.Animation.delay",
				          "!type": "+Number"
				        },
				        "stop": {
				          "!doc": "Phaser.Animation.stop",
				          "!type": "fn(resetFrame: +Boolean, dispatchComplete: +Boolean)"
				        },
				        "enableUpdate": {
				          "!doc": "Phaser.Animation.enableUpdate",
				          "!type": "+Boolean"
				        },
				        "name": {
				          "!doc": "Phaser.Animation.name",
				          "!type": "+String"
				        },
				        "killOnComplete": {
				          "!doc": "Phaser.Animation.killOnComplete",
				          "!type": "+Boolean"
				        },
				        "complete": {
				          "!doc": "Phaser.Animation.complete",
				          "!type": "fn()"
				        },
				        "onUpdate": {
				          "!doc": "Phaser.Animation.onUpdate",
				          "!type": "+Phaser.Signal"
				        },
				        "updateFrameData": {
				          "!doc": "Phaser.Animation.updateFrameData",
				          "!type": "fn(frameData: +Phaser.FrameData)"
				        },
				        "onLoop": {
				          "!doc": "Phaser.Animation.onLoop",
				          "!type": "+Phaser.Signal"
				        },
				        "frame": {
				          "!doc": "Phaser.Animation.frame",
				          "!type": "+Number"
				        }
				      }
				    },
				    "RenderTexture": {
				      "!doc": "Phaser.RenderTexture",
				      "!type": "fn(game: +Phaser.Game, key: +String, width: +Number, height: +Number, key: +String, scaleMode: +Number, resolution: +Number)",
				      "prototype": {
				        "game": {
				          "!doc": "Phaser.RenderTexture.game",
				          "!type": "+Phaser.Game"
				        },
				        "renderXY": {
				          "!doc": "Phaser.RenderTexture.renderXY",
				          "!type": "fn(displayObject: +Phaser.Sprite, x: +Number, y: +Number, clear: +Boolean)"
				        },
				        "type": {
				          "!doc": "Phaser.RenderTexture.type",
				          "!type": "+Number"
				        },
				        "render": {
				          "!doc": "Phaser.RenderTexture.render",
				          "!type": "fn(displayObject: +Phaser.Sprite, matrix: +Phaser.Matrix, clear: +Boolean)"
				        },
				        "renderRawXY": {
				          "!doc": "Phaser.RenderTexture.renderRawXY",
				          "!type": "fn(displayObject: +Phaser.Sprite, x: +Number, y: +Number, clear: +Boolean)"
				        },
				        "key": {
				          "!doc": "Phaser.RenderTexture.key",
				          "!type": "+String"
				        }
				      }
				    },
				    "Net": {
				      "!doc": "Phaser.Net",
				      "!type": "fn(game: +Phaser.Game)",
				      "prototype": {
				        "getHostName": {
				          "!doc": "Phaser.Net.getHostName",
				          "!type": "fn() -> +String"
				        },
				        "updateQueryString": {
				          "!doc": "Phaser.Net.updateQueryString",
				          "!type": "fn(key: +String, value: +String, redirect: +Boolean, url: +String) -> +String"
				        },
				        "getQueryString": {
				          "!doc": "Phaser.Net.getQueryString",
				          "!type": "fn(parameter: +String) -> +String"
				        },
				        "decodeURI": {
				          "!doc": "Phaser.Net.decodeURI",
				          "!type": "fn(value: +String) -> +String"
				        },
				        "checkDomainName": {
				          "!doc": "Phaser.Net.checkDomainName",
				          "!type": "fn(domain: +String) -> +Boolean"
				        }
				      }
				    },
				    "FrameData": {
				      "!doc": "Phaser.FrameData",
				      "!type": "fn()",
				      "prototype": {
				        "getFrameByName": {
				          "!doc": "Phaser.FrameData.getFrameByName",
				          "!type": "fn(name: +String) -> +Phaser.Frame"
				        },
				        "total": {
				          "!doc": "Phaser.FrameData.total",
				          "!type": "+Number"
				        },
				        "getFrames": {
				          "!doc": "Phaser.FrameData.getFrames",
				          "!type": "fn(frames: +Array, useNumericIndex: +Boolean, output: +Array) -> +Array"
				        },
				        "getFrameIndexes": {
				          "!doc": "Phaser.FrameData.getFrameIndexes",
				          "!type": "fn(frames: +Array, useNumericIndex: +Boolean, output: +Array) -> +Array"
				        },
				        "checkFrameName": {
				          "!doc": "Phaser.FrameData.checkFrameName",
				          "!type": "fn(name: +String) -> +Boolean"
				        },
				        "getFrame": {
				          "!doc": "Phaser.FrameData.getFrame",
				          "!type": "fn(index: +Number) -> +Phaser.Frame"
				        },
				        "getFrameRange": {
				          "!doc": "Phaser.FrameData.getFrameRange",
				          "!type": "fn(start: +Number, end: +Number, output: +Array) -> +Array"
				        },
				        "clone": {
				          "!doc": "Phaser.FrameData.clone",
				          "!type": "fn() -> +Phaser.FrameData"
				        },
				        "addFrame": {
				          "!doc": "Phaser.FrameData.addFrame",
				          "!type": "fn(frame: +Phaser.Frame) -> +Phaser.Frame"
				        }
				      }
				    },
				    "RoundedRectangle": {
				      "!doc": "Phaser.RoundedRectangle",
				      "!type": "fn(x: +Number, y: +Number, width: +Number, height: +Number, radius: +Number)",
				      "prototype": {
				        "contains": {
				          "!doc": "Phaser.RoundedRectangle.contains",
				          "!type": "fn(x: +Number, y: +Number) -> +Boolean"
				        },
				        "clone": {
				          "!doc": "Phaser.RoundedRectangle.clone",
				          "!type": "fn() -> +Phaser.RoundedRectangle"
				        },
				        "x": {
				          "!doc": "Phaser.RoundedRectangle.x",
				          "!type": "+Number"
				        },
				        "width": {
				          "!doc": "Phaser.RoundedRectangle.width",
				          "!type": "+Number"
				        },
				        "y": {
				          "!doc": "Phaser.RoundedRectangle.y",
				          "!type": "+Number"
				        },
				        "radius": {
				          "!doc": "Phaser.RoundedRectangle.radius",
				          "!type": "+Number"
				        },
				        "type": {
				          "!doc": "Phaser.RoundedRectangle.type",
				          "!type": "+Number"
				        },
				        "height": {
				          "!doc": "Phaser.RoundedRectangle.height",
				          "!type": "+Number"
				        }
				      }
				    },
				    "DOWN": {
				      "!doc": "Phaser.DOWN",
				      "!type": "+Number"
				    },
				    "VIDEO": {
				      "!doc": "Phaser.VIDEO",
				      "!type": "+Number"
				    },
				    "TilemapLayer": {
				      "init": {
				        "!doc": "Phaser.TilemapLayer.init",
				        "!type": "fn()"
				      },
				      "install": {
				        "!doc": "Phaser.TilemapLayer.install",
				        "!type": "fn()"
				      },
				      "!doc": "Phaser.TilemapLayer",
				      "!type": "fn(game: +Phaser.Game, tilemap: +Phaser.Tilemap, index: +Number, width: +Number, height: +Number)",
				      "prototype": {
				        "play": {
				          "!doc": "Phaser.TilemapLayer.play",
				          "!type": "fn(name: +String, frameRate: +Number, loop: +Boolean, killOnComplete: +Boolean) -> +Phaser.Animation"
				        },
				        "parent": {
				          "!doc": "Phaser.TilemapLayer.parent",
				          "!type": "+PIXI.DisplayObjectContainer"
				        },
				        "lifespan": {
				          "!doc": "Phaser.TilemapLayer.lifespan",
				          "!type": "+Number"
				        },
				        "outOfBoundsKill": {
				          "!doc": "Phaser.TilemapLayer.outOfBoundsKill",
				          "!type": "+Boolean"
				        },
				        "type": {
				          "!doc": "Phaser.TilemapLayer.type",
				          "!type": "+Number"
				        },
				        "resizeFrame": {
				          "!doc": "Phaser.TilemapLayer.resizeFrame",
				          "!type": "fn(parent: +Object, width: +Number, height: +Number)"
				        },
				        "rayStepRate": {
				          "!doc": "Phaser.TilemapLayer.rayStepRate",
				          "!type": "+Number"
				        },
				        "children": {
				          "!doc": "Phaser.TilemapLayer.children",
				          "!type": "+Array_DisplayObject_"
				        },
				        "pivot": {
				          "!doc": "Phaser.TilemapLayer.pivot",
				          "!type": "+Phaser.Point"
				        },
				        "maxHealth": {
				          "!doc": "Phaser.TilemapLayer.maxHealth",
				          "!type": "+Number"
				        },
				        "revive": {
				          "!doc": "Phaser.TilemapLayer.revive",
				          "!type": "fn(health: +Number) -> +PIXI.DisplayObject"
				        },
				        "scrollFactorX": {
				          "!doc": "Phaser.TilemapLayer.scrollFactorX",
				          "!type": "+Number"
				        },
				        "scrollFactorY": {
				          "!doc": "Phaser.TilemapLayer.scrollFactorY",
				          "!type": "+Number"
				        },
				        "bringToTop": {
				          "!doc": "Phaser.TilemapLayer.bringToTop",
				          "!type": "fn() -> +PIXI.DisplayObject"
				        },
				        "events": {
				          "!doc": "Phaser.TilemapLayer.events",
				          "!type": "+Phaser.Events"
				        },
				        "moveUp": {
				          "!doc": "Phaser.TilemapLayer.moveUp",
				          "!type": "fn() -> +PIXI.DisplayObject"
				        },
				        "physicsType": {
				          "!doc": "Phaser.TilemapLayer.physicsType",
				          "!type": "+Number"
				        },
				        "canvas": {
				          "!doc": "Phaser.TilemapLayer.canvas",
				          "!type": "+HTMLCanvasElement"
				        },
				        "postUpdate": {
				          "!doc": "Phaser.TilemapLayer.postUpdate",
				          "!type": "fn()"
				        },
				        "getRayCastTiles": {
				          "!doc": "Phaser.TilemapLayer.getRayCastTiles",
				          "!type": "fn(line: +Phaser.Line, stepRate: +Number, collides: +Boolean, interestingFace: +Boolean) -> +Array._Phaser.Tile_"
				        },
				        "getTileXY": {
				          "!doc": "Phaser.TilemapLayer.getTileXY",
				          "!type": "fn(x: +Number, y: +Number, point: +Phaser.Point) -> +Phaser.Point"
				        },
				        "smoothed": {
				          "!doc": "Phaser.TilemapLayer.smoothed",
				          "!type": "+Boolean"
				        },
				        "destroy": {
				          "!doc": "Phaser.TilemapLayer.destroy",
				          "!type": "fn()"
				        },
				        "index": {
				          "!doc": "Phaser.TilemapLayer.index",
				          "!type": "+Number"
				        },
				        "renderSettings": {
				          "!doc": "Phaser.TilemapLayer.renderSettings",
				          "!type": "+Object"
				        },
				        "input": {
				          "!doc": "Phaser.TilemapLayer.input",
				          "!type": "+Phaser.InputHandler"
				        },
				        "worldPosition": {
				          "!doc": "Phaser.TilemapLayer.worldPosition",
				          "!type": "+Phaser.Point"
				        },
				        "left": {
				          "!doc": "Phaser.TilemapLayer.left",
				          "!type": "+Number"
				        },
				        "reset": {
				          "!doc": "Phaser.TilemapLayer.reset",
				          "!type": "fn(x: +Number, y: +Number, health: +Number) -> +PIXI.DisplayObject"
				        },
				        "preUpdate": {
				          "!doc": "Phaser.TilemapLayer.preUpdate",
				          "!type": "fn()"
				        },
				        "filterArea": {
				          "!doc": "Phaser.TilemapLayer.filterArea",
				          "!type": "+Phaser.Rectangle"
				        },
				        "damage": {
				          "!doc": "Phaser.TilemapLayer.damage",
				          "!type": "fn(amount: +Number) -> +Phaser.Sprite"
				        },
				        "components": {
				          "!doc": "Phaser.TilemapLayer.components",
				          "!type": "+Object"
				        },
				        "worldScale": {
				          "!doc": "Phaser.TilemapLayer.worldScale",
				          "!type": "+Phaser.Point"
				        },
				        "alive": {
				          "!doc": "Phaser.TilemapLayer.alive",
				          "!type": "+Boolean"
				        },
				        "transformCallback": {
				          "!doc": "Phaser.TilemapLayer.transformCallback",
				          "!type": "+Function"
				        },
				        "inWorld": {
				          "!doc": "Phaser.TilemapLayer.inWorld",
				          "!type": "+Boolean"
				        },
				        "layer": {
				          "!doc": "Phaser.TilemapLayer.layer",
				          "!type": "+Object"
				        },
				        "worldAlpha": {
				          "!doc": "Phaser.TilemapLayer.worldAlpha",
				          "!type": "+Number"
				        },
				        "world": {
				          "!doc": "Phaser.TilemapLayer.world",
				          "!type": "+Phaser.Point"
				        },
				        "top": {
				          "!doc": "Phaser.TilemapLayer.top",
				          "!type": "+Number"
				        },
				        "angle": {
				          "!doc": "Phaser.TilemapLayer.angle",
				          "!type": "+Number"
				        },
				        "setScaleMinMax": {
				          "!doc": "Phaser.TilemapLayer.setScaleMinMax",
				          "!type": "fn(minX: +Number, minY: +Number, maxX: +Number, maxY: +Number)"
				        },
				        "resetTilesetCache": {
				          "!doc": "Phaser.TilemapLayer.resetTilesetCache",
				          "!type": "fn()"
				        },
				        "checkWorldBounds": {
				          "!doc": "Phaser.TilemapLayer.checkWorldBounds",
				          "!type": "+Boolean"
				        },
				        "map": {
				          "!doc": "Phaser.TilemapLayer.map",
				          "!type": "+Phaser.Tilemap"
				        },
				        "key": {
				          "!doc": "Phaser.TilemapLayer.key",
				          "!type": "+String"
				        },
				        "dirty": {
				          "!doc": "Phaser.TilemapLayer.dirty",
				          "!type": "+Boolean"
				        },
				        "texture": {
				          "!doc": "Phaser.TilemapLayer.texture",
				          "!type": "+PIXI.Texture"
				        },
				        "health": {
				          "!doc": "Phaser.TilemapLayer.health",
				          "!type": "+Number"
				        },
				        "destroyPhase": {
				          "!doc": "Phaser.TilemapLayer.destroyPhase",
				          "!type": "+Boolean"
				        },
				        "right": {
				          "!doc": "Phaser.TilemapLayer.right",
				          "!type": "+Number"
				        },
				        "kill": {
				          "!doc": "Phaser.TilemapLayer.kill",
				          "!type": "fn() -> +PIXI.DisplayObject"
				        },
				        "previousPosition": {
				          "!doc": "Phaser.TilemapLayer.previousPosition",
				          "!type": "+Phaser.Point"
				        },
				        "scaleMax": {
				          "!doc": "Phaser.TilemapLayer.scaleMax",
				          "!type": "+Phaser.Point"
				        },
				        "stage": {
				          "!doc": "Phaser.TilemapLayer.stage",
				          "!type": "+Phaser.Stage"
				        },
				        "anchor": {
				          "!doc": "Phaser.TilemapLayer.anchor",
				          "!type": "+Phaser.Point"
				        },
				        "autoCull": {
				          "!doc": "Phaser.TilemapLayer.autoCull",
				          "!type": "+Boolean"
				        },
				        "x": {
				          "!doc": "Phaser.TilemapLayer.x",
				          "!type": "+Number"
				        },
				        "exists": {
				          "!doc": "Phaser.TilemapLayer.exists",
				          "!type": "+Boolean"
				        },
				        "y": {
				          "!doc": "Phaser.TilemapLayer.y",
				          "!type": "+Number"
				        },
				        "z": {
				          "!doc": "Phaser.TilemapLayer.z",
				          "!type": "+Number"
				        },
				        "scaleMin": {
				          "!doc": "Phaser.TilemapLayer.scaleMin",
				          "!type": "+Phaser.Point"
				        },
				        "getTileY": {
				          "!doc": "Phaser.TilemapLayer.getTileY",
				          "!type": "fn(y: +Number) -> +Number"
				        },
				        "getTileX": {
				          "!doc": "Phaser.TilemapLayer.getTileX",
				          "!type": "fn(x: +Number) -> +Number"
				        },
				        "body": {
				          "!doc": "Phaser.TilemapLayer.body",
				          "!type": "+Phaser.Physics.Arcade.Body"
				        },
				        "inCamera": {
				          "!doc": "Phaser.TilemapLayer.inCamera",
				          "!type": "+Boolean"
				        },
				        "ensureSharedCopyCanvas": {
				          "!doc": "Phaser.TilemapLayer.ensureSharedCopyCanvas",
				          "!type": "fn()"
				        },
				        "offsetX": {
				          "!doc": "Phaser.TilemapLayer.offsetX",
				          "!type": "+Number"
				        },
				        "tintedTexture": {
				          "!doc": "Phaser.TilemapLayer.tintedTexture",
				          "!type": "+Phaser.Canvas"
				        },
				        "offsetY": {
				          "!doc": "Phaser.TilemapLayer.offsetY",
				          "!type": "+Number"
				        },
				        "fixedToCamera": {
				          "!doc": "Phaser.TilemapLayer.fixedToCamera",
				          "!type": "+Boolean"
				        },
				        "renderOrderID": {
				          "!doc": "Phaser.TilemapLayer.renderOrderID",
				          "!type": "+Number"
				        },
				        "previousRotation": {
				          "!doc": "Phaser.TilemapLayer.previousRotation",
				          "!type": "+Number"
				        },
				        "visible": {
				          "!doc": "Phaser.TilemapLayer.visible",
				          "!type": "+Boolean"
				        },
				        "setScale": {
				          "!doc": "Phaser.TilemapLayer.setScale",
				          "!type": "fn(xScale: +Number, yScale: +Number)"
				        },
				        "bottom": {
				          "!doc": "Phaser.TilemapLayer.bottom",
				          "!type": "+Number"
				        },
				        "cameraOffset": {
				          "!doc": "Phaser.TilemapLayer.cameraOffset",
				          "!type": "+Phaser.Point"
				        },
				        "moveDown": {
				          "!doc": "Phaser.TilemapLayer.moveDown",
				          "!type": "fn() -> +PIXI.DisplayObject"
				        },
				        "updateCrop": {
				          "!doc": "Phaser.TilemapLayer.updateCrop",
				          "!type": "fn()"
				        },
				        "overlap": {
				          "!doc": "Phaser.TilemapLayer.overlap",
				          "!type": "fn(displayObject: +Phaser.Sprite) -> +Boolean"
				        },
				        "loadTexture": {
				          "!doc": "Phaser.TilemapLayer.loadTexture",
				          "!type": "fn(key: +String, frame: +String, stopAnimation: +Boolean)"
				        },
				        "name": {
				          "!doc": "Phaser.TilemapLayer.name",
				          "!type": "+String"
				        },
				        "position": {
				          "!doc": "Phaser.TilemapLayer.position",
				          "!type": "+Phaser.Point"
				        },
				        "crop": {
				          "!doc": "Phaser.TilemapLayer.crop",
				          "!type": "fn(rect: +Phaser.Rectangle, copy: +Boolean)"
				        },
				        "frame": {
				          "!doc": "Phaser.TilemapLayer.frame",
				          "!type": "+Number"
				        },
				        "worldRotation": {
				          "!doc": "Phaser.TilemapLayer.worldRotation",
				          "!type": "+Number"
				        },
				        "shader": {
				          "!doc": "Phaser.TilemapLayer.shader",
				          "!type": "+PIXI.AbstractFilter"
				        },
				        "cropRect": {
				          "!doc": "Phaser.TilemapLayer.cropRect",
				          "!type": "+Phaser.Rectangle"
				        },
				        "game": {
				          "!doc": "Phaser.TilemapLayer.game",
				          "!type": "+Phaser.Game"
				        },
				        "renderable": {
				          "!doc": "Phaser.TilemapLayer.renderable",
				          "!type": "+Boolean"
				        },
				        "resizeWorld": {
				          "!doc": "Phaser.TilemapLayer.resizeWorld",
				          "!type": "fn()"
				        },
				        "deltaZ": {
				          "!doc": "Phaser.TilemapLayer.deltaZ",
				          "!type": "+Number"
				        },
				        "transformCallbackContext": {
				          "!doc": "Phaser.TilemapLayer.transformCallbackContext",
				          "!type": "+Object"
				        },
				        "deltaX": {
				          "!doc": "Phaser.TilemapLayer.deltaX",
				          "!type": "+Number"
				        },
				        "deltaY": {
				          "!doc": "Phaser.TilemapLayer.deltaY",
				          "!type": "+Number"
				        },
				        "update": {
				          "!doc": "Phaser.TilemapLayer.update",
				          "!type": "fn()"
				        },
				        "scale": {
				          "!doc": "Phaser.TilemapLayer.scale",
				          "!type": "+Phaser.Point"
				        },
				        "tint": {
				          "!doc": "Phaser.TilemapLayer.tint",
				          "!type": "+Number"
				        },
				        "inputEnabled": {
				          "!doc": "Phaser.TilemapLayer.inputEnabled",
				          "!type": "+Boolean"
				        },
				        "debugSettings": {
				          "!doc": "Phaser.TilemapLayer.debugSettings",
				          "!type": "+Object"
				        },
				        "setFrame": {
				          "!doc": "Phaser.TilemapLayer.setFrame",
				          "!type": "fn(frame: +Phaser.Frame)"
				        },
				        "animations": {
				          "!doc": "Phaser.TilemapLayer.animations",
				          "!type": "+Phaser.AnimationManager"
				        },
				        "alpha": {
				          "!doc": "Phaser.TilemapLayer.alpha",
				          "!type": "+Number"
				        },
				        "heal": {
				          "!doc": "Phaser.TilemapLayer.heal",
				          "!type": "fn(amount: +Number) -> +Phaser.Sprite"
				        },
				        "render": {
				          "!doc": "Phaser.TilemapLayer.render",
				          "!type": "fn()"
				        },
				        "debug": {
				          "!doc": "Phaser.TilemapLayer.debug",
				          "!type": "+Boolean"
				        },
				        "frameName": {
				          "!doc": "Phaser.TilemapLayer.frameName",
				          "!type": "+String"
				        },
				        "rotation": {
				          "!doc": "Phaser.TilemapLayer.rotation",
				          "!type": "+Number"
				        },
				        "sendToBack": {
				          "!doc": "Phaser.TilemapLayer.sendToBack",
				          "!type": "fn() -> +PIXI.DisplayObject"
				        },
				        "resetFrame": {
				          "!doc": "Phaser.TilemapLayer.resetFrame",
				          "!type": "fn()"
				        },
				        "pendingDestroy": {
				          "!doc": "Phaser.TilemapLayer.pendingDestroy",
				          "!type": "+Boolean"
				        },
				        "blendMode": {
				          "!doc": "Phaser.TilemapLayer.blendMode",
				          "!type": "+Number"
				        },
				        "hitArea": {
				          "!doc": "Phaser.TilemapLayer.hitArea",
				          "!type": "+Phaser.Rectangle"
				        },
				        "resize": {
				          "!doc": "Phaser.TilemapLayer.resize",
				          "!type": "fn(width: +Number, height: +Number)"
				        },
				        "fresh": {
				          "!doc": "Phaser.TilemapLayer.fresh",
				          "!type": "+Boolean"
				        },
				        "getTiles": {
				          "!doc": "Phaser.TilemapLayer.getTiles",
				          "!type": "fn(x: +Number, y: +Number, width: +Number, height: +Number, collides: +Boolean, interestingFace: +Boolean) -> +array._Phaser.Tile_"
				        }
				      }
				    },
				    "blendModes": {
				      "!doc": "Phaser.blendModes",
				      "!type": "+Object"
				    },
				    "GameObjectCreator": {
				      "!doc": "Phaser.GameObjectCreator",
				      "!type": "fn(game: +Phaser.Game)",
				      "prototype": {
				        "image": {
				          "!doc": "Phaser.GameObjectCreator.image",
				          "!type": "fn(x: +Number, y: +Number, key: +String, frame: +String) -> +Phaser.Image"
				        },
				        "game": {
				          "!doc": "Phaser.GameObjectCreator.game",
				          "!type": "+Phaser.Game"
				        },
				        "retroFont": {
				          "!doc": "Phaser.GameObjectCreator.retroFont",
				          "!type": "fn(font: +String, characterWidth: +Number, characterHeight: +Number, chars: +String, charsPerRow: +Number, xSpacing: +Number, ySpacing: +Number, xOffset: +Number, yOffset: +Number) -> +Phaser.RetroFont"
				        },
				        "renderTexture": {
				          "!doc": "Phaser.GameObjectCreator.renderTexture",
				          "!type": "fn(width: +Number, height: +Number, key: +String, addToCache: +Boolean) -> +Phaser.RenderTexture"
				        },
				        "sound": {
				          "!doc": "Phaser.GameObjectCreator.sound",
				          "!type": "fn(key: +String, volume: +Number, loop: +Boolean, connect: +Boolean) -> +Phaser.Sound"
				        },
				        "rope": {
				          "!doc": "Phaser.GameObjectCreator.rope",
				          "!type": "fn(x: +Number, y: +Number, width: +Number, height: +Number, key: +String, frame: +String) -> +Phaser.Rope"
				        },
				        "bitmapText": {
				          "!doc": "Phaser.GameObjectCreator.bitmapText",
				          "!type": "fn(x: +Number, y: +Number, font: +String, text: +String, size: +Number, align: +String) -> +Phaser.BitmapText"
				        },
				        "graphics": {
				          "!doc": "Phaser.GameObjectCreator.graphics",
				          "!type": "fn(x: +Number, y: +Number) -> +Phaser.Graphics"
				        },
				        "tilemap": {
				          "!doc": "Phaser.GameObjectCreator.tilemap",
				          "!type": "fn(key: +String, tileWidth: +Number, tileHeight: +Number, width: +Number, height: +Number)"
				        },
				        "button": {
				          "!doc": "Phaser.GameObjectCreator.button",
				          "!type": "fn(x: +Number, y: +Number, key: +String, callback: +Function, callbackContext: +Object, overFrame: +String, outFrame: +String, downFrame: +String, upFrame: +String) -> +Phaser.Button"
				        },
				        "filter": {
				          "!doc": "Phaser.GameObjectCreator.filter",
				          "!type": "fn(filter: +String, _any: +Object) -> +Phaser.Filter"
				        },
				        "tween": {
				          "!doc": "Phaser.GameObjectCreator.tween",
				          "!type": "fn(obj: +Object) -> +Phaser.Tween"
				        },
				        "world": {
				          "!doc": "Phaser.GameObjectCreator.world",
				          "!type": "+Phaser.World"
				        },
				        "bitmapData": {
				          "!doc": "Phaser.GameObjectCreator.bitmapData",
				          "!type": "fn(width: +Number, height: +Number, key: +String, addToCache: +Boolean) -> +Phaser.BitmapData"
				        },
				        "sprite": {
				          "!doc": "Phaser.GameObjectCreator.sprite",
				          "!type": "fn(x: +Number, y: +Number, key: +String, frame: +String) -> +Phaser.Sprite"
				        },
				        "spriteBatch": {
				          "!doc": "Phaser.GameObjectCreator.spriteBatch",
				          "!type": "fn(parent: +Object, name: +String, addToStage: +Boolean) -> +Phaser.SpriteBatch"
				        },
				        "audio": {
				          "!doc": "Phaser.GameObjectCreator.audio",
				          "!type": "fn(key: +String, volume: +Number, loop: +Boolean, connect: +Boolean) -> +Phaser.Sound"
				        },
				        "text": {
				          "!doc": "Phaser.GameObjectCreator.text",
				          "!type": "fn(x: +Number, y: +Number, text: +String, style: +Object) -> +Phaser.Text"
				        },
				        "tileSprite": {
				          "!doc": "Phaser.GameObjectCreator.tileSprite",
				          "!type": "fn(x: +Number, y: +Number, width: +Number, height: +Number, key: +String, frame: +String) -> +Phaser.TileSprite"
				        },
				        "emitter": {
				          "!doc": "Phaser.GameObjectCreator.emitter",
				          "!type": "fn(x: +Number, y: +Number, maxParticles: +Number) -> +Phaser.Emitter"
				        },
				        "group": {
				          "!doc": "Phaser.GameObjectCreator.group",
				          "!type": "fn(parent: +Object, name: +String, addToStage: +Boolean, enableBody: +Boolean, physicsBodyType: +Number) -> +Phaser.Group"
				        },
				        "audioSprite": {
				          "!doc": "Phaser.GameObjectCreator.audioSprite",
				          "!type": "fn(key: +String) -> +Phaser.AudioSprite"
				        }
				      }
				    },
				    "World": {
				      "SORT_ASCENDING": "+Number",
				      "RETURN_TOTAL": "+Number",
				      "!doc": "Phaser.World",
				      "RETURN_NONE": "+Number",
				      "!type": "fn(game: +Phaser.Game)",
				      "SORT_DESCENDING": "+Number",
				      "RETURN_CHILD": "+Number",
				      "prototype": {
				        "xy": {
				          "!doc": "Phaser.World.xy",
				          "!type": "fn(index: +Number, x: +Number, y: +Number)"
				        },
				        "parent": {
				          "!doc": "Phaser.World.parent",
				          "!type": "+PIXI.DisplayObjectContainer"
				        },
				        "descendingSortHandler": {
				          "!doc": "Phaser.World.descendingSortHandler",
				          "!type": "fn(a: +Object, b: +Object)"
				        },
				        "centerY": {
				          "!doc": "Phaser.World.centerY",
				          "!type": "+Number"
				        },
				        "centerX": {
				          "!doc": "Phaser.World.centerX",
				          "!type": "+Number"
				        },
				        "type": {
				          "!doc": "Phaser.World.type",
				          "!type": "+Number"
				        },
				        "moveAll": {
				          "!doc": "Phaser.World.moveAll",
				          "!type": "fn(group: +Phaser.Group, silent: +Boolean) -> +Phaser.Group"
				        },
				        "removeAll": {
				          "!doc": "Phaser.World.removeAll",
				          "!type": "fn(destroy: +Boolean, silent: +Boolean)"
				        },
				        "enableBody": {
				          "!doc": "Phaser.World.enableBody",
				          "!type": "+Boolean"
				        },
				        "children": {
				          "!doc": "Phaser.World.children",
				          "!type": "+Array_DisplayObject_"
				        },
				        "customSort": {
				          "!doc": "Phaser.World.customSort",
				          "!type": "fn(sortHandler: +Function, context: +Object)"
				        },
				        "enableBodyDebug": {
				          "!doc": "Phaser.World.enableBodyDebug",
				          "!type": "+Boolean"
				        },
				        "pivot": {
				          "!doc": "Phaser.World.pivot",
				          "!type": "+Phaser.Point"
				        },
				        "bringToTop": {
				          "!doc": "Phaser.World.bringToTop",
				          "!type": "fn(child: +Object) -> +Object"
				        },
				        "moveUp": {
				          "!doc": "Phaser.World.moveUp",
				          "!type": "fn(child: +Object) -> +Object"
				        },
				        "height": {
				          "!doc": "Phaser.World.height",
				          "!type": "+Number"
				        },
				        "physicsType": {
				          "!doc": "Phaser.World.physicsType",
				          "!type": "+Number"
				        },
				        "_definedSize": {
				          "!doc": "Phaser.World._definedSize",
				          "!type": "+Boolean"
				        },
				        "postUpdate": {
				          "!doc": "Phaser.World.postUpdate",
				          "!type": "fn()"
				        },
				        "destroy": {
				          "!doc": "Phaser.World.destroy",
				          "!type": "fn(destroyChildren: +Boolean, soft: +Boolean)"
				        },
				        "cursorIndex": {
				          "!doc": "Phaser.World.cursorIndex",
				          "!type": "+Number"
				        },
				        "getFirstDead": {
				          "!doc": "Phaser.World.getFirstDead",
				          "!type": "fn(createIfNull: +Boolean, x: +Number, y: +Number, key: +String, frame: +String) -> +PIXI.DisplayObject"
				        },
				        "physicsSortDirection": {
				          "!doc": "Phaser.World.physicsSortDirection",
				          "!type": "+Number"
				        },
				        "addAt": {
				          "!doc": "Phaser.World.addAt",
				          "!type": "fn(child: +DisplayObject, index: +Number, silent: +Boolean) -> +PIXI.DisplayObject"
				        },
				        "worldPosition": {
				          "!doc": "Phaser.World.worldPosition",
				          "!type": "+Phaser.Point"
				        },
				        "forEachAlive": {
				          "!doc": "Phaser.World.forEachAlive",
				          "!type": "fn(callback: +Function, callbackContext: +Object, args: +Object)"
				        },
				        "resetCursor": {
				          "!doc": "Phaser.World.resetCursor",
				          "!type": "fn(index: +Number) -> +Object"
				        },
				        "addMultiple": {
				          "!doc": "Phaser.World.addMultiple",
				          "!type": "fn(children: +Array._DisplayObject_, silent: +Boolean) -> +Array._DisplayObject_"
				        },
				        "setProperty": {
				          "!doc": "Phaser.World.setProperty",
				          "!type": "fn(child: +Object, key: +Array, value: +Object, operation: +Number, force: +Boolean) -> +Boolean"
				        },
				        "bounds": {
				          "!doc": "Phaser.World.bounds",
				          "!type": "+Phaser.Rectangle"
				        },
				        "preUpdate": {
				          "!doc": "Phaser.World.preUpdate",
				          "!type": "fn()"
				        },
				        "hash": {
				          "!doc": "Phaser.World.hash",
				          "!type": "+Array"
				        },
				        "filterArea": {
				          "!doc": "Phaser.World.filterArea",
				          "!type": "+Phaser.Rectangle"
				        },
				        "addToHash": {
				          "!doc": "Phaser.World.addToHash",
				          "!type": "fn(child: +DisplayObject) -> +Boolean"
				        },
				        "worldScale": {
				          "!doc": "Phaser.World.worldScale",
				          "!type": "+Phaser.Point"
				        },
				        "alive": {
				          "!doc": "Phaser.World.alive",
				          "!type": "+Boolean"
				        },
				        "checkProperty": {
				          "!doc": "Phaser.World.checkProperty",
				          "!type": "fn(child: +Object, key: +Array, value: +Object, force: +Boolean) -> +Boolean"
				        },
				        "callbackFromArray": {
				          "!doc": "Phaser.World.callbackFromArray",
				          "!type": "fn(child: +Object, callback: +Array, length: +Number)"
				        },
				        "worldAlpha": {
				          "!doc": "Phaser.World.worldAlpha",
				          "!type": "+Number"
				        },
				        "multiplyAll": {
				          "!doc": "Phaser.World.multiplyAll",
				          "!type": "fn(property: +String, amount: +Number, checkAlive: +Boolean, checkVisible: +Boolean)"
				        },
				        "angle": {
				          "!doc": "Phaser.World.angle",
				          "!type": "+Number"
				        },
				        "camera": {
				          "!doc": "Phaser.World.camera",
				          "!type": "+Phaser.Camera"
				        },
				        "iterate": {
				          "!doc": "Phaser.World.iterate",
				          "!type": "fn(key: +String, value: +Object, returnType: +Number, callback: +Function, callbackContext: +Object, args: +Array._any_) -> +Object"
				        },
				        "onDestroy": {
				          "!doc": "Phaser.World.onDestroy",
				          "!type": "+Phaser.Signal"
				        },
				        "set": {
				          "!doc": "Phaser.World.set",
				          "!type": "fn(child: +Phaser.Sprite, key: +String, value: +Object, checkAlive: +Boolean, checkVisible: +Boolean, operation: +Number, force: +Boolean) -> +Boolean"
				        },
				        "getFirstExists": {
				          "!doc": "Phaser.World.getFirstExists",
				          "!type": "fn(exists: +Boolean, createIfNull: +Boolean, x: +Number, y: +Number, key: +String, frame: +String) -> +PIXI.DisplayObject"
				        },
				        "reverse": {
				          "!doc": "Phaser.World.reverse",
				          "!type": "fn()"
				        },
				        "setBounds": {
				          "!doc": "Phaser.World.setBounds",
				          "!type": "fn(x: +Number, y: +Number, width: +Number, height: +Number)"
				        },
				        "filter": {
				          "!doc": "Phaser.World.filter",
				          "!type": "fn(predicate: +Function, checkExists: +Boolean) -> +Phaser.ArraySet"
				        },
				        "stage": {
				          "!doc": "Phaser.World.stage",
				          "!type": "+Phaser.Stage"
				        },
				        "addAll": {
				          "!doc": "Phaser.World.addAll",
				          "!type": "fn(property: +String, amount: +Number, checkAlive: +Boolean, checkVisible: +Boolean)"
				        },
				        "width": {
				          "!doc": "Phaser.World.width",
				          "!type": "+Number"
				        },
				        "ignoreDestroy": {
				          "!doc": "Phaser.World.ignoreDestroy",
				          "!type": "+Boolean"
				        },
				        "x": {
				          "!doc": "Phaser.World.x",
				          "!type": "+Number"
				        },
				        "exists": {
				          "!doc": "Phaser.World.exists",
				          "!type": "+Boolean"
				        },
				        "y": {
				          "!doc": "Phaser.World.y",
				          "!type": "+Number"
				        },
				        "z": {
				          "!doc": "Phaser.World.z",
				          "!type": "+Number"
				        },
				        "divideAll": {
				          "!doc": "Phaser.World.divideAll",
				          "!type": "fn(property: +String, amount: +Number, checkAlive: +Boolean, checkVisible: +Boolean)"
				        },
				        "setAllChildren": {
				          "!doc": "Phaser.World.setAllChildren",
				          "!type": "fn(key: +String, value: +Object, checkAlive: +Boolean, checkVisible: +Boolean, operation: +Number, force: +Boolean)"
				        },
				        "wrap": {
				          "!doc": "Phaser.World.wrap",
				          "!type": "fn(sprite: +Phaser.Sprite, padding: +Number, useBounds: +Boolean, horizontal: +Boolean, vertical: +Boolean)"
				        },
				        "physicsBodyType": {
				          "!doc": "Phaser.World.physicsBodyType",
				          "!type": "+Number"
				        },
				        "getIndex": {
				          "!doc": "Phaser.World.getIndex",
				          "!type": "fn(child: +Object) -> +Number"
				        },
				        "getBottom": {
				          "!doc": "Phaser.World.getBottom",
				          "!type": "fn() -> +Object"
				        },
				        "replace": {
				          "!doc": "Phaser.World.replace",
				          "!type": "fn(oldChild: +Object, newChild: +Object) -> +Object"
				        },
				        "resetChild": {
				          "!doc": "Phaser.World.resetChild",
				          "!type": "fn(child: +DisplayObject, x: +Number, y: +Number, key: +String, frame: +String) -> +PIXI.DisplayObject"
				        },
				        "getRandom": {
				          "!doc": "Phaser.World.getRandom",
				          "!type": "fn(startIndex: +Number, length: +Number) -> +Object"
				        },
				        "forEachExists": {
				          "!doc": "Phaser.World.forEachExists",
				          "!type": "fn(callback: +Function, callbackContext: +Object, args: +Object)"
				        },
				        "getTop": {
				          "!doc": "Phaser.World.getTop",
				          "!type": "fn() -> +Object"
				        },
				        "create": {
				          "!doc": "Phaser.World.create",
				          "!type": "fn(x: +Number, y: +Number, key: +String, frame: +String, exists: +Boolean) -> +PIXI.DisplayObject"
				        },
				        "countDead": {
				          "!doc": "Phaser.World.countDead",
				          "!type": "fn() -> +Number"
				        },
				        "subAll": {
				          "!doc": "Phaser.World.subAll",
				          "!type": "fn(property: +String, amount: +Number, checkAlive: +Boolean, checkVisible: +Boolean)"
				        },
				        "fixedToCamera": {
				          "!doc": "Phaser.World.fixedToCamera",
				          "!type": "+Boolean"
				        },
				        "add": {
				          "!doc": "Phaser.World.add",
				          "!type": "fn(child: +DisplayObject, silent: +Boolean) -> +PIXI.DisplayObject"
				        },
				        "visible": {
				          "!doc": "Phaser.World.visible",
				          "!type": "+Boolean"
				        },
				        "swap": {
				          "!doc": "Phaser.World.swap",
				          "!type": "fn(child1: +Object, child2: +Object)"
				        },
				        "cameraOffset": {
				          "!doc": "Phaser.World.cameraOffset",
				          "!type": "+Phaser.Point"
				        },
				        "stateChange": {
				          "!doc": "Phaser.World.stateChange",
				          "!type": "fn()"
				        },
				        "sort": {
				          "!doc": "Phaser.World.sort",
				          "!type": "fn(key: +String, order: +Number)"
				        },
				        "moveDown": {
				          "!doc": "Phaser.World.moveDown",
				          "!type": "fn(child: +Object) -> +Object"
				        },
				        "hasProperty": {
				          "!doc": "Phaser.World.hasProperty",
				          "!type": "fn(child: +Object, key: +Array._string_) -> +Boolean"
				        },
				        "updateZ": {
				          "!doc": "Phaser.World.updateZ",
				          "!type": "fn()"
				        },
				        "name": {
				          "!doc": "Phaser.World.name",
				          "!type": "+String"
				        },
				        "ascendingSortHandler": {
				          "!doc": "Phaser.World.ascendingSortHandler",
				          "!type": "fn(a: +Object, b: +Object)"
				        },
				        "position": {
				          "!doc": "Phaser.World.position",
				          "!type": "+Phaser.Point"
				        },
				        "removeBetween": {
				          "!doc": "Phaser.World.removeBetween",
				          "!type": "fn(startIndex: +Number, endIndex: +Number, destroy: +Boolean, silent: +Boolean)"
				        },
				        "randomX": {
				          "!doc": "Phaser.World.randomX",
				          "!type": "+Number"
				        },
				        "removeFromHash": {
				          "!doc": "Phaser.World.removeFromHash",
				          "!type": "fn(child: +DisplayObject) -> +Boolean"
				        },
				        "shutdown": {
				          "!doc": "Phaser.World.shutdown",
				          "!type": "fn()"
				        },
				        "classType": {
				          "!doc": "Phaser.World.classType",
				          "!type": "+Object"
				        },
				        "randomY": {
				          "!doc": "Phaser.World.randomY",
				          "!type": "+Number"
				        },
				        "next": {
				          "!doc": "Phaser.World.next",
				          "!type": "fn() -> +Object"
				        },
				        "cursor": {
				          "!doc": "Phaser.World.cursor",
				          "!type": "+PIXI.DisplayObject"
				        },
				        "worldRotation": {
				          "!doc": "Phaser.World.worldRotation",
				          "!type": "+Number"
				        },
				        "game": {
				          "!doc": "Phaser.World.game",
				          "!type": "+Phaser.Game"
				        },
				        "renderable": {
				          "!doc": "Phaser.World.renderable",
				          "!type": "+Boolean"
				        },
				        "forEachDead": {
				          "!doc": "Phaser.World.forEachDead",
				          "!type": "fn(callback: +Function, callbackContext: +Object, args: +Object)"
				        },
				        "update": {
				          "!doc": "Phaser.World.update",
				          "!type": "fn()"
				        },
				        "scale": {
				          "!doc": "Phaser.World.scale",
				          "!type": "+Phaser.Point"
				        },
				        "countLiving": {
				          "!doc": "Phaser.World.countLiving",
				          "!type": "fn() -> +Number"
				        },
				        "remove": {
				          "!doc": "Phaser.World.remove",
				          "!type": "fn(child: +Object, destroy: +Boolean, silent: +Boolean) -> +Boolean"
				        },
				        "callAll": {
				          "!doc": "Phaser.World.callAll",
				          "!type": "fn(method: +String, context: +String, args: +Object)"
				        },
				        "total": {
				          "!doc": "Phaser.World.total",
				          "!type": "+Number"
				        },
				        "alpha": {
				          "!doc": "Phaser.World.alpha",
				          "!type": "+Number"
				        },
				        "createMultiple": {
				          "!doc": "Phaser.World.createMultiple",
				          "!type": "fn(quantity: +Number, key: +String, frame: +Number, exists: +Boolean)"
				        },
				        "boot": {
				          "!doc": "Phaser.World.boot",
				          "!type": "fn()"
				        },
				        "setAll": {
				          "!doc": "Phaser.World.setAll",
				          "!type": "fn(key: +String, value: +Object, checkAlive: +Boolean, checkVisible: +Boolean, operation: +Number, force: +Boolean)"
				        },
				        "callAllExists": {
				          "!doc": "Phaser.World.callAllExists",
				          "!type": "fn(callback: +String, existsValue: +Boolean, parameter: +Object)"
				        },
				        "checkAll": {
				          "!doc": "Phaser.World.checkAll",
				          "!type": "fn(key: +String, value: +Object, checkAlive: +Boolean, checkVisible: +Boolean, force: +Boolean)"
				        },
				        "previous": {
				          "!doc": "Phaser.World.previous",
				          "!type": "fn() -> +Object"
				        },
				        "forEach": {
				          "!doc": "Phaser.World.forEach",
				          "!type": "fn(callback: +Function, callbackContext: +Object, checkExists: +Boolean, args: +Object)"
				        },
				        "rotation": {
				          "!doc": "Phaser.World.rotation",
				          "!type": "+Number"
				        },
				        "length": {
				          "!doc": "Phaser.World.length",
				          "!type": "+Number"
				        },
				        "sendToBack": {
				          "!doc": "Phaser.World.sendToBack",
				          "!type": "fn(child: +Object) -> +Object"
				        },
				        "getAt": {
				          "!doc": "Phaser.World.getAt",
				          "!type": "fn(index: +Number) -> +PIXI.DisplayObject"
				        },
				        "pendingDestroy": {
				          "!doc": "Phaser.World.pendingDestroy",
				          "!type": "+Boolean"
				        },
				        "getFirstAlive": {
				          "!doc": "Phaser.World.getFirstAlive",
				          "!type": "fn(createIfNull: +Boolean, x: +Number, y: +Number, key: +String, frame: +String) -> +PIXI.DisplayObject"
				        },
				        "hitArea": {
				          "!doc": "Phaser.World.hitArea",
				          "!type": "+Phaser.Rectangle"
				        },
				        "resize": {
				          "!doc": "Phaser.World.resize",
				          "!type": "fn(width: +Number, height: +Number)"
				        }
				      }
				    },
				    "WEBGL_FILTER": {
				      "!doc": "Phaser.WEBGL_FILTER",
				      "!type": "+Number"
				    },
				    "Input": {
				      "TOUCH_OVERRIDES_MOUSE": "+Number",
				      "MAX_POINTERS": "+Number",
				      "!doc": "Phaser.Input",
				      "!type": "fn(game: +Phaser.Game)",
				      "prototype": {
				        "addPointer": {
				          "!doc": "Phaser.Input.addPointer",
				          "!type": "fn() -> +Phaser.Pointer"
				        },
				        "pollRate": {
				          "!doc": "Phaser.Input.pollRate",
				          "!type": "+Number"
				        },
				        "recordPointerHistory": {
				          "!doc": "Phaser.Input.recordPointerHistory",
				          "!type": "+Boolean"
				        },
				        "activePointer": {
				          "!doc": "Phaser.Input.activePointer",
				          "!type": "+Phaser.Pointer"
				        },
				        "addMoveCallback": {
				          "!doc": "Phaser.Input.addMoveCallback",
				          "!type": "fn(callback: +Function, context: +Object)"
				        },
				        "tapRate": {
				          "!doc": "Phaser.Input.tapRate",
				          "!type": "+Number"
				        },
				        "resetLocked": {
				          "!doc": "Phaser.Input.resetLocked",
				          "!type": "+Boolean"
				        },
				        "onTap": {
				          "!doc": "Phaser.Input.onTap",
				          "!type": "+Phaser.Signal"
				        },
				        "multiInputOverride": {
				          "!doc": "Phaser.Input.multiInputOverride",
				          "!type": "+Number"
				        },
				        "hitCanvas": {
				          "!doc": "Phaser.Input.hitCanvas",
				          "!type": "+HTMLCanvasElement"
				        },
				        "mouse": {
				          "!doc": "Phaser.Input.mouse",
				          "!type": "+Phaser.Mouse"
				        },
				        "mousePointer": {
				          "!doc": "Phaser.Input.mousePointer",
				          "!type": "+Phaser.Pointer"
				        },
				        "moveCallbacks": {
				          "!doc": "Phaser.Input.moveCallbacks",
				          "!type": "+Array"
				        },
				        "getPointerFromIdentifier": {
				          "!doc": "Phaser.Input.getPointerFromIdentifier",
				          "!type": "fn(identifier: +Number) -> +Phaser.Pointer"
				        },
				        "recordRate": {
				          "!doc": "Phaser.Input.recordRate",
				          "!type": "+Number"
				        },
				        "pointers": {
				          "!doc": "Phaser.Input.pointers",
				          "!type": "+Array._Phaser.Pointer_"
				        },
				        "recordLimit": {
				          "!doc": "Phaser.Input.recordLimit",
				          "!type": "+Number"
				        },
				        "onHold": {
				          "!doc": "Phaser.Input.onHold",
				          "!type": "+Phaser.Signal"
				        },
				        "destroy": {
				          "!doc": "Phaser.Input.destroy",
				          "!type": "fn()"
				        },
				        "touch": {
				          "!doc": "Phaser.Input.touch",
				          "!type": "+Phaser.Touch"
				        },
				        "getPointerFromId": {
				          "!doc": "Phaser.Input.getPointerFromId",
				          "!type": "fn(pointerId: +Number) -> +Phaser.Pointer"
				        },
				        "maxPointers": {
				          "!doc": "Phaser.Input.maxPointers",
				          "!type": "+Number"
				        },
				        "gamepad": {
				          "!doc": "Phaser.Input.gamepad",
				          "!type": "+Phaser.Gamepad"
				        },
				        "totalInactivePointers": {
				          "!doc": "Phaser.Input.totalInactivePointers",
				          "!type": "+Number"
				        },
				        "reset": {
				          "!doc": "Phaser.Input.reset",
				          "!type": "fn(hard: +Boolean)"
				        },
				        "onDown": {
				          "!doc": "Phaser.Input.onDown",
				          "!type": "+Phaser.Signal"
				        },
				        "position": {
				          "!doc": "Phaser.Input.position",
				          "!type": "+Phaser.Point"
				        },
				        "circle": {
				          "!doc": "Phaser.Input.circle",
				          "!type": "+Phaser.Circle"
				        },
				        "minPriorityID": {
				          "!doc": "Phaser.Input.minPriorityID",
				          "!type": "+Number"
				        },
				        "mspointer": {
				          "!doc": "Phaser.Input.mspointer",
				          "!type": "+Phaser.MSPointer"
				        },
				        "updatePointer": {
				          "!doc": "Phaser.Input.updatePointer",
				          "!type": "fn(event: +Object) -> +Phaser.Pointer"
				        },
				        "pollLocked": {
				          "!doc": "Phaser.Input.pollLocked",
				          "!type": "+Boolean"
				        },
				        "game": {
				          "!doc": "Phaser.Input.game",
				          "!type": "+Phaser.Game"
				        },
				        "getLocalPosition": {
				          "!doc": "Phaser.Input.getLocalPosition",
				          "!type": "fn(displayObject: +Phaser.Sprite, pointer: +Phaser.Pointer) -> +Phaser.Point"
				        },
				        "hitContext": {
				          "!doc": "Phaser.Input.hitContext",
				          "!type": "+CanvasRenderingContext2D"
				        },
				        "justReleasedRate": {
				          "!doc": "Phaser.Input.justReleasedRate",
				          "!type": "+Number"
				        },
				        "justPressedRate": {
				          "!doc": "Phaser.Input.justPressedRate",
				          "!type": "+Number"
				        },
				        "update": {
				          "!doc": "Phaser.Input.update",
				          "!type": "fn()"
				        },
				        "scale": {
				          "!doc": "Phaser.Input.scale",
				          "!type": "+Phaser.Point"
				        },
				        "enabled": {
				          "!doc": "Phaser.Input.enabled",
				          "!type": "+Boolean"
				        },
				        "speed": {
				          "!doc": "Phaser.Input.speed",
				          "!type": "+Phaser.Point"
				        },
				        "resetSpeed": {
				          "!doc": "Phaser.Input.resetSpeed",
				          "!type": "fn(x: +Number, y: +Number)"
				        },
				        "stopPointer": {
				          "!doc": "Phaser.Input.stopPointer",
				          "!type": "fn(event: +Object) -> +Phaser.Pointer"
				        },
				        "pointer5": {
				          "!doc": "Phaser.Input.pointer5",
				          "!type": "+Phaser.Pointer"
				        },
				        "pointer6": {
				          "!doc": "Phaser.Input.pointer6",
				          "!type": "+Phaser.Pointer"
				        },
				        "pointer7": {
				          "!doc": "Phaser.Input.pointer7",
				          "!type": "+Phaser.Pointer"
				        },
				        "pointer8": {
				          "!doc": "Phaser.Input.pointer8",
				          "!type": "+Phaser.Pointer"
				        },
				        "deleteMoveCallback": {
				          "!doc": "Phaser.Input.deleteMoveCallback",
				          "!type": "fn(callback: +Function, context: +Object)"
				        },
				        "pointer9": {
				          "!doc": "Phaser.Input.pointer9",
				          "!type": "+Phaser.Pointer"
				        },
				        "pointer10": {
				          "!doc": "Phaser.Input.pointer10",
				          "!type": "+Phaser.Pointer"
				        },
				        "boot": {
				          "!doc": "Phaser.Input.boot",
				          "!type": "fn()"
				        },
				        "pointer1": {
				          "!doc": "Phaser.Input.pointer1",
				          "!type": "+Phaser.Pointer"
				        },
				        "pointer2": {
				          "!doc": "Phaser.Input.pointer2",
				          "!type": "+Phaser.Pointer"
				        },
				        "pointer3": {
				          "!doc": "Phaser.Input.pointer3",
				          "!type": "+Phaser.Pointer"
				        },
				        "pointer4": {
				          "!doc": "Phaser.Input.pointer4",
				          "!type": "+Phaser.Pointer"
				        },
				        "startPointer": {
				          "!doc": "Phaser.Input.startPointer",
				          "!type": "fn(event: +Object) -> +Phaser.Pointer"
				        },
				        "keyboard": {
				          "!doc": "Phaser.Input.keyboard",
				          "!type": "+Phaser.Keyboard"
				        },
				        "doubleTapRate": {
				          "!doc": "Phaser.Input.doubleTapRate",
				          "!type": "+Number"
				        },
				        "worldX": {
				          "!doc": "Phaser.Input.worldX",
				          "!type": "+Number"
				        },
				        "worldY": {
				          "!doc": "Phaser.Input.worldY",
				          "!type": "+Number"
				        },
				        "totalActivePointers": {
				          "!doc": "Phaser.Input.totalActivePointers",
				          "!type": "+integers"
				        },
				        "getPointer": {
				          "!doc": "Phaser.Input.getPointer",
				          "!type": "fn(isActive: +Boolean) -> +Phaser.Pointer"
				        },
				        "onUp": {
				          "!doc": "Phaser.Input.onUp",
				          "!type": "+Phaser.Signal"
				        },
				        "interactiveItems": {
				          "!doc": "Phaser.Input.interactiveItems",
				          "!type": "+Phaser.ArraySet"
				        },
				        "x": {
				          "!doc": "Phaser.Input.x",
				          "!type": "+Number"
				        },
				        "y": {
				          "!doc": "Phaser.Input.y",
				          "!type": "+Number"
				        },
				        "hitTest": {
				          "!doc": "Phaser.Input.hitTest",
				          "!type": "fn(displayObject: +DisplayObject, pointer: +Phaser.Pointer, localPoint: +Phaser.Point)"
				        },
				        "holdRate": {
				          "!doc": "Phaser.Input.holdRate",
				          "!type": "+Number"
				        }
				      },
				      "MOUSE_TOUCH_COMBINE": "+Number",
				      "MOUSE_OVERRIDES_TOUCH": "+Number"
				    },
				    "AudioSprite": {
				      "!doc": "Phaser.AudioSprite",
				      "!type": "fn(game: +Phaser.Game, key: +String)",
				      "prototype": {
				        "play": {
				          "!doc": "Phaser.AudioSprite.play",
				          "!type": "fn(marker: +String, volume: +Number) -> +Phaser.Sound"
				        },
				        "game": {
				          "!doc": "Phaser.AudioSprite.game",
				          "!type": "+Phaser.Game"
				        },
				        "stop": {
				          "!doc": "Phaser.AudioSprite.stop",
				          "!type": "fn(marker: +String)"
				        },
				        "sounds": {
				          "!doc": "Phaser.AudioSprite.sounds",
				          "!type": "+Object"
				        },
				        "get": {
				          "!doc": "Phaser.AudioSprite.get",
				          "!type": "fn(marker: +String) -> +Phaser.Sound"
				        },
				        "config": {
				          "!doc": "Phaser.AudioSprite.config",
				          "!type": "+Object"
				        },
				        "autoplayKey": {
				          "!doc": "Phaser.AudioSprite.autoplayKey",
				          "!type": "+String"
				        },
				        "key": {
				          "!doc": "Phaser.AudioSprite.key",
				          "!type": "+String"
				        },
				        "autoplay": {
				          "!doc": "Phaser.AudioSprite.autoplay",
				          "!type": "+Boolean"
				        }
				      }
				    },
				    "Camera": {
				      "FOLLOW_PLATFORMER": "+Number",
				      "!doc": "Phaser.Camera",
				      "FOLLOW_TOPDOWN": "+Number",
				      "!type": "fn(game: +Phaser.Game, id: +Number, x: +Number, y: +Number, width: +Number, height: +Number)",
				      "prototype": {
				        "game": {
				          "!doc": "Phaser.Camera.game",
				          "!type": "+Phaser.Game"
				        },
				        "atLimit": {
				          "!doc": "Phaser.Camera.atLimit",
				          "!type": "+Boolean"
				        },
				        "focusOnXY": {
				          "!doc": "Phaser.Camera.focusOnXY",
				          "!type": "fn(x: +Number, y: +Number)"
				        },
				        "update": {
				          "!doc": "Phaser.Camera.update",
				          "!type": "fn()"
				        },
				        "scale": {
				          "!doc": "Phaser.Camera.scale",
				          "!type": "+Phaser.Point"
				        },
				        "setPosition": {
				          "!doc": "Phaser.Camera.setPosition",
				          "!type": "fn(x: +Number, y: +Number)"
				        },
				        "view": {
				          "!doc": "Phaser.Camera.view",
				          "!type": "+Phaser.Rectangle"
				        },
				        "setSize": {
				          "!doc": "Phaser.Camera.setSize",
				          "!type": "fn(width: +Number, height: +Number)"
				        },
				        "world": {
				          "!doc": "Phaser.Camera.world",
				          "!type": "+Phaser.World"
				        },
				        "checkBounds": {
				          "!doc": "Phaser.Camera.checkBounds",
				          "!type": "fn()"
				        },
				        "focusOn": {
				          "!doc": "Phaser.Camera.focusOn",
				          "!type": "fn(displayObject: +Object)"
				        },
				        "id": {
				          "!doc": "Phaser.Camera.id",
				          "!type": "+Number"
				        },
				        "deadzone": {
				          "!doc": "Phaser.Camera.deadzone",
				          "!type": "+Phaser.Rectangle"
				        },
				        "height": {
				          "!doc": "Phaser.Camera.height",
				          "!type": "+Number"
				        },
				        "roundPx": {
				          "!doc": "Phaser.Camera.roundPx",
				          "!type": "+Boolean"
				        },
				        "visible": {
				          "!doc": "Phaser.Camera.visible",
				          "!type": "+Boolean"
				        },
				        "follow": {
				          "!doc": "Phaser.Camera.follow",
				          "!type": "fn(target: +Phaser.Sprite, style: +Number)"
				        },
				        "setBoundsToWorld": {
				          "!doc": "Phaser.Camera.setBoundsToWorld",
				          "!type": "fn()"
				        },
				        "target": {
				          "!doc": "Phaser.Camera.target",
				          "!type": "+Phaser.Sprite"
				        },
				        "displayObject": {
				          "!doc": "Phaser.Camera.displayObject",
				          "!type": "+PIXI.DisplayObject"
				        },
				        "bounds": {
				          "!doc": "Phaser.Camera.bounds",
				          "!type": "+Phaser.Rectangle"
				        },
				        "totalInView": {
				          "!doc": "Phaser.Camera.totalInView",
				          "!type": "+Number"
				        },
				        "x": {
				          "!doc": "Phaser.Camera.x",
				          "!type": "+Number"
				        },
				        "width": {
				          "!doc": "Phaser.Camera.width",
				          "!type": "+Number"
				        },
				        "reset": {
				          "!doc": "Phaser.Camera.reset",
				          "!type": "fn()"
				        },
				        "y": {
				          "!doc": "Phaser.Camera.y",
				          "!type": "+Number"
				        },
				        "position": {
				          "!doc": "Phaser.Camera.position",
				          "!type": "+Phaser.Point"
				        },
				        "preUpdate": {
				          "!doc": "Phaser.Camera.preUpdate",
				          "!type": "fn()"
				        },
				        "unfollow": {
				          "!doc": "Phaser.Camera.unfollow",
				          "!type": "fn()"
				        }
				      },
				      "FOLLOW_LOCKON": "+Number",
				      "FOLLOW_TOPDOWN_TIGHT": "+Number"
				    },
				    "UP": {
				      "!doc": "Phaser.UP",
				      "!type": "+Number"
				    },
				    "Tween": {
				      "!doc": "Phaser.Tween",
				      "!type": "fn(target: +Object, game: +Phaser.Game, manager: +Phaser.TweenManager)",
				      "prototype": {
				        "game": {
				          "!doc": "Phaser.Tween.game",
				          "!type": "+Phaser.Game"
				        },
				        "timeScale": {
				          "!doc": "Phaser.Tween.timeScale",
				          "!type": "+Number"
				        },
				        "update": {
				          "!doc": "Phaser.Tween.update",
				          "!type": "fn(time: +Number) -> +Boolean"
				        },
				        "updateTweenData": {
				          "!doc": "Phaser.Tween.updateTweenData",
				          "!type": "fn(property: +String, value: +Number, index: +Number) -> +Phaser.Tween"
				        },
				        "onUpdateCallback": {
				          "!doc": "Phaser.Tween.onUpdateCallback",
				          "!type": "fn(callback: +Function, callbackContext: +Object) -> +Phaser.Tween"
				        },
				        "easing": {
				          "!doc": "Phaser.Tween.easing",
				          "!type": "fn(ease: +Function, index: +Number) -> +Phaser.Tween"
				        },
				        "current": {
				          "!doc": "Phaser.Tween.current",
				          "!type": "+Number"
				        },
				        "yoyoDelay": {
				          "!doc": "Phaser.Tween.yoyoDelay",
				          "!type": "fn(duration: +Number, index: +Number) -> +Phaser.Tween"
				        },
				        "onStart": {
				          "!doc": "Phaser.Tween.onStart",
				          "!type": "+Phaser.Signal"
				        },
				        "yoyo": {
				          "!doc": "Phaser.Tween.yoyo",
				          "!type": "fn(enable: +Boolean, yoyoDelay: +Number, index: +Number) -> +Phaser.Tween"
				        },
				        "isRunning": {
				          "!doc": "Phaser.Tween.isRunning",
				          "!type": "+Boolean"
				        },
				        "loop": {
				          "!doc": "Phaser.Tween.loop",
				          "!type": "fn(value: +Boolean) -> +Phaser.Tween"
				        },
				        "repeat": {
				          "!doc": "Phaser.Tween.repeat",
				          "!type": "fn(total: +Number, repeat: +Number, index: +Number) -> +Phaser.Tween"
				        },
				        "generateData": {
				          "!doc": "Phaser.Tween.generateData",
				          "!type": "fn(frameRate: +Number, data: +Array) -> +Array"
				        },
				        "from": {
				          "!doc": "Phaser.Tween.from",
				          "!type": "fn(properties: +Object, duration: +Number, ease: +Function, autoStart: +Boolean, delay: +Number, repeat: +Number, yoyo: +Boolean) -> +Phaser.Tween"
				        },
				        "onRepeat": {
				          "!doc": "Phaser.Tween.onRepeat",
				          "!type": "+Phaser.Signal"
				        },
				        "repeatDelay": {
				          "!doc": "Phaser.Tween.repeatDelay",
				          "!type": "fn(duration: +Number, index: +Number) -> +Phaser.Tween"
				        },
				        "repeatCounter": {
				          "!doc": "Phaser.Tween.repeatCounter",
				          "!type": "+Number"
				        },
				        "onChildComplete": {
				          "!doc": "Phaser.Tween.onChildComplete",
				          "!type": "+Phaser.Signal"
				        },
				        "resume": {
				          "!doc": "Phaser.Tween.resume",
				          "!type": "fn()"
				        },
				        "totalDuration": {
				          "!doc": "Phaser.Tween.totalDuration",
				          "!type": "+Phaser.TweenData"
				        },
				        "isPaused": {
				          "!doc": "Phaser.Tween.isPaused",
				          "!type": "+Boolean"
				        },
				        "chain": {
				          "!doc": "Phaser.Tween.chain",
				          "!type": "fn(tweens: +Phaser.Tween) -> +Phaser.Tween"
				        },
				        "manager": {
				          "!doc": "Phaser.Tween.manager",
				          "!type": "+Phaser.TweenManager"
				        },
				        "onComplete": {
				          "!doc": "Phaser.Tween.onComplete",
				          "!type": "+Phaser.Signal"
				        },
				        "start": {
				          "!doc": "Phaser.Tween.start",
				          "!type": "fn(index: +Number) -> +Phaser.Tween"
				        },
				        "reverse": {
				          "!doc": "Phaser.Tween.reverse",
				          "!type": "+Boolean"
				        },
				        "pause": {
				          "!doc": "Phaser.Tween.pause",
				          "!type": "fn()"
				        },
				        "target": {
				          "!doc": "Phaser.Tween.target",
				          "!type": "+Object"
				        },
				        "interpolation": {
				          "!doc": "Phaser.Tween.interpolation",
				          "!type": "fn(interpolation: +Function, context: +Object, index: +Number) -> +Phaser.Tween"
				        },
				        "delay": {
				          "!doc": "Phaser.Tween.delay",
				          "!type": "fn(duration: +Number, index: +Number) -> +Phaser.Tween"
				        },
				        "stop": {
				          "!doc": "Phaser.Tween.stop",
				          "!type": "fn(complete: +Boolean) -> +Phaser.Tween"
				        },
				        "chainedTween": {
				          "!doc": "Phaser.Tween.chainedTween",
				          "!type": "+Phaser.Tween"
				        },
				        "timeline": {
				          "!doc": "Phaser.Tween.timeline",
				          "!type": "+Array"
				        },
				        "frameBased": {
				          "!doc": "Phaser.Tween.frameBased",
				          "!type": "+Boolean"
				        },
				        "to": {
				          "!doc": "Phaser.Tween.to",
				          "!type": "fn(properties: +Object, duration: +Number, ease: +Function, autoStart: +Boolean, delay: +Number, repeat: +Number, yoyo: +Boolean) -> +Phaser.Tween"
				        },
				        "pendingDelete": {
				          "!doc": "Phaser.Tween.pendingDelete",
				          "!type": "+Boolean"
				        },
				        "properties": {
				          "!doc": "Phaser.Tween.properties",
				          "!type": "+Object"
				        },
				        "onLoop": {
				          "!doc": "Phaser.Tween.onLoop",
				          "!type": "+Phaser.Signal"
				        }
				      }
				    },
				    "Polygon": {
				      "!doc": "Phaser.Polygon",
				      "!type": "fn(points: +Array._Phaser.Point_)",
				      "prototype": {
				        "flatten": {
				          "!doc": "Phaser.Polygon.flatten",
				          "!type": "fn() -> +Phaser.Polygon"
				        },
				        "area": {
				          "!doc": "Phaser.Polygon.area",
				          "!type": "+Number"
				        },
				        "contains": {
				          "!doc": "Phaser.Polygon.contains",
				          "!type": "fn(x: +Number, y: +Number) -> +Boolean"
				        },
				        "toNumberArray": {
				          "!doc": "Phaser.Polygon.toNumberArray",
				          "!type": "fn(output: +Array) -> +Array"
				        },
				        "clone": {
				          "!doc": "Phaser.Polygon.clone",
				          "!type": "fn(output: +Phaser.Polygon) -> +Phaser.Polygon"
				        },
				        "setTo": {
				          "!doc": "Phaser.Polygon.setTo",
				          "!type": "fn(points: +Array._Phaser.Point_) -> +Phaser.Polygon"
				        },
				        "closed": {
				          "!doc": "Phaser.Polygon.closed",
				          "!type": "+Boolean"
				        },
				        "type": {
				          "!doc": "Phaser.Polygon.type",
				          "!type": "+Number"
				        },
				        "points": {
				          "!doc": "Phaser.Polygon.points",
				          "!type": "+Array._Phaser.Point_"
				        }
				      }
				    },
				    "InputHandler": {
				      "!doc": "Phaser.InputHandler",
				      "!type": "fn(sprite: +Phaser.Sprite)",
				      "prototype": {
				        "pointerTimeUp": {
				          "!doc": "Phaser.InputHandler.pointerTimeUp",
				          "!type": "fn(pointerId: +Number) -> +Number"
				        },
				        "enableDrag": {
				          "!doc": "Phaser.InputHandler.enableDrag",
				          "!type": "fn(lockCenter: +Boolean, bringToTop: +Boolean, pixelPerfect: +Boolean, alphaThreshold: +Boolean, boundsRect: +Phaser.Rectangle, boundsSprite: +Phaser.Sprite)"
				        },
				        "overDuration": {
				          "!doc": "Phaser.InputHandler.overDuration",
				          "!type": "fn(pointerId: +Number) -> +Number"
				        },
				        "pixelPerfectClick": {
				          "!doc": "Phaser.InputHandler.pixelPerfectClick",
				          "!type": "+Boolean"
				        },
				        "globalToLocalX": {
				          "!doc": "Phaser.InputHandler.globalToLocalX",
				          "!type": "fn(x: +Number)"
				        },
				        "snapPoint": {
				          "!doc": "Phaser.InputHandler.snapPoint",
				          "!type": "+Phaser.Point"
				        },
				        "globalToLocalY": {
				          "!doc": "Phaser.InputHandler.globalToLocalY",
				          "!type": "fn(y: +Number)"
				        },
				        "allowVerticalDrag": {
				          "!doc": "Phaser.InputHandler.allowVerticalDrag",
				          "!type": "+Boolean"
				        },
				        "checked": {
				          "!doc": "Phaser.InputHandler.checked",
				          "!type": "+Boolean"
				        },
				        "checkPixel": {
				          "!doc": "Phaser.InputHandler.checkPixel",
				          "!type": "fn(x: +Number, y: +Number, pointer: +Phaser.Pointer) -> +Boolean"
				        },
				        "pointerOut": {
				          "!doc": "Phaser.InputHandler.pointerOut",
				          "!type": "fn(pointerId: +Number) -> +Boolean"
				        },
				        "bringToTop": {
				          "!doc": "Phaser.InputHandler.bringToTop",
				          "!type": "+Boolean"
				        },
				        "disableDrag": {
				          "!doc": "Phaser.InputHandler.disableDrag",
				          "!type": "fn()"
				        },
				        "isPixelPerfect": {
				          "!doc": "Phaser.InputHandler.isPixelPerfect",
				          "!type": "fn() -> +Boolean"
				        },
				        "dragStartPoint": {
				          "!doc": "Phaser.InputHandler.dragStartPoint",
				          "!type": "+Phaser.Point"
				        },
				        "useHandCursor": {
				          "!doc": "Phaser.InputHandler.useHandCursor",
				          "!type": "+Boolean"
				        },
				        "destroy": {
				          "!doc": "Phaser.InputHandler.destroy",
				          "!type": "fn()"
				        },
				        "pointerTimeOut": {
				          "!doc": "Phaser.InputHandler.pointerTimeOut",
				          "!type": "fn(pointerId: +Number) -> +Number"
				        },
				        "pointerDragged": {
				          "!doc": "Phaser.InputHandler.pointerDragged",
				          "!type": "fn(pointerId: +Number) -> +Boolean"
				        },
				        "validForInput": {
				          "!doc": "Phaser.InputHandler.validForInput",
				          "!type": "fn(highestID: +Number, highestRenderID: +Number, includePixelPerfect: +Boolean) -> +Boolean"
				        },
				        "pointerDown": {
				          "!doc": "Phaser.InputHandler.pointerDown",
				          "!type": "fn(pointerId: +Number) -> +Boolean"
				        },
				        "stop": {
				          "!doc": "Phaser.InputHandler.stop",
				          "!type": "fn()"
				        },
				        "enableSnap": {
				          "!doc": "Phaser.InputHandler.enableSnap",
				          "!type": "fn(snapX: +Number, snapY: +Number, onDrag: +Boolean, onRelease: +Boolean, snapOffsetX: +Number, snapOffsetY: +Number)"
				        },
				        "startDrag": {
				          "!doc": "Phaser.InputHandler.startDrag",
				          "!type": "fn(pointer: +Phaser.Pointer)"
				        },
				        "reset": {
				          "!doc": "Phaser.InputHandler.reset",
				          "!type": "fn()"
				        },
				        "scaleLayer": {
				          "!doc": "Phaser.InputHandler.scaleLayer",
				          "!type": "+Boolean"
				        },
				        "checkPointerOver": {
				          "!doc": "Phaser.InputHandler.checkPointerOver",
				          "!type": "fn(pointer: +Phaser.Pointer, fastTest: +Boolean) -> +Boolean"
				        },
				        "pointerTimeDown": {
				          "!doc": "Phaser.InputHandler.pointerTimeDown",
				          "!type": "fn(pointerId: +Number) -> +Number"
				        },
				        "game": {
				          "!doc": "Phaser.InputHandler.game",
				          "!type": "+Phaser.Game"
				        },
				        "pixelPerfectOver": {
				          "!doc": "Phaser.InputHandler.pixelPerfectOver",
				          "!type": "+Boolean"
				        },
				        "justOut": {
				          "!doc": "Phaser.InputHandler.justOut",
				          "!type": "fn(pointerId: +Number, delay: +Number) -> +Boolean"
				        },
				        "snapX": {
				          "!doc": "Phaser.InputHandler.snapX",
				          "!type": "+Number"
				        },
				        "snapY": {
				          "!doc": "Phaser.InputHandler.snapY",
				          "!type": "+Number"
				        },
				        "updateDrag": {
				          "!doc": "Phaser.InputHandler.updateDrag",
				          "!type": "fn(pointer: +Phaser.Pointer) -> +Boolean"
				        },
				        "update": {
				          "!doc": "Phaser.InputHandler.update",
				          "!type": "fn(pointer: +Phaser.Pointer)"
				        },
				        "pointerTimeOver": {
				          "!doc": "Phaser.InputHandler.pointerTimeOver",
				          "!type": "fn(pointerId: +Number) -> +Number"
				        },
				        "enabled": {
				          "!doc": "Phaser.InputHandler.enabled",
				          "!type": "+Boolean"
				        },
				        "snapOffsetX": {
				          "!doc": "Phaser.InputHandler.snapOffsetX",
				          "!type": "+Number"
				        },
				        "allowHorizontalDrag": {
				          "!doc": "Phaser.InputHandler.allowHorizontalDrag",
				          "!type": "+Boolean"
				        },
				        "draggable": {
				          "!doc": "Phaser.InputHandler.draggable",
				          "!type": "+Boolean"
				        },
				        "snapOffsetY": {
				          "!doc": "Phaser.InputHandler.snapOffsetY",
				          "!type": "+Number"
				        },
				        "consumePointerEvent": {
				          "!doc": "Phaser.InputHandler.consumePointerEvent",
				          "!type": "+Boolean"
				        },
				        "sprite": {
				          "!doc": "Phaser.InputHandler.sprite",
				          "!type": "+Phaser.Sprite"
				        },
				        "justOver": {
				          "!doc": "Phaser.InputHandler.justOver",
				          "!type": "fn(pointerId: +Number, delay: +Number) -> +Boolean"
				        },
				        "justReleased": {
				          "!doc": "Phaser.InputHandler.justReleased",
				          "!type": "fn(pointerId: +Number, delay: +Number) -> +Boolean"
				        },
				        "checkBoundsSprite": {
				          "!doc": "Phaser.InputHandler.checkBoundsSprite",
				          "!type": "fn()"
				        },
				        "boundsSprite": {
				          "!doc": "Phaser.InputHandler.boundsSprite",
				          "!type": "+Phaser.Sprite"
				        },
				        "dragOffset": {
				          "!doc": "Phaser.InputHandler.dragOffset",
				          "!type": "+Phaser.Point"
				        },
				        "justPressed": {
				          "!doc": "Phaser.InputHandler.justPressed",
				          "!type": "fn(pointerId: +Number, delay: +Number) -> +Boolean"
				        },
				        "pointerOver": {
				          "!doc": "Phaser.InputHandler.pointerOver",
				          "!type": "fn(pointerId: +Number) -> +Boolean"
				        },
				        "checkBoundsRect": {
				          "!doc": "Phaser.InputHandler.checkBoundsRect",
				          "!type": "fn()"
				        },
				        "pixelPerfectAlpha": {
				          "!doc": "Phaser.InputHandler.pixelPerfectAlpha",
				          "!type": "+Number"
				        },
				        "setDragLock": {
				          "!doc": "Phaser.InputHandler.setDragLock",
				          "!type": "fn(allowHorizontal: +Boolean, allowVertical: +Boolean)"
				        },
				        "start": {
				          "!doc": "Phaser.InputHandler.start",
				          "!type": "fn(priority: +Number, useHandCursor: +Boolean) -> +Phaser.Sprite"
				        },
				        "dragFromCenter": {
				          "!doc": "Phaser.InputHandler.dragFromCenter",
				          "!type": "+Boolean"
				        },
				        "snapOnRelease": {
				          "!doc": "Phaser.InputHandler.snapOnRelease",
				          "!type": "+Boolean"
				        },
				        "downDuration": {
				          "!doc": "Phaser.InputHandler.downDuration",
				          "!type": "fn(pointerId: +Number) -> +Number"
				        },
				        "priorityID": {
				          "!doc": "Phaser.InputHandler.priorityID",
				          "!type": "+Number"
				        },
				        "pointerUp": {
				          "!doc": "Phaser.InputHandler.pointerUp",
				          "!type": "fn(pointerId: +Number) -> +Boolean"
				        },
				        "snapOffset": {
				          "!doc": "Phaser.InputHandler.snapOffset",
				          "!type": "+Phaser.Point"
				        },
				        "snapOnDrag": {
				          "!doc": "Phaser.InputHandler.snapOnDrag",
				          "!type": "+Boolean"
				        },
				        "pointerX": {
				          "!doc": "Phaser.InputHandler.pointerX",
				          "!type": "fn(pointerId: +Number) -> +Number"
				        },
				        "pointerY": {
				          "!doc": "Phaser.InputHandler.pointerY",
				          "!type": "fn(pointerId: +Number) -> +Number"
				        },
				        "stopDrag": {
				          "!doc": "Phaser.InputHandler.stopDrag",
				          "!type": "fn(pointer: +Phaser.Pointer)"
				        },
				        "isDragged": {
				          "!doc": "Phaser.InputHandler.isDragged",
				          "!type": "+Boolean"
				        },
				        "checkPointerDown": {
				          "!doc": "Phaser.InputHandler.checkPointerDown",
				          "!type": "fn(pointer: +Phaser.Pointer, fastTest: +Boolean) -> +Boolean"
				        },
				        "boundsRect": {
				          "!doc": "Phaser.InputHandler.boundsRect",
				          "!type": "+Phaser.Rectangle"
				        },
				        "disableSnap": {
				          "!doc": "Phaser.InputHandler.disableSnap",
				          "!type": "fn()"
				        }
				      }
				    },
				    "Circle": {
				      "intersectsRectangle": {
				        "!doc": "Phaser.Circle.intersectsRectangle",
				        "!type": "fn(c: +Phaser.Circle, r: +Phaser.Rectangle) -> +Boolean"
				      },
				      "intersects": {
				        "!doc": "Phaser.Circle.intersects",
				        "!type": "fn(a: +Phaser.Circle, b: +Phaser.Circle) -> +Boolean"
				      },
				      "!doc": "Phaser.Circle",
				      "equals": {
				        "!doc": "Phaser.Circle.equals",
				        "!type": "fn(a: +Phaser.Circle, b: +Phaser.Circle) -> +Boolean"
				      },
				      "!type": "fn(x: +Number, y: +Number, diameter: +Number)",
				      "prototype": {
				        "circumferencePoint": {
				          "!doc": "Phaser.Circle.circumferencePoint",
				          "!type": "fn(angle: +Number, asDegrees: +Boolean, out: +Phaser.Point) -> +Phaser.Point"
				        },
				        "area": {
				          "!doc": "Phaser.Circle.area",
				          "!type": "+Number"
				        },
				        "distance": {
				          "!doc": "Phaser.Circle.distance",
				          "!type": "fn(dest: +Object, round: +Boolean) -> +Number"
				        },
				        "offset": {
				          "!doc": "Phaser.Circle.offset",
				          "!type": "fn(dx: +Number, dy: +Number) -> +Phaser.Circle"
				        },
				        "bottom": {
				          "!doc": "Phaser.Circle.bottom",
				          "!type": "+Number"
				        },
				        "offsetPoint": {
				          "!doc": "Phaser.Circle.offsetPoint",
				          "!type": "fn(point: +Point) -> +Phaser.Circle"
				        },
				        "right": {
				          "!doc": "Phaser.Circle.right",
				          "!type": "+Number"
				        },
				        "type": {
				          "!doc": "Phaser.Circle.type",
				          "!type": "+Number"
				        },
				        "getBounds": {
				          "!doc": "Phaser.Circle.getBounds",
				          "!type": "fn() -> +Phaser.Rectangle"
				        },
				        "copyFrom": {
				          "!doc": "Phaser.Circle.copyFrom",
				          "!type": "fn(source: +Object) -> +Phaser.Circle"
				        },
				        "empty": {
				          "!doc": "Phaser.Circle.empty",
				          "!type": "+Boolean"
				        },
				        "copyTo": {
				          "!doc": "Phaser.Circle.copyTo",
				          "!type": "fn(dest: +Object) -> +Object"
				        },
				        "random": {
				          "!doc": "Phaser.Circle.random",
				          "!type": "fn(out: +Phaser.Point) -> +Phaser.Point"
				        },
				        "contains": {
				          "!doc": "Phaser.Circle.contains",
				          "!type": "fn(x: +Number, y: +Number) -> +Boolean"
				        },
				        "diameter": {
				          "!doc": "Phaser.Circle.diameter",
				          "!type": "+Number"
				        },
				        "top": {
				          "!doc": "Phaser.Circle.top",
				          "!type": "+Number"
				        },
				        "left": {
				          "!doc": "Phaser.Circle.left",
				          "!type": "+Object"
				        },
				        "circumference": {
				          "!doc": "Phaser.Circle.circumference",
				          "!type": "fn() -> +Number"
				        },
				        "clone": {
				          "!doc": "Phaser.Circle.clone",
				          "!type": "fn(output: +Phaser.Circle) -> +Phaser.Circle"
				        },
				        "x": {
				          "!doc": "Phaser.Circle.x",
				          "!type": "+Number"
				        },
				        "setTo": {
				          "!doc": "Phaser.Circle.setTo",
				          "!type": "fn(x: +Number, y: +Number, diameter: +Number) -> +Phaser.Circle"
				        },
				        "y": {
				          "!doc": "Phaser.Circle.y",
				          "!type": "+Number"
				        },
				        "toString": {
				          "!doc": "Phaser.Circle.toString",
				          "!type": "fn() -> +String"
				        },
				        "radius": {
				          "!doc": "Phaser.Circle.radius",
				          "!type": "+Number"
				        }
				      }
				    },
				    "TILEMAP": {
				      "!doc": "Phaser.TILEMAP",
				      "!type": "+Number"
				    },
				    "RECTANGLE": {
				      "!doc": "Phaser.RECTANGLE",
				      "!type": "+Number"
				    },
				    "ArraySet": {
				      "!doc": "Phaser.ArraySet",
				      "!type": "fn(list: +Array._any_)",
				      "prototype": {
				        "add": {
				          "!doc": "Phaser.ArraySet.add",
				          "!type": "fn(item: +Object) -> +Object"
				        },
				        "next": {
				          "!doc": "Phaser.ArraySet.next",
				          "!type": "+Object"
				        },
				        "getIndex": {
				          "!doc": "Phaser.ArraySet.getIndex",
				          "!type": "fn(item: +Object) -> +Number"
				        },
				        "getByKey": {
				          "!doc": "Phaser.ArraySet.getByKey",
				          "!type": "fn(property: +String, value: +Object) -> +Object"
				        },
				        "list": {
				          "!doc": "Phaser.ArraySet.list",
				          "!type": "+Array._any_"
				        },
				        "remove": {
				          "!doc": "Phaser.ArraySet.remove",
				          "!type": "fn(item: +Object) -> +Object"
				        },
				        "callAll": {
				          "!doc": "Phaser.ArraySet.callAll",
				          "!type": "fn(key: +String, parameter: +any)"
				        },
				        "removeAll": {
				          "!doc": "Phaser.ArraySet.removeAll",
				          "!type": "fn(destroy: +Boolean)"
				        },
				        "total": {
				          "!doc": "Phaser.ArraySet.total",
				          "!type": "+Number"
				        },
				        "exists": {
				          "!doc": "Phaser.ArraySet.exists",
				          "!type": "fn(item: +Object) -> +Boolean"
				        },
				        "reset": {
				          "!doc": "Phaser.ArraySet.reset",
				          "!type": "fn()"
				        },
				        "position": {
				          "!doc": "Phaser.ArraySet.position",
				          "!type": "+Number"
				        },
				        "setAll": {
				          "!doc": "Phaser.ArraySet.setAll",
				          "!type": "fn(key: +Object, value: +Object)"
				        },
				        "first": {
				          "!doc": "Phaser.ArraySet.first",
				          "!type": "+Object"
				        }
				      }
				    },
				    "RandomDataGenerator": {
				      "!doc": "Phaser.RandomDataGenerator",
				      "!type": "fn(seeds: +Array._any_)",
				      "prototype": {
				        "normal": {
				          "!doc": "Phaser.RandomDataGenerator.normal",
				          "!type": "fn() -> +Number"
				        },
				        "integerInRange": {
				          "!doc": "Phaser.RandomDataGenerator.integerInRange",
				          "!type": "fn(min: +Number, max: +Number) -> +Number"
				        },
				        "integer": {
				          "!doc": "Phaser.RandomDataGenerator.integer",
				          "!type": "fn() -> +Number"
				        },
				        "real": {
				          "!doc": "Phaser.RandomDataGenerator.real",
				          "!type": "fn() -> +Number"
				        },
				        "uuid": {
				          "!doc": "Phaser.RandomDataGenerator.uuid",
				          "!type": "fn() -> +String"
				        },
				        "realInRange": {
				          "!doc": "Phaser.RandomDataGenerator.realInRange",
				          "!type": "fn(min: +Number, max: +Number) -> +Number"
				        },
				        "pick": {
				          "!doc": "Phaser.RandomDataGenerator.pick",
				          "!type": "fn(ary: +Array) -> +Object"
				        },
				        "angle": {
				          "!doc": "Phaser.RandomDataGenerator.angle",
				          "!type": "fn() -> +Number"
				        },
				        "sow": {
				          "!doc": "Phaser.RandomDataGenerator.sow",
				          "!type": "fn(seeds: +Array._any_)"
				        },
				        "state": {
				          "!doc": "Phaser.RandomDataGenerator.state",
				          "!type": "fn(state: +String) -> +String"
				        },
				        "weightedPick": {
				          "!doc": "Phaser.RandomDataGenerator.weightedPick",
				          "!type": "fn(ary: +Array) -> +Object"
				        },
				        "frac": {
				          "!doc": "Phaser.RandomDataGenerator.frac",
				          "!type": "fn() -> +Number"
				        },
				        "between": {
				          "!doc": "Phaser.RandomDataGenerator.between",
				          "!type": "fn(min: +Number, max: +Number) -> +Number"
				        },
				        "timestamp": {
				          "!doc": "Phaser.RandomDataGenerator.timestamp",
				          "!type": "fn(min: +Number, max: +Number) -> +Number"
				        }
				      }
				    },
				    "Device": {
				      "!doc": "Phaser.Device",
				      "onInitialized": {
				        "!doc": "Phaser.Device.onInitialized",
				        "!type": "+Phaser.Signal"
				      },
				      "!type": "fn()",
				      "prototype": {
				        "fullscreenKeyboard": {
				          "!doc": "Phaser.Device.fullscreenKeyboard",
				          "!type": "+Boolean"
				        },
				        "arora": {
				          "!doc": "Phaser.Device.arora",
				          "!type": "+Boolean"
				        },
				        "windowsPhone": {
				          "!doc": "Phaser.Device.windowsPhone",
				          "!type": "+Boolean"
				        },
				        "opera": {
				          "!doc": "Phaser.Device.opera",
				          "!type": "+Boolean"
				        },
				        "webGL": {
				          "!doc": "Phaser.Device.webGL",
				          "!type": "+Boolean"
				        },
				        "getUserMedia": {
				          "!doc": "Phaser.Device.getUserMedia",
				          "!type": "+Boolean"
				        },
				        "firefox": {
				          "!doc": "Phaser.Device.firefox",
				          "!type": "+Boolean"
				        },
				        "ieVersion": {
				          "!doc": "Phaser.Device.ieVersion",
				          "!type": "+Number"
				        },
				        "hlsVideo": {
				          "!doc": "Phaser.Device.hlsVideo",
				          "!type": "+Boolean"
				        },
				        "canvasBitBltShift": {
				          "!doc": "Phaser.Device.canvasBitBltShift",
				          "!type": "+Boolean"
				        },
				        "opus": {
				          "!doc": "Phaser.Device.opus",
				          "!type": "+Boolean"
				        },
				        "iOS": {
				          "!doc": "Phaser.Device.iOS",
				          "!type": "+Boolean"
				        },
				        "vibration": {
				          "!doc": "Phaser.Device.vibration",
				          "!type": "+Boolean"
				        },
				        "epiphany": {
				          "!doc": "Phaser.Device.epiphany",
				          "!type": "+Boolean"
				        },
				        "ogg": {
				          "!doc": "Phaser.Device.ogg",
				          "!type": "+Boolean"
				        },
				        "audioData": {
				          "!doc": "Phaser.Device.audioData",
				          "!type": "+Boolean"
				        },
				        "iPhone4": {
				          "!doc": "Phaser.Device.iPhone4",
				          "!type": "+Boolean"
				        },
				        "cordova": {
				          "!doc": "Phaser.Device.cordova",
				          "!type": "+Boolean"
				        },
				        "isConsoleOpen": {
				          "!doc": "Phaser.Device.isConsoleOpen",
				          "!type": "fn()"
				        },
				        "electron": {
				          "!doc": "Phaser.Device.electron",
				          "!type": "+Boolean"
				        },
				        "quirksMode": {
				          "!doc": "Phaser.Device.quirksMode",
				          "!type": "+Boolean"
				        },
				        "nodeWebkit": {
				          "!doc": "Phaser.Device.nodeWebkit",
				          "!type": "+Boolean"
				        },
				        "worker": {
				          "!doc": "Phaser.Device.worker",
				          "!type": "+Boolean"
				        },
				        "ie": {
				          "!doc": "Phaser.Device.ie",
				          "!type": "+Boolean"
				        },
				        "css3D": {
				          "!doc": "Phaser.Device.css3D",
				          "!type": "+Boolean"
				        },
				        "canvas": {
				          "!doc": "Phaser.Device.canvas",
				          "!type": "+Boolean"
				        },
				        "cancelFullscreen": {
				          "!doc": "Phaser.Device.cancelFullscreen",
				          "!type": "+String"
				        },
				        "firefoxVersion": {
				          "!doc": "Phaser.Device.firefoxVersion",
				          "!type": "+Number"
				        },
				        "chrome": {
				          "!doc": "Phaser.Device.chrome",
				          "!type": "+Boolean"
				        },
				        "wheelType": {
				          "!doc": "Phaser.Device.wheelType",
				          "!type": "+String"
				        },
				        "touch": {
				          "!doc": "Phaser.Device.touch",
				          "!type": "+Boolean"
				        },
				        "chromeOS": {
				          "!doc": "Phaser.Device.chromeOS",
				          "!type": "+Boolean"
				        },
				        "webm": {
				          "!doc": "Phaser.Device.webm",
				          "!type": "+Boolean"
				        },
				        "node": {
				          "!doc": "Phaser.Device.node",
				          "!type": "+Boolean"
				        },
				        "fullscreen": {
				          "!doc": "Phaser.Device.fullscreen",
				          "!type": "+Boolean"
				        },
				        "pixelRatio": {
				          "!doc": "Phaser.Device.pixelRatio",
				          "!type": "+Number"
				        },
				        "support32bit": {
				          "!doc": "Phaser.Device.support32bit",
				          "!type": "+Boolean"
				        },
				        "deviceReadyAt": {
				          "!doc": "Phaser.Device.deviceReadyAt",
				          "!type": "+Number"
				        },
				        "mobileSafari": {
				          "!doc": "Phaser.Device.mobileSafari",
				          "!type": "+Boolean"
				        },
				        "mspointer": {
				          "!doc": "Phaser.Device.mspointer",
				          "!type": "+Boolean"
				        },
				        "iPhone": {
				          "!doc": "Phaser.Device.iPhone",
				          "!type": "+Boolean"
				        },
				        "requestFullscreen": {
				          "!doc": "Phaser.Device.requestFullscreen",
				          "!type": "+String"
				        },
				        "safari": {
				          "!doc": "Phaser.Device.safari",
				          "!type": "+Boolean"
				        },
				        "android": {
				          "!doc": "Phaser.Device.android",
				          "!type": "+Boolean"
				        },
				        "localStorage": {
				          "!doc": "Phaser.Device.localStorage",
				          "!type": "+Boolean"
				        },
				        "mp4Video": {
				          "!doc": "Phaser.Device.mp4Video",
				          "!type": "+Boolean"
				        },
				        "vp9Video": {
				          "!doc": "Phaser.Device.vp9Video",
				          "!type": "+Boolean"
				        },
				        "LITTLE_ENDIAN": {
				          "!doc": "Phaser.Device.LITTLE_ENDIAN",
				          "!type": "+Boolean"
				        },
				        "chromeVersion": {
				          "!doc": "Phaser.Device.chromeVersion",
				          "!type": "+Number"
				        },
				        "h264Video": {
				          "!doc": "Phaser.Device.h264Video",
				          "!type": "+Boolean"
				        },
				        "desktop": {
				          "!doc": "Phaser.Device.desktop",
				          "!type": "+Boolean"
				        },
				        "crosswalk": {
				          "!doc": "Phaser.Device.crosswalk",
				          "!type": "+Boolean"
				        },
				        "file": {
				          "!doc": "Phaser.Device.file",
				          "!type": "+Boolean"
				        },
				        "webmVideo": {
				          "!doc": "Phaser.Device.webmVideo",
				          "!type": "+Boolean"
				        },
				        "linux": {
				          "!doc": "Phaser.Device.linux",
				          "!type": "+Boolean"
				        },
				        "pointerLock": {
				          "!doc": "Phaser.Device.pointerLock",
				          "!type": "+Boolean"
				        },
				        "oggVideo": {
				          "!doc": "Phaser.Device.oggVideo",
				          "!type": "+Boolean"
				        },
				        "canPlayVideo": {
				          "!doc": "Phaser.Device.canPlayVideo",
				          "!type": "fn(type: +String) -> +Boolean"
				        },
				        "initialized": {
				          "!doc": "Phaser.Device.initialized",
				          "!type": "+Boolean"
				        },
				        "iPad": {
				          "!doc": "Phaser.Device.iPad",
				          "!type": "+Boolean"
				        },
				        "m4a": {
				          "!doc": "Phaser.Device.m4a",
				          "!type": "+Boolean"
				        },
				        "canPlayAudio": {
				          "!doc": "Phaser.Device.canPlayAudio",
				          "!type": "fn(type: +String) -> +Boolean"
				        },
				        "macOS": {
				          "!doc": "Phaser.Device.macOS",
				          "!type": "+Boolean"
				        },
				        "webApp": {
				          "!doc": "Phaser.Device.webApp",
				          "!type": "+Boolean"
				        },
				        "silk": {
				          "!doc": "Phaser.Device.silk",
				          "!type": "+Boolean"
				        },
				        "fileSystem": {
				          "!doc": "Phaser.Device.fileSystem",
				          "!type": "+Boolean"
				        },
				        "trident": {
				          "!doc": "Phaser.Device.trident",
				          "!type": "+Boolean"
				        },
				        "tridentVersion": {
				          "!doc": "Phaser.Device.tridentVersion",
				          "!type": "+Number"
				        },
				        "webAudio": {
				          "!doc": "Phaser.Device.webAudio",
				          "!type": "+Boolean"
				        },
				        "cocoonJSApp": {
				          "!doc": "Phaser.Device.cocoonJSApp",
				          "!type": "+Boolean"
				        },
				        "iOSVersion": {
				          "!doc": "Phaser.Device.iOSVersion",
				          "!type": "+Number"
				        },
				        "cocoonJS": {
				          "!doc": "Phaser.Device.cocoonJS",
				          "!type": "+Boolean"
				        },
				        "typedArray": {
				          "!doc": "Phaser.Device.typedArray",
				          "!type": "+Boolean"
				        },
				        "midori": {
				          "!doc": "Phaser.Device.midori",
				          "!type": "+Boolean"
				        },
				        "littleEndian": {
				          "!doc": "Phaser.Device.littleEndian",
				          "!type": "+Boolean"
				        },
				        "onInitialized": {
				          "!doc": "Phaser.Device.onInitialized",
				          "!type": "+Phaser.Signal"
				        },
				        "windows": {
				          "!doc": "Phaser.Device.windows",
				          "!type": "+Boolean"
				        },
				        "wav": {
				          "!doc": "Phaser.Device.wav",
				          "!type": "+Boolean"
				        },
				        "ejecta": {
				          "!doc": "Phaser.Device.ejecta",
				          "!type": "+Boolean"
				        },
				        "isAndroidStockBrowser": {
				          "!doc": "Phaser.Device.isAndroidStockBrowser",
				          "!type": "fn()"
				        },
				        "mp3": {
				          "!doc": "Phaser.Device.mp3",
				          "!type": "+Boolean"
				        }
				      },
				      "whenReady": {
				        "!doc": "Phaser.Device.whenReady",
				        "!type": "fn(handler: +Function, context: +Object, nonPrimer: +Boolean)"
				      }
				    },
				    "GAMES": {
				      "!doc": "Phaser.GAMES",
				      "!type": "+Array"
				    },
				    "AnimationParser": {
				      "JSONDataPyxel": {
				        "!doc": "Phaser.AnimationParser.JSONDataPyxel",
				        "!type": "fn(game: +Phaser.Game, json: +Object) -> +Phaser.FrameData"
				      },
				      "JSONData": {
				        "!doc": "Phaser.AnimationParser.JSONData",
				        "!type": "fn(game: +Phaser.Game, json: +Object) -> +Phaser.FrameData"
				      },
				      "!doc": "Phaser.AnimationParser",
				      "XMLData": {
				        "!doc": "Phaser.AnimationParser.XMLData",
				        "!type": "fn(game: +Phaser.Game, xml: +Object) -> +Phaser.FrameData"
				      },
				      "spriteSheet": {
				        "!doc": "Phaser.AnimationParser.spriteSheet",
				        "!type": "fn(game: +Phaser.Game, key: +String, frameWidth: +Number, frameHeight: +Number, frameMax: +Number, margin: +Number, spacing: +Number) -> +Phaser.FrameData"
				      },
				      "JSONDataHash": {
				        "!doc": "Phaser.AnimationParser.JSONDataHash",
				        "!type": "fn(game: +Phaser.Game, json: +Object) -> +Phaser.FrameData"
				      },
				      "!type": "fn()",
				      "prototype": {}
				    },
				    "Canvas": {
				      "removeFromDOM": {
				        "!doc": "Phaser.Canvas.removeFromDOM",
				        "!type": "fn(canvas: +HTMLCanvasElement)"
				      },
				      "setBackgroundColor": {
				        "!doc": "Phaser.Canvas.setBackgroundColor",
				        "!type": "fn(canvas: +HTMLCanvasElement, color: +String) -> +HTMLCanvasElement"
				      },
				      "!doc": "Phaser.Canvas",
				      "prototype": {},
				      "getSmoothingPrefix": {
				        "!doc": "Phaser.Canvas.getSmoothingPrefix",
				        "!type": "fn(context: +CanvasRenderingContext2D) -> +String"
				      },
				      "setTransform": {
				        "!doc": "Phaser.Canvas.setTransform",
				        "!type": "fn(context: +CanvasRenderingContext2D, translateX: +Number, translateY: +Number, scaleX: +Number, scaleY: +Number, skewX: +Number, skewY: +Number) -> +CanvasRenderingContext2D"
				      },
				      "getSmoothingEnabled": {
				        "!doc": "Phaser.Canvas.getSmoothingEnabled",
				        "!type": "fn(context: +CanvasRenderingContext2D) -> +Boolean"
				      },
				      "create": {
				        "!doc": "Phaser.Canvas.create",
				        "!type": "fn(parent: +Object, width: +Number, height: +Number, id: +String, skipPool: +Boolean) -> +HTMLCanvasElement"
				      },
				      "setImageRenderingCrisp": {
				        "!doc": "Phaser.Canvas.setImageRenderingCrisp",
				        "!type": "fn(canvas: +HTMLCanvasElement) -> +HTMLCanvasElement"
				      },
				      "!type": "fn()",
				      "setUserSelect": {
				        "!doc": "Phaser.Canvas.setUserSelect",
				        "!type": "fn(canvas: +HTMLCanvasElement, value: +String) -> +HTMLCanvasElement"
				      },
				      "addToDOM": {
				        "!doc": "Phaser.Canvas.addToDOM",
				        "!type": "fn(canvas: +HTMLCanvasElement, parent: +String, overflowHidden: +Boolean) -> +HTMLCanvasElement"
				      },
				      "setSmoothingEnabled": {
				        "!doc": "Phaser.Canvas.setSmoothingEnabled",
				        "!type": "fn(context: +CanvasRenderingContext2D, value: +Boolean) -> +CanvasRenderingContext2D"
				      },
				      "setImageRenderingBicubic": {
				        "!doc": "Phaser.Canvas.setImageRenderingBicubic",
				        "!type": "fn(canvas: +HTMLCanvasElement) -> +HTMLCanvasElement"
				      },
				      "setTouchAction": {
				        "!doc": "Phaser.Canvas.setTouchAction",
				        "!type": "fn(canvas: +HTMLCanvasElement, value: +String) -> +HTMLCanvasElement"
				      }
				    },
				    "Color": {
				      "webToColor": {
				        "!doc": "Phaser.Color.webToColor",
				        "!type": "fn(web: +String, out: +Object) -> +Object"
				      },
				      "getAlphaFloat": {
				        "!doc": "Phaser.Color.getAlphaFloat",
				        "!type": "fn(color: +Number) -> +Number"
				      },
				      "RGBtoHSL": {
				        "!doc": "Phaser.Color.RGBtoHSL",
				        "!type": "fn(r: +Number, g: +Number, b: +Number, out: +Object) -> +Object"
				      },
				      "valueToColor": {
				        "!doc": "Phaser.Color.valueToColor",
				        "!type": "fn(value: +String, out: +Object) -> +Object"
				      },
				      "blendLinearBurn": {
				        "!doc": "Phaser.Color.blendLinearBurn",
				        "!type": "fn(a: +Number, b: +Number) -> +Number"
				      },
				      "blendVividLight": {
				        "!doc": "Phaser.Color.blendVividLight",
				        "!type": "fn(a: +Number, b: +Number) -> +Number"
				      },
				      "getAlpha": {
				        "!doc": "Phaser.Color.getAlpha",
				        "!type": "fn(color: +Number) -> +Number"
				      },
				      "fromRGBA": {
				        "!doc": "Phaser.Color.fromRGBA",
				        "!type": "fn(rgba: +Number, out: +Object) -> +Object"
				      },
				      "blendReflect": {
				        "!doc": "Phaser.Color.blendReflect",
				        "!type": "fn(a: +Number, b: +Number) -> +Number"
				      },
				      "HSLtoRGB": {
				        "!doc": "Phaser.Color.HSLtoRGB",
				        "!type": "fn(h: +Number, s: +Number, l: +Number, out: +Object) -> +Object"
				      },
				      "packPixel": {
				        "!doc": "Phaser.Color.packPixel",
				        "!type": "fn(r: +Number, g: +Number, b: +Number, a: +Number) -> +Number"
				      },
				      "blendLighten": {
				        "!doc": "Phaser.Color.blendLighten",
				        "!type": "fn(a: +Number, b: +Number) -> +Number"
				      },
				      "toRGBA": {
				        "!doc": "Phaser.Color.toRGBA",
				        "!type": "fn(r: +Number, g: +Number, b: +Number, a: +Number) -> +Number"
				      },
				      "blendDarken": {
				        "!doc": "Phaser.Color.blendDarken",
				        "!type": "fn(a: +Number, b: +Number) -> +Number"
				      },
				      "blendScreen": {
				        "!doc": "Phaser.Color.blendScreen",
				        "!type": "fn(a: +Number, b: +Number) -> +Number"
				      },
				      "getRGB": {
				        "!doc": "Phaser.Color.getRGB",
				        "!type": "fn(color: +Number) -> +Object"
				      },
				      "hexToRGB": {
				        "!doc": "Phaser.Color.hexToRGB",
				        "!type": "fn(hex: +String) -> +Number"
				      },
				      "blendGlow": {
				        "!doc": "Phaser.Color.blendGlow",
				        "!type": "fn(a: +Number, b: +Number) -> +Number"
				      },
				      "blendSoftLight": {
				        "!doc": "Phaser.Color.blendSoftLight",
				        "!type": "fn(a: +Number, b: +Number) -> +Number"
				      },
				      "interpolateColorWithRGB": {
				        "!doc": "Phaser.Color.interpolateColorWithRGB",
				        "!type": "fn(color: +Number, r: +Number, g: +Number, b: +Number, steps: +Number, currentStep: +Number) -> +Number"
				      },
				      "blendSubtract": {
				        "!doc": "Phaser.Color.blendSubtract",
				        "!type": "fn(a: +Number, b: +Number) -> +Number"
				      },
				      "getColor32": {
				        "!doc": "Phaser.Color.getColor32",
				        "!type": "fn(a: +Number, r: +Number, g: +Number, b: +Number) -> +Number"
				      },
				      "HSLColorWheel": {
				        "!doc": "Phaser.Color.HSLColorWheel",
				        "!type": "fn(s: +Number, l: +Number) -> +Array"
				      },
				      "getWebRGB": {
				        "!doc": "Phaser.Color.getWebRGB",
				        "!type": "fn(color: +Number) -> +String"
				      },
				      "componentToHex": {
				        "!doc": "Phaser.Color.componentToHex",
				        "!type": "fn(color: +Number) -> +String"
				      },
				      "blendDifference": {
				        "!doc": "Phaser.Color.blendDifference",
				        "!type": "fn(a: +Number, b: +Number) -> +Number"
				      },
				      "getBlue": {
				        "!doc": "Phaser.Color.getBlue",
				        "!type": "fn(color: +Number) -> +Number"
				      },
				      "hexToColor": {
				        "!doc": "Phaser.Color.hexToColor",
				        "!type": "fn(hex: +String, out: +Object) -> +Object"
				      },
				      "blendLinearDodge": {
				        "!doc": "Phaser.Color.blendLinearDodge",
				        "!type": "fn(a: +Number, b: +Number) -> +Number"
				      },
				      "getGreen": {
				        "!doc": "Phaser.Color.getGreen",
				        "!type": "fn(color: +Number) -> +Number"
				      },
				      "blendColorBurn": {
				        "!doc": "Phaser.Color.blendColorBurn",
				        "!type": "fn(a: +Number, b: +Number) -> +Number"
				      },
				      "blendNegation": {
				        "!doc": "Phaser.Color.blendNegation",
				        "!type": "fn(a: +Number, b: +Number) -> +Number"
				      },
				      "blendNormal": {
				        "!doc": "Phaser.Color.blendNormal",
				        "!type": "fn(a: +Number, b: +Number) -> +Number"
				      },
				      "getRandomColor": {
				        "!doc": "Phaser.Color.getRandomColor",
				        "!type": "fn(min: +Number, max: +Number, alpha: +Number) -> +Number"
				      },
				      "blendOverlay": {
				        "!doc": "Phaser.Color.blendOverlay",
				        "!type": "fn(a: +Number, b: +Number) -> +Number"
				      },
				      "createColor": {
				        "!doc": "Phaser.Color.createColor",
				        "!type": "fn(r: +Number, g: +Number, b: +Number, a: +Number, h: +Number, s: +Number, l: +Number, v: +Number) -> +Object"
				      },
				      "HSVColorWheel": {
				        "!doc": "Phaser.Color.HSVColorWheel",
				        "!type": "fn(s: +Number, v: +Number) -> +Array"
				      },
				      "RGBtoString": {
				        "!doc": "Phaser.Color.RGBtoString",
				        "!type": "fn(r: +Number, g: +Number, b: +Number, a: +Number, prefix: +String) -> +String"
				      },
				      "blendExclusion": {
				        "!doc": "Phaser.Color.blendExclusion",
				        "!type": "fn(a: +Number, b: +Number) -> +Number"
				      },
				      "blendHardLight": {
				        "!doc": "Phaser.Color.blendHardLight",
				        "!type": "fn(a: +Number, b: +Number) -> +Number"
				      },
				      "getRed": {
				        "!doc": "Phaser.Color.getRed",
				        "!type": "fn(color: +Number) -> +Number"
				      },
				      "HSVtoRGB": {
				        "!doc": "Phaser.Color.HSVtoRGB",
				        "!type": "fn(h: +Number, s: +Number, v: +Number, out: +Object) -> +Object"
				      },
				      "!type": "fn()",
				      "hueToColor": {
				        "!doc": "Phaser.Color.hueToColor",
				        "!type": "fn(p: +Number, q: +Number, t: +Number) -> +Number"
				      },
				      "updateColor": {
				        "!doc": "Phaser.Color.updateColor",
				        "!type": "fn(out: +Object) -> +Number"
				      },
				      "blendLinearLight": {
				        "!doc": "Phaser.Color.blendLinearLight",
				        "!type": "fn(a: +Number, b: +Number) -> +Number"
				      },
				      "blendMultiply": {
				        "!doc": "Phaser.Color.blendMultiply",
				        "!type": "fn(a: +Number, b: +Number) -> +Number"
				      },
				      "blendAverage": {
				        "!doc": "Phaser.Color.blendAverage",
				        "!type": "fn(a: +Number, b: +Number) -> +Number"
				      },
				      "!doc": "Phaser.Color",
				      "getColor": {
				        "!doc": "Phaser.Color.getColor",
				        "!type": "fn(r: +Number, g: +Number, b: +Number) -> +Number"
				      },
				      "prototype": {},
				      "interpolateColor": {
				        "!doc": "Phaser.Color.interpolateColor",
				        "!type": "fn(color1: +Number, color2: +Number, steps: +Number, currentStep: +Number, alpha: +Number) -> +Number"
				      },
				      "blendHardMix": {
				        "!doc": "Phaser.Color.blendHardMix",
				        "!type": "fn(a: +Number, b: +Number) -> +Number"
				      },
				      "interpolateRGB": {
				        "!doc": "Phaser.Color.interpolateRGB",
				        "!type": "fn(r1: +Number, g1: +Number, b1: +Number, r2: +Number, g2: +Number, b2: +Number, steps: +Number, currentStep: +Number) -> +Number"
				      },
				      "blendPinLight": {
				        "!doc": "Phaser.Color.blendPinLight",
				        "!type": "fn(a: +Number, b: +Number) -> +Number"
				      },
				      "RGBtoHSV": {
				        "!doc": "Phaser.Color.RGBtoHSV",
				        "!type": "fn(r: +Number, g: +Number, b: +Number, out: +Object) -> +Object"
				      },
				      "blendPhoenix": {
				        "!doc": "Phaser.Color.blendPhoenix",
				        "!type": "fn(a: +Number, b: +Number) -> +Number"
				      },
				      "blendAdd": {
				        "!doc": "Phaser.Color.blendAdd",
				        "!type": "fn(a: +Number, b: +Number) -> +Number"
				      },
				      "unpackPixel": {
				        "!doc": "Phaser.Color.unpackPixel",
				        "!type": "fn(rgba: +Number, out: +Object, hsl: +Boolean, hsv: +Boolean) -> +Object"
				      },
				      "blendColorDodge": {
				        "!doc": "Phaser.Color.blendColorDodge",
				        "!type": "fn(a: +Number, b: +Number) -> +Number"
				      }
				    },
				    "Particles": {
				      "!doc": "Phaser.Particles",
				      "!type": "fn(game: +Phaser.Game)",
				      "prototype": {
				        "add": {
				          "!doc": "Phaser.Particles.add",
				          "!type": "fn(emitter: +Phaser.Emitter) -> +Phaser.Emitter"
				        },
				        "game": {
				          "!doc": "Phaser.Particles.game",
				          "!type": "+Phaser.Game"
				        },
				        "emitters": {
				          "!doc": "Phaser.Particles.emitters",
				          "!type": "+Object"
				        },
				        "update": {
				          "!doc": "Phaser.Particles.update",
				          "!type": "fn()"
				        },
				        "ID": {
				          "!doc": "Phaser.Particles.ID",
				          "!type": "+Number"
				        },
				        "remove": {
				          "!doc": "Phaser.Particles.remove",
				          "!type": "fn(emitter: +Phaser.Emitter)"
				        }
				      },
				      "Arcade": {
				        "Emitter": {
				          "SORT_ASCENDING": "+Number",
				          "RETURN_TOTAL": "+Number",
				          "!doc": "Phaser.Particles.Arcade.Emitter",
				          "RETURN_NONE": "+Number",
				          "!type": "fn(game: +Phaser.Game, x: +Number, y: +Number, maxParticles: +Number)",
				          "SORT_DESCENDING": "+Number",
				          "RETURN_CHILD": "+Number",
				          "prototype": {
				            "xy": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.xy",
				              "!type": "fn(index: +Number, x: +Number, y: +Number)"
				            },
				            "parent": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.parent",
				              "!type": "+PIXI.DisplayObjectContainer"
				            },
				            "descendingSortHandler": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.descendingSortHandler",
				              "!type": "fn(a: +Object, b: +Object)"
				            },
				            "minParticleSpeed": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.minParticleSpeed",
				              "!type": "+Phaser.Point"
				            },
				            "bounce": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.bounce",
				              "!type": "+Phaser.Point"
				            },
				            "lifespan": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.lifespan",
				              "!type": "+Number"
				            },
				            "type": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.type",
				              "!type": "+Number"
				            },
				            "moveAll": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.moveAll",
				              "!type": "fn(group: +Phaser.Group, silent: +Boolean) -> +Phaser.Group"
				            },
				            "removeAll": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.removeAll",
				              "!type": "fn(destroy: +Boolean, silent: +Boolean)"
				            },
				            "minParticleScale": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.minParticleScale",
				              "!type": "+Number"
				            },
				            "enableBody": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.enableBody",
				              "!type": "+Boolean"
				            },
				            "children": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.children",
				              "!type": "+Array_DisplayObject_"
				            },
				            "explode": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.explode",
				              "!type": "fn(lifespan: +Number, quantity: +Number)"
				            },
				            "customSort": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.customSort",
				              "!type": "fn(sortHandler: +Function, context: +Object)"
				            },
				            "enableBodyDebug": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.enableBodyDebug",
				              "!type": "+Boolean"
				            },
				            "pivot": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.pivot",
				              "!type": "+Phaser.Point"
				            },
				            "revive": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.revive",
				              "!type": "fn()"
				            },
				            "scaleData": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.scaleData",
				              "!type": "+Array"
				            },
				            "flow": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.flow",
				              "!type": "fn(lifespan: +Number, frequency: +Number, quantity: +Number, total: +Number, immediate: +Boolean)"
				            },
				            "bringToTop": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.bringToTop",
				              "!type": "fn(child: +Object) -> +Object"
				            },
				            "moveUp": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.moveUp",
				              "!type": "fn(child: +Object) -> +Object"
				            },
				            "physicsType": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.physicsType",
				              "!type": "+Number"
				            },
				            "height": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.height",
				              "!type": "+Number"
				            },
				            "emitY": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.emitY",
				              "!type": "+Number"
				            },
				            "postUpdate": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.postUpdate",
				              "!type": "fn()"
				            },
				            "particleBringToTop": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.particleBringToTop",
				              "!type": "+Boolean"
				            },
				            "particleAnchor": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.particleAnchor",
				              "!type": "+Phaser.Point"
				            },
				            "emitX": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.emitX",
				              "!type": "+Number"
				            },
				            "destroy": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.destroy",
				              "!type": "fn()"
				            },
				            "cursorIndex": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.cursorIndex",
				              "!type": "+Number"
				            },
				            "setRotation": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.setRotation",
				              "!type": "fn(min: +Number, max: +Number)"
				            },
				            "getFirstDead": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.getFirstDead",
				              "!type": "fn(createIfNull: +Boolean, x: +Number, y: +Number, key: +String, frame: +String) -> +PIXI.DisplayObject"
				            },
				            "physicsSortDirection": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.physicsSortDirection",
				              "!type": "+Number"
				            },
				            "addAt": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.addAt",
				              "!type": "fn(child: +DisplayObject, index: +Number, silent: +Boolean) -> +PIXI.DisplayObject"
				            },
				            "worldPosition": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.worldPosition",
				              "!type": "+Phaser.Point"
				            },
				            "forEachAlive": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.forEachAlive",
				              "!type": "fn(callback: +Function, callbackContext: +Object, args: +Object)"
				            },
				            "at": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.at",
				              "!type": "fn(object: +Object)"
				            },
				            "left": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.left",
				              "!type": "+Number"
				            },
				            "resetCursor": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.resetCursor",
				              "!type": "fn(index: +Number) -> +Object"
				            },
				            "emitParticle": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.emitParticle",
				              "!type": "fn(x: +Number, y: +Number, key: +String, frame: +String) -> +Boolean"
				            },
				            "addMultiple": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.addMultiple",
				              "!type": "fn(children: +Array._DisplayObject_, silent: +Boolean) -> +Array._DisplayObject_"
				            },
				            "setProperty": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.setProperty",
				              "!type": "fn(child: +Object, key: +Array, value: +Object, operation: +Number, force: +Boolean) -> +Boolean"
				            },
				            "preUpdate": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.preUpdate",
				              "!type": "fn()"
				            },
				            "hash": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.hash",
				              "!type": "+Array"
				            },
				            "filterArea": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.filterArea",
				              "!type": "+Phaser.Rectangle"
				            },
				            "addToHash": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.addToHash",
				              "!type": "fn(child: +DisplayObject) -> +Boolean"
				            },
				            "worldScale": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.worldScale",
				              "!type": "+Phaser.Point"
				            },
				            "alive": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.alive",
				              "!type": "+Boolean"
				            },
				            "checkProperty": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.checkProperty",
				              "!type": "fn(child: +Object, key: +Array, value: +Object, force: +Boolean) -> +Boolean"
				            },
				            "callbackFromArray": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.callbackFromArray",
				              "!type": "fn(child: +Object, callback: +Array, length: +Number)"
				            },
				            "worldAlpha": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.worldAlpha",
				              "!type": "+Number"
				            },
				            "multiplyAll": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.multiplyAll",
				              "!type": "fn(property: +String, amount: +Number, checkAlive: +Boolean, checkVisible: +Boolean)"
				            },
				            "top": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.top",
				              "!type": "+Number"
				            },
				            "angle": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.angle",
				              "!type": "+Number"
				            },
				            "iterate": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.iterate",
				              "!type": "fn(key: +String, value: +Object, returnType: +Number, callback: +Function, callbackContext: +Object, args: +Array._any_) -> +Object"
				            },
				            "onDestroy": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.onDestroy",
				              "!type": "+Phaser.Signal"
				            },
				            "set": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.set",
				              "!type": "fn(child: +Phaser.Sprite, key: +String, value: +Object, checkAlive: +Boolean, checkVisible: +Boolean, operation: +Number, force: +Boolean) -> +Boolean"
				            },
				            "getFirstExists": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.getFirstExists",
				              "!type": "fn(exists: +Boolean, createIfNull: +Boolean, x: +Number, y: +Number, key: +String, frame: +String) -> +PIXI.DisplayObject"
				            },
				            "setXSpeed": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.setXSpeed",
				              "!type": "fn(min: +Number, max: +Number)"
				            },
				            "minParticleAlpha": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.minParticleAlpha",
				              "!type": "+Number"
				            },
				            "right": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.right",
				              "!type": "+Number"
				            },
				            "kill": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.kill",
				              "!type": "fn()"
				            },
				            "reverse": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.reverse",
				              "!type": "fn()"
				            },
				            "filter": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.filter",
				              "!type": "fn(predicate: +Function, checkExists: +Boolean) -> +Phaser.ArraySet"
				            },
				            "maxParticles": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.maxParticles",
				              "!type": "+Number"
				            },
				            "stage": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.stage",
				              "!type": "+Phaser.Stage"
				            },
				            "addAll": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.addAll",
				              "!type": "fn(property: +String, amount: +Number, checkAlive: +Boolean, checkVisible: +Boolean)"
				            },
				            "width": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.width",
				              "!type": "+Number"
				            },
				            "x": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.x",
				              "!type": "+Number"
				            },
				            "ignoreDestroy": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.ignoreDestroy",
				              "!type": "+Boolean"
				            },
				            "y": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.y",
				              "!type": "+Number"
				            },
				            "exists": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.exists",
				              "!type": "+Boolean"
				            },
				            "z": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.z",
				              "!type": "+Number"
				            },
				            "divideAll": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.divideAll",
				              "!type": "fn(property: +String, amount: +Number, checkAlive: +Boolean, checkVisible: +Boolean)"
				            },
				            "setAllChildren": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.setAllChildren",
				              "!type": "fn(key: +String, value: +Object, checkAlive: +Boolean, checkVisible: +Boolean, operation: +Number, force: +Boolean)"
				            },
				            "physicsBodyType": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.physicsBodyType",
				              "!type": "+Number"
				            },
				            "angularDrag": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.angularDrag",
				              "!type": "+Number"
				            },
				            "getIndex": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.getIndex",
				              "!type": "fn(child: +Object) -> +Number"
				            },
				            "getBottom": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.getBottom",
				              "!type": "fn() -> +Object"
				            },
				            "replace": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.replace",
				              "!type": "fn(oldChild: +Object, newChild: +Object) -> +Object"
				            },
				            "maxParticleAlpha": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.maxParticleAlpha",
				              "!type": "+Number"
				            },
				            "resetChild": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.resetChild",
				              "!type": "fn(child: +DisplayObject, x: +Number, y: +Number, key: +String, frame: +String) -> +PIXI.DisplayObject"
				            },
				            "frequency": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.frequency",
				              "!type": "+Number"
				            },
				            "autoScale": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.autoScale",
				              "!type": "+Boolean"
				            },
				            "makeParticles": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.makeParticles",
				              "!type": "fn(keys: +Array, frames: +Array, quantity: +Number, collide: +Boolean, collideWorldBounds: +Boolean) -> +Phaser.Particles.Arcade.Emitter"
				            },
				            "getRandom": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.getRandom",
				              "!type": "fn(startIndex: +Number, length: +Number) -> +Object"
				            },
				            "forEachExists": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.forEachExists",
				              "!type": "fn(callback: +Function, callbackContext: +Object, args: +Object)"
				            },
				            "maxParticleScale": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.maxParticleScale",
				              "!type": "+Number"
				            },
				            "getTop": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.getTop",
				              "!type": "fn() -> +Object"
				            },
				            "create": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.create",
				              "!type": "fn(x: +Number, y: +Number, key: +String, frame: +String, exists: +Boolean) -> +PIXI.DisplayObject"
				            },
				            "countDead": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.countDead",
				              "!type": "fn() -> +Number"
				            },
				            "subAll": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.subAll",
				              "!type": "fn(property: +String, amount: +Number, checkAlive: +Boolean, checkVisible: +Boolean)"
				            },
				            "fixedToCamera": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.fixedToCamera",
				              "!type": "+Boolean"
				            },
				            "add": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.add",
				              "!type": "fn(child: +DisplayObject, silent: +Boolean) -> +PIXI.DisplayObject"
				            },
				            "area": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.area",
				              "!type": "+Phaser.Rectangle"
				            },
				            "maxParticleSpeed": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.maxParticleSpeed",
				              "!type": "+Phaser.Point"
				            },
				            "particleSendToBack": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.particleSendToBack",
				              "!type": "+Boolean"
				            },
				            "visible": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.visible",
				              "!type": "+Boolean"
				            },
				            "swap": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.swap",
				              "!type": "fn(child1: +Object, child2: +Object)"
				            },
				            "setScale": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.setScale",
				              "!type": "fn(minX: +Number, maxX: +Number, minY: +Number, maxY: +Number, rate: +Number, ease: +Function, yoyo: +Boolean)"
				            },
				            "bottom": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.bottom",
				              "!type": "+Number"
				            },
				            "cameraOffset": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.cameraOffset",
				              "!type": "+Phaser.Point"
				            },
				            "setAlpha": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.setAlpha",
				              "!type": "fn(min: +Number, max: +Number, rate: +Number, ease: +Function, yoyo: +Boolean)"
				            },
				            "minRotation": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.minRotation",
				              "!type": "+Number"
				            },
				            "sort": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.sort",
				              "!type": "fn(key: +String, order: +Number)"
				            },
				            "moveDown": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.moveDown",
				              "!type": "fn(child: +Object) -> +Object"
				            },
				            "particleDrag": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.particleDrag",
				              "!type": "+Phaser.Point"
				            },
				            "hasProperty": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.hasProperty",
				              "!type": "fn(child: +Object, key: +Array._string_) -> +Boolean"
				            },
				            "autoAlpha": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.autoAlpha",
				              "!type": "+Boolean"
				            },
				            "updateZ": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.updateZ",
				              "!type": "fn()"
				            },
				            "name": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.name",
				              "!type": "+String"
				            },
				            "maxRotation": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.maxRotation",
				              "!type": "+Number"
				            },
				            "ascendingSortHandler": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.ascendingSortHandler",
				              "!type": "fn(a: +Object, b: +Object)"
				            },
				            "position": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.position",
				              "!type": "+Phaser.Point"
				            },
				            "removeBetween": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.removeBetween",
				              "!type": "fn(startIndex: +Number, endIndex: +Number, destroy: +Boolean, silent: +Boolean)"
				            },
				            "removeFromHash": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.removeFromHash",
				              "!type": "fn(child: +DisplayObject) -> +Boolean"
				            },
				            "alphaData": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.alphaData",
				              "!type": "+Array"
				            },
				            "classType": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.classType",
				              "!type": "+Object"
				            },
				            "next": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.next",
				              "!type": "fn() -> +Object"
				            },
				            "cursor": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.cursor",
				              "!type": "+PIXI.DisplayObject"
				            },
				            "worldRotation": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.worldRotation",
				              "!type": "+Number"
				            },
				            "game": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.game",
				              "!type": "+Phaser.Game"
				            },
				            "renderable": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.renderable",
				              "!type": "+Boolean"
				            },
				            "forEachDead": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.forEachDead",
				              "!type": "fn(callback: +Function, callbackContext: +Object, args: +Object)"
				            },
				            "update": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.update",
				              "!type": "fn()"
				            },
				            "scale": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.scale",
				              "!type": "+Phaser.Point"
				            },
				            "countLiving": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.countLiving",
				              "!type": "fn() -> +Number"
				            },
				            "remove": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.remove",
				              "!type": "fn(child: +Object, destroy: +Boolean, silent: +Boolean) -> +Boolean"
				            },
				            "callAll": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.callAll",
				              "!type": "fn(method: +String, context: +String, args: +Object)"
				            },
				            "total": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.total",
				              "!type": "+Number"
				            },
				            "setSize": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.setSize",
				              "!type": "fn(width: +Number, height: +Number)"
				            },
				            "particleClass": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.particleClass",
				              "!type": "+Object"
				            },
				            "alpha": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.alpha",
				              "!type": "+Number"
				            },
				            "createMultiple": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.createMultiple",
				              "!type": "fn(quantity: +Number, key: +String, frame: +Number, exists: +Boolean)"
				            },
				            "setYSpeed": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.setYSpeed",
				              "!type": "fn(min: +Number, max: +Number)"
				            },
				            "setAll": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.setAll",
				              "!type": "fn(key: +String, value: +Object, checkAlive: +Boolean, checkVisible: +Boolean, operation: +Number, force: +Boolean)"
				            },
				            "on": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.on",
				              "!type": "+Boolean"
				            },
				            "callAllExists": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.callAllExists",
				              "!type": "fn(callback: +String, existsValue: +Boolean, parameter: +Object)"
				            },
				            "checkAll": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.checkAll",
				              "!type": "fn(key: +String, value: +Object, checkAlive: +Boolean, checkVisible: +Boolean, force: +Boolean)"
				            },
				            "previous": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.previous",
				              "!type": "fn() -> +Object"
				            },
				            "forEach": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.forEach",
				              "!type": "fn(callback: +Function, callbackContext: +Object, checkExists: +Boolean, args: +Object)"
				            },
				            "rotation": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.rotation",
				              "!type": "+Number"
				            },
				            "start": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.start",
				              "!type": "fn(explode: +Boolean, lifespan: +Number, frequency: +Number, quantity: +Number, forceQuantity: +Number)"
				            },
				            "length": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.length",
				              "!type": "+Number"
				            },
				            "sendToBack": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.sendToBack",
				              "!type": "fn(child: +Object) -> +Object"
				            },
				            "getAt": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.getAt",
				              "!type": "fn(index: +Number) -> +PIXI.DisplayObject"
				            },
				            "pendingDestroy": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.pendingDestroy",
				              "!type": "+Boolean"
				            },
				            "getFirstAlive": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.getFirstAlive",
				              "!type": "fn(createIfNull: +Boolean, x: +Number, y: +Number, key: +String, frame: +String) -> +PIXI.DisplayObject"
				            },
				            "blendMode": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.blendMode",
				              "!type": "+Number"
				            },
				            "gravity": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.gravity",
				              "!type": "+Number"
				            },
				            "hitArea": {
				              "!doc": "Phaser.Particles.Arcade.Emitter.hitArea",
				              "!type": "+Phaser.Rectangle"
				            }
				          }
				        },
				        "!doc": "Phaser.Particles.Arcade",
				        "!type": "fn()",
				        "prototype": {}
				      }
				    },
				    "LinkedList": {
				      "!doc": "Phaser.LinkedList",
				      "!type": "fn()",
				      "prototype": {
				        "add": {
				          "!doc": "Phaser.LinkedList.add",
				          "!type": "fn(item: +Object) -> +Object"
				        },
				        "callAll": {
				          "!doc": "Phaser.LinkedList.callAll",
				          "!type": "fn(callback: +Function)"
				        },
				        "next": {
				          "!doc": "Phaser.LinkedList.next",
				          "!type": "+Object"
				        },
				        "total": {
				          "!doc": "Phaser.LinkedList.total",
				          "!type": "+Number"
				        },
				        "last": {
				          "!doc": "Phaser.LinkedList.last",
				          "!type": "+Object"
				        },
				        "prev": {
				          "!doc": "Phaser.LinkedList.prev",
				          "!type": "+Object"
				        },
				        "reset": {
				          "!doc": "Phaser.LinkedList.reset",
				          "!type": "fn()"
				        },
				        "remove": {
				          "!doc": "Phaser.LinkedList.remove",
				          "!type": "fn(item: +Object)"
				        },
				        "first": {
				          "!doc": "Phaser.LinkedList.first",
				          "!type": "+Object"
				        }
				      }
				    },
				    "CIRCLE": {
				      "!doc": "Phaser.CIRCLE",
				      "!type": "+Number"
				    },
				    "AUTO": {
				      "!doc": "Phaser.AUTO",
				      "!type": "+Number"
				    },
				    "ELLIPSE": {
				      "!doc": "Phaser.ELLIPSE",
				      "!type": "+Number"
				    },
				    "scaleModes": {
				      "!doc": "Phaser.scaleModes",
				      "!type": "+Object"
				    },
				    "State": {
				      "!doc": "Phaser.State",
				      "!type": "fn()",
				      "prototype": {
				        "loadUpdate": {
				          "!doc": "Phaser.State.loadUpdate",
				          "!type": "fn()"
				        },
				        "paused": {
				          "!doc": "Phaser.State.paused",
				          "!type": "fn()"
				        },
				        "game": {
				          "!doc": "Phaser.State.game",
				          "!type": "+Phaser.Game"
				        },
				        "loadRender": {
				          "!doc": "Phaser.State.loadRender",
				          "!type": "fn()"
				        },
				        "tweens": {
				          "!doc": "Phaser.State.tweens",
				          "!type": "+Phaser.TweenManager"
				        },
				        "sound": {
				          "!doc": "Phaser.State.sound",
				          "!type": "+Phaser.SoundManager"
				        },
				        "update": {
				          "!doc": "Phaser.State.update",
				          "!type": "fn()"
				        },
				        "scale": {
				          "!doc": "Phaser.State.scale",
				          "!type": "+Phaser.ScaleManager"
				        },
				        "preload": {
				          "!doc": "Phaser.State.preload",
				          "!type": "fn()"
				        },
				        "world": {
				          "!doc": "Phaser.State.world",
				          "!type": "+Phaser.World"
				        },
				        "load": {
				          "!doc": "Phaser.State.load",
				          "!type": "+Phaser.Loader"
				        },
				        "pauseUpdate": {
				          "!doc": "Phaser.State.pauseUpdate",
				          "!type": "fn()"
				        },
				        "physics": {
				          "!doc": "Phaser.State.physics",
				          "!type": "+Phaser.Physics"
				        },
				        "create": {
				          "!doc": "Phaser.State.create",
				          "!type": "fn()"
				        },
				        "camera": {
				          "!doc": "Phaser.State.camera",
				          "!type": "+Phaser.Camera"
				        },
				        "particles": {
				          "!doc": "Phaser.State.particles",
				          "!type": "+Phaser.Particles"
				        },
				        "render": {
				          "!doc": "Phaser.State.render",
				          "!type": "fn()"
				        },
				        "make": {
				          "!doc": "Phaser.State.make",
				          "!type": "+Phaser.GameObjectCreator"
				        },
				        "key": {
				          "!doc": "Phaser.State.key",
				          "!type": "+String"
				        },
				        "add": {
				          "!doc": "Phaser.State.add",
				          "!type": "+Phaser.GameObjectFactory"
				        },
				        "init": {
				          "!doc": "Phaser.State.init",
				          "!type": "fn()"
				        },
				        "cache": {
				          "!doc": "Phaser.State.cache",
				          "!type": "+Phaser.Cache"
				        },
				        "preRender": {
				          "!doc": "Phaser.State.preRender",
				          "!type": "fn()"
				        },
				        "rnd": {
				          "!doc": "Phaser.State.rnd",
				          "!type": "+Phaser.RandomDataGenerator"
				        },
				        "input": {
				          "!doc": "Phaser.State.input",
				          "!type": "+Phaser.Input"
				        },
				        "stage": {
				          "!doc": "Phaser.State.stage",
				          "!type": "+Phaser.Stage"
				        },
				        "resize": {
				          "!doc": "Phaser.State.resize",
				          "!type": "fn()"
				        },
				        "math": {
				          "!doc": "Phaser.State.math",
				          "!type": "+Phaser.Math"
				        },
				        "time": {
				          "!doc": "Phaser.State.time",
				          "!type": "+Phaser.Time"
				        },
				        "resumed": {
				          "!doc": "Phaser.State.resumed",
				          "!type": "fn()"
				        },
				        "shutdown": {
				          "!doc": "Phaser.State.shutdown",
				          "!type": "fn()"
				        }
				      }
				    },
				    "Video": {
				      "!doc": "Phaser.Video",
				      "!type": "fn(game: +Phaser.Game, key: +String, url: +String)",
				      "prototype": {
				        "play": {
				          "!doc": "Phaser.Video.play",
				          "!type": "fn(loop: +Boolean, playbackRate: +Number) -> +Phaser.Video"
				        },
				        "updateTexture": {
				          "!doc": "Phaser.Video.updateTexture",
				          "!type": "fn(event: +Object, width: +Number, height: +Number)"
				        },
				        "game": {
				          "!doc": "Phaser.Video.game",
				          "!type": "+Phaser.Game"
				        },
				        "paused": {
				          "!doc": "Phaser.Video.paused",
				          "!type": "+Boolean"
				        },
				        "video": {
				          "!doc": "Phaser.Video.video",
				          "!type": "+HTMLVideoElement"
				        },
				        "type": {
				          "!doc": "Phaser.Video.type",
				          "!type": "+Number"
				        },
				        "addToWorld": {
				          "!doc": "Phaser.Video.addToWorld",
				          "!type": "fn(x: +Number, y: +Number, anchorX: +Number, anchorY: +Number, scaleX: +Number, scaleY: +Number) -> +Phaser.Image"
				        },
				        "timeout": {
				          "!doc": "Phaser.Video.timeout",
				          "!type": "+Number"
				        },
				        "createVideoFromURL": {
				          "!doc": "Phaser.Video.createVideoFromURL",
				          "!type": "fn(url: +String, autoplay: +Boolean) -> +Phaser.Video"
				        },
				        "changeSource": {
				          "!doc": "Phaser.Video.changeSource",
				          "!type": "fn(src: +String, autoplay: +Boolean) -> +Phaser.Video"
				        },
				        "playbackRate": {
				          "!doc": "Phaser.Video.playbackRate",
				          "!type": "+Number"
				        },
				        "textureFrame": {
				          "!doc": "Phaser.Video.textureFrame",
				          "!type": "+Phaser.Frame"
				        },
				        "loop": {
				          "!doc": "Phaser.Video.loop",
				          "!type": "+Boolean"
				        },
				        "onChangeSource": {
				          "!doc": "Phaser.Video.onChangeSource",
				          "!type": "+Phaser.Signal"
				        },
				        "onTimeout": {
				          "!doc": "Phaser.Video.onTimeout",
				          "!type": "+Phaser.Signal"
				        },
				        "render": {
				          "!doc": "Phaser.Video.render",
				          "!type": "fn()"
				        },
				        "key": {
				          "!doc": "Phaser.Video.key",
				          "!type": "+String"
				        },
				        "retry": {
				          "!doc": "Phaser.Video.retry",
				          "!type": "+Number"
				        },
				        "height": {
				          "!doc": "Phaser.Video.height",
				          "!type": "+Number"
				        },
				        "add": {
				          "!doc": "Phaser.Video.add",
				          "!type": "fn(object: +Phaser.Sprite) -> +Phaser.Video"
				        },
				        "connectToMediaStream": {
				          "!doc": "Phaser.Video.connectToMediaStream",
				          "!type": "fn(video: +HTMLVideoElement, stream: +MediaStream) -> +Phaser.Video"
				        },
				        "unlock": {
				          "!doc": "Phaser.Video.unlock",
				          "!type": "fn()"
				        },
				        "onError": {
				          "!doc": "Phaser.Video.onError",
				          "!type": "+Phaser.Signal"
				        },
				        "setTouchLock": {
				          "!doc": "Phaser.Video.setTouchLock",
				          "!type": "fn()"
				        },
				        "startMediaStream": {
				          "!doc": "Phaser.Video.startMediaStream",
				          "!type": "fn(captureAudio: +Boolean, width: +Number, height: +Number) -> +Phaser.Video"
				        },
				        "texture": {
				          "!doc": "Phaser.Video.texture",
				          "!type": "+PIXI.Texture"
				        },
				        "onComplete": {
				          "!doc": "Phaser.Video.onComplete",
				          "!type": "+Phaser.Signal"
				        },
				        "createVideoFromBlob": {
				          "!doc": "Phaser.Video.createVideoFromBlob",
				          "!type": "fn(blob: +Blob) -> +Phaser.Video"
				        },
				        "destroy": {
				          "!doc": "Phaser.Video.destroy",
				          "!type": "fn()"
				        },
				        "removeVideoElement": {
				          "!doc": "Phaser.Video.removeVideoElement",
				          "!type": "fn()"
				        },
				        "mute": {
				          "!doc": "Phaser.Video.mute",
				          "!type": "+Boolean"
				        },
				        "onPlay": {
				          "!doc": "Phaser.Video.onPlay",
				          "!type": "+Phaser.Signal"
				        },
				        "retryLimit": {
				          "!doc": "Phaser.Video.retryLimit",
				          "!type": "+Number"
				        },
				        "volume": {
				          "!doc": "Phaser.Video.volume",
				          "!type": "+Number"
				        },
				        "videoStream": {
				          "!doc": "Phaser.Video.videoStream",
				          "!type": "+MediaStream"
				        },
				        "stop": {
				          "!doc": "Phaser.Video.stop",
				          "!type": "fn() -> +Phaser.Video"
				        },
				        "isStreaming": {
				          "!doc": "Phaser.Video.isStreaming",
				          "!type": "+Boolean"
				        },
				        "disableTextureUpload": {
				          "!doc": "Phaser.Video.disableTextureUpload",
				          "!type": "+Boolean"
				        },
				        "width": {
				          "!doc": "Phaser.Video.width",
				          "!type": "+Number"
				        },
				        "retryInterval": {
				          "!doc": "Phaser.Video.retryInterval",
				          "!type": "+Number"
				        },
				        "playing": {
				          "!doc": "Phaser.Video.playing",
				          "!type": "+Boolean"
				        },
				        "complete": {
				          "!doc": "Phaser.Video.complete",
				          "!type": "fn()"
				        },
				        "grab": {
				          "!doc": "Phaser.Video.grab",
				          "!type": "fn(clear: +Boolean, alpha: +Number, blendMode: +String) -> +Phaser.BitmapData"
				        },
				        "touchLocked": {
				          "!doc": "Phaser.Video.touchLocked",
				          "!type": "+Boolean"
				        },
				        "snapshot": {
				          "!doc": "Phaser.Video.snapshot",
				          "!type": "+Phaser.BitmapData"
				        },
				        "onAccess": {
				          "!doc": "Phaser.Video.onAccess",
				          "!type": "+Phaser.Signal"
				        }
				      }
				    },
				    "TweenManager": {
				      "!doc": "Phaser.TweenManager",
				      "!type": "fn(game: +Phaser.Game)",
				      "prototype": {
				        "add": {
				          "!doc": "Phaser.TweenManager.add",
				          "!type": "fn(tween: +Phaser.Tween) -> +Phaser.Tween"
				        },
				        "isTweening": {
				          "!doc": "Phaser.TweenManager.isTweening",
				          "!type": "fn(object: +Object) -> +Boolean"
				        },
				        "pauseAll": {
				          "!doc": "Phaser.TweenManager.pauseAll",
				          "!type": "fn()"
				        },
				        "removeAll": {
				          "!doc": "Phaser.TweenManager.removeAll",
				          "!type": "fn()"
				        },
				        "game": {
				          "!doc": "Phaser.TweenManager.game",
				          "!type": "+Phaser.Game"
				        },
				        "getAll": {
				          "!doc": "Phaser.TweenManager.getAll",
				          "!type": "fn() -> +Array._Phaser.Tween_"
				        },
				        "resumeAll": {
				          "!doc": "Phaser.TweenManager.resumeAll",
				          "!type": "fn()"
				        },
				        "create": {
				          "!doc": "Phaser.TweenManager.create",
				          "!type": "fn(object: +Object) -> +Phaser.Tween"
				        },
				        "update": {
				          "!doc": "Phaser.TweenManager.update",
				          "!type": "fn() -> +Boolean"
				        },
				        "frameBased": {
				          "!doc": "Phaser.TweenManager.frameBased",
				          "!type": "+Boolean"
				        },
				        "removeFrom": {
				          "!doc": "Phaser.TweenManager.removeFrom",
				          "!type": "fn(obj: +Object, children: +Boolean)"
				        },
				        "remove": {
				          "!doc": "Phaser.TweenManager.remove",
				          "!type": "fn(tween: +Phaser.Tween)"
				        }
				      }
				    },
				    "ScaleManager": {
				      "RESIZE": "+Number",
				      "USER_SCALE": "+Number",
				      "!doc": "Phaser.ScaleManager",
				      "SHOW_ALL": "+Number",
				      "NO_SCALE": "+Number",
				      "!type": "fn(game: +Phaser.Game, width: +Number, height: +Number)",
				      "prototype": {
				        "scaleMode": {
				          "!doc": "Phaser.ScaleManager.scaleMode",
				          "!type": "+Number"
				        },
				        "forceOrientation": {
				          "!doc": "Phaser.ScaleManager.forceOrientation",
				          "!type": "fn(forceLandscape: +Boolean, forcePortrait: +Boolean)"
				        },
				        "onOrientationChange": {
				          "!doc": "Phaser.ScaleManager.onOrientationChange",
				          "!type": "+Phaser.Signal"
				        },
				        "isGameLandscape": {
				          "!doc": "Phaser.ScaleManager.isGameLandscape",
				          "!type": "+Boolean"
				        },
				        "aspectRatio": {
				          "!doc": "Phaser.ScaleManager.aspectRatio",
				          "!type": "+Number"
				        },
				        "setGameSize": {
				          "!doc": "Phaser.ScaleManager.setGameSize",
				          "!type": "fn(width: +Number, height: +Number)"
				        },
				        "boundingParent": {
				          "!doc": "Phaser.ScaleManager.boundingParent",
				          "!type": "+DOMElement"
				        },
				        "minHeight": {
				          "!doc": "Phaser.ScaleManager.minHeight",
				          "!type": "+Number"
				        },
				        "enterIncorrectOrientation": {
				          "!doc": "Phaser.ScaleManager.enterIncorrectOrientation",
				          "!type": "+Phaser.Signal"
				        },
				        "fullScreenScaleMode": {
				          "!doc": "Phaser.ScaleManager.fullScreenScaleMode",
				          "!type": "+Number"
				        },
				        "scaleFactorInversed": {
				          "!doc": "Phaser.ScaleManager.scaleFactorInversed",
				          "!type": "+Phaser.Point"
				        },
				        "onFullScreenChange": {
				          "!doc": "Phaser.ScaleManager.onFullScreenChange",
				          "!type": "+Phaser.Signal"
				        },
				        "windowConstraints": {
				          "!doc": "Phaser.ScaleManager.windowConstraints",
				          "!type": "+Object"
				        },
				        "height": {
				          "!doc": "Phaser.ScaleManager.height",
				          "!type": "+Number"
				        },
				        "maxWidth": {
				          "!doc": "Phaser.ScaleManager.maxWidth",
				          "!type": "+Number"
				        },
				        "isGamePortrait": {
				          "!doc": "Phaser.ScaleManager.isGamePortrait",
				          "!type": "+Boolean"
				        },
				        "margin": {
				          "!doc": "Phaser.ScaleManager.margin",
				          "!type": "+Bounds_like"
				        },
				        "parentIsWindow": {
				          "!doc": "Phaser.ScaleManager.parentIsWindow",
				          "!type": "+Boolean"
				        },
				        "offset": {
				          "!doc": "Phaser.ScaleManager.offset",
				          "!type": "+Phaser.Point"
				        },
				        "sourceAspectRatio": {
				          "!doc": "Phaser.ScaleManager.sourceAspectRatio",
				          "!type": "+Number"
				        },
				        "stopFullScreen": {
				          "!doc": "Phaser.ScaleManager.stopFullScreen",
				          "!type": "fn() -> +Boolean"
				        },
				        "parseConfig": {
				          "!doc": "Phaser.ScaleManager.parseConfig",
				          "!type": "fn(config: +Object)"
				        },
				        "destroy": {
				          "!doc": "Phaser.ScaleManager.destroy",
				          "!type": "fn()"
				        },
				        "createFullScreenTarget": {
				          "!doc": "Phaser.ScaleManager.createFullScreenTarget",
				          "!type": "fn()"
				        },
				        "parentNode": {
				          "!doc": "Phaser.ScaleManager.parentNode",
				          "!type": "+DOMElement"
				        },
				        "onFullScreenInit": {
				          "!doc": "Phaser.ScaleManager.onFullScreenInit",
				          "!type": "+Phaser.Signal"
				        },
				        "setResizeCallback": {
				          "!doc": "Phaser.ScaleManager.setResizeCallback",
				          "!type": "fn(callback: +Function, context: +Object)"
				        },
				        "setUserScale": {
				          "!doc": "Phaser.ScaleManager.setUserScale",
				          "!type": "fn(hScale: +Number, vScale: +numer, hTrim: +Number, vTrim: +Number)"
				        },
				        "isLandscape": {
				          "!doc": "Phaser.ScaleManager.isLandscape",
				          "!type": "+Boolean"
				        },
				        "bounds": {
				          "!doc": "Phaser.ScaleManager.bounds",
				          "!type": "+Phaser.Rectangle"
				        },
				        "preUpdate": {
				          "!doc": "Phaser.ScaleManager.preUpdate",
				          "!type": "fn()"
				        },
				        "compatibility": {
				          "!doc": "Phaser.ScaleManager.compatibility",
				          "!type": "+Object"
				        },
				        "game": {
				          "!doc": "Phaser.ScaleManager.game",
				          "!type": "+Phaser.Game"
				        },
				        "dom": {
				          "!doc": "Phaser.ScaleManager.dom",
				          "!type": "+Phaser.DOM"
				        },
				        "scaleSprite": {
				          "!doc": "Phaser.ScaleManager.scaleSprite",
				          "!type": "fn(sprite: +Phaser.Sprite, width: +Number, height: +Number, letterBox: +Boolean) -> +Phaser.Sprite"
				        },
				        "isPortrait": {
				          "!doc": "Phaser.ScaleManager.isPortrait",
				          "!type": "+Boolean"
				        },
				        "setupScale": {
				          "!doc": "Phaser.ScaleManager.setupScale",
				          "!type": "fn(width: +Number, height: +Number)"
				        },
				        "pageAlignVertically": {
				          "!doc": "Phaser.ScaleManager.pageAlignVertically",
				          "!type": "+Boolean"
				        },
				        "screenOrientation": {
				          "!doc": "Phaser.ScaleManager.screenOrientation",
				          "!type": "+String"
				        },
				        "maxHeight": {
				          "!doc": "Phaser.ScaleManager.maxHeight",
				          "!type": "+Number"
				        },
				        "boot": {
				          "!doc": "Phaser.ScaleManager.boot",
				          "!type": "fn()"
				        },
				        "onFullScreenError": {
				          "!doc": "Phaser.ScaleManager.onFullScreenError",
				          "!type": "+Phaser.Signal"
				        },
				        "onSizeChange": {
				          "!doc": "Phaser.ScaleManager.onSizeChange",
				          "!type": "+Phaser.Signal"
				        },
				        "pageAlignHorizontally": {
				          "!doc": "Phaser.ScaleManager.pageAlignHorizontally",
				          "!type": "+Boolean"
				        },
				        "startFullScreen": {
				          "!doc": "Phaser.ScaleManager.startFullScreen",
				          "!type": "fn(antialias: +Boolean, allowTrampoline: +Boolean) -> +Boolean"
				        },
				        "trackParentInterval": {
				          "!doc": "Phaser.ScaleManager.trackParentInterval",
				          "!type": "+Number"
				        },
				        "leaveIncorrectOrientation": {
				          "!doc": "Phaser.ScaleManager.leaveIncorrectOrientation",
				          "!type": "+Phaser.Signal"
				        },
				        "scaleFactor": {
				          "!doc": "Phaser.ScaleManager.scaleFactor",
				          "!type": "+Phaser.Point"
				        },
				        "refresh": {
				          "!doc": "Phaser.ScaleManager.refresh",
				          "!type": "fn()"
				        },
				        "minWidth": {
				          "!doc": "Phaser.ScaleManager.minWidth",
				          "!type": "+Number"
				        },
				        "forcePortrait": {
				          "!doc": "Phaser.ScaleManager.forcePortrait",
				          "!type": "+Boolean"
				        },
				        "fullScreenTarget": {
				          "!doc": "Phaser.ScaleManager.fullScreenTarget",
				          "!type": "+DOMElement"
				        },
				        "parentScaleFactor": {
				          "!doc": "Phaser.ScaleManager.parentScaleFactor",
				          "!type": "+Phaser.Point"
				        },
				        "incorrectOrientation": {
				          "!doc": "Phaser.ScaleManager.incorrectOrientation",
				          "!type": "+Boolean"
				        },
				        "setMinMax": {
				          "!doc": "Phaser.ScaleManager.setMinMax",
				          "!type": "fn(minWidth: +Number, minHeight: +Number, maxWidth: +Number, maxHeight: +Number)"
				        },
				        "grid": {
				          "!doc": "Phaser.ScaleManager.grid",
				          "!type": "+Phaser.FlexGrid"
				        },
				        "getParentBounds": {
				          "!doc": "Phaser.ScaleManager.getParentBounds",
				          "!type": "fn(target: +Phaser.Rectangle) -> +Phaser.Rectangle"
				        },
				        "width": {
				          "!doc": "Phaser.ScaleManager.width",
				          "!type": "+Number"
				        },
				        "isFullScreen": {
				          "!doc": "Phaser.ScaleManager.isFullScreen",
				          "!type": "+Boolean"
				        },
				        "currentScaleMode": {
				          "!doc": "Phaser.ScaleManager.currentScaleMode",
				          "!type": "+Number"
				        },
				        "forceLandscape": {
				          "!doc": "Phaser.ScaleManager.forceLandscape",
				          "!type": "+Boolean"
				        }
				      },
				      "EXACT_FIT": "+Number"
				    },
				    "Cache": {
				      "TILEMAP": "+Number",
				      "VIDEO": "+Number",
				      "!doc": "Phaser.Cache",
				      "BINARY": "+Number",
				      "TEXT": "+Number",
				      "JSON": "+Number",
				      "prototype": {
				        "addXML": {
				          "!doc": "Phaser.Cache.addXML",
				          "!type": "fn(key: +String, url: +String, data: +Object)"
				        },
				        "removeBitmapFont": {
				          "!doc": "Phaser.Cache.removeBitmapFont",
				          "!type": "fn(key: +String)"
				        },
				        "checkVideoKey": {
				          "!doc": "Phaser.Cache.checkVideoKey",
				          "!type": "fn(key: +String) -> +Boolean"
				        },
				        "checkImageKey": {
				          "!doc": "Phaser.Cache.checkImageKey",
				          "!type": "fn(key: +String) -> +Boolean"
				        },
				        "hasFrameData": {
				          "!doc": "Phaser.Cache.hasFrameData",
				          "!type": "fn(key: +String, cache: +Number) -> +Boolean"
				        },
				        "addVideo": {
				          "!doc": "Phaser.Cache.addVideo",
				          "!type": "fn(key: +String, url: +String, data: +Object, isBlob: +Boolean)"
				        },
				        "getVideo": {
				          "!doc": "Phaser.Cache.getVideo",
				          "!type": "fn(key: +String) -> +Phaser.Video"
				        },
				        "getItem": {
				          "!doc": "Phaser.Cache.getItem",
				          "!type": "fn(key: +String, cache: +Number, method: +String, property: +String) -> +Object"
				        },
				        "addPhysicsData": {
				          "!doc": "Phaser.Cache.addPhysicsData",
				          "!type": "fn(key: +String, url: +String, JSONData: +Object, format: +Number)"
				        },
				        "getFrameCount": {
				          "!doc": "Phaser.Cache.getFrameCount",
				          "!type": "fn(key: +String, cache: +Number) -> +Number"
				        },
				        "addJSON": {
				          "!doc": "Phaser.Cache.addJSON",
				          "!type": "fn(key: +String, url: +String, data: +Object)"
				        },
				        "addTextureAtlas": {
				          "!doc": "Phaser.Cache.addTextureAtlas",
				          "!type": "fn(key: +String, url: +String, data: +Object, atlasData: +Object, format: +Number)"
				        },
				        "reloadSound": {
				          "!doc": "Phaser.Cache.reloadSound",
				          "!type": "fn(key: +String)"
				        },
				        "checkTextKey": {
				          "!doc": "Phaser.Cache.checkTextKey",
				          "!type": "fn(key: +String) -> +Boolean"
				        },
				        "addRenderTexture": {
				          "!doc": "Phaser.Cache.addRenderTexture",
				          "!type": "fn(key: +String, texture: +Phaser.RenderTexture)"
				        },
				        "checkJSONKey": {
				          "!doc": "Phaser.Cache.checkJSONKey",
				          "!type": "fn(key: +String) -> +Boolean"
				        },
				        "removeJSON": {
				          "!doc": "Phaser.Cache.removeJSON",
				          "!type": "fn(key: +String)"
				        },
				        "checkShaderKey": {
				          "!doc": "Phaser.Cache.checkShaderKey",
				          "!type": "fn(key: +String) -> +Boolean"
				        },
				        "removeXML": {
				          "!doc": "Phaser.Cache.removeXML",
				          "!type": "fn(key: +String)"
				        },
				        "checkBitmapFontKey": {
				          "!doc": "Phaser.Cache.checkBitmapFontKey",
				          "!type": "fn(key: +String) -> +Boolean"
				        },
				        "addSpriteSheet": {
				          "!doc": "Phaser.Cache.addSpriteSheet",
				          "!type": "fn(key: +String, url: +String, data: +Object, frameWidth: +Number, frameHeight: +Number, frameMax: +Number, margin: +Number, spacing: +Number)"
				        },
				        "decodedSound": {
				          "!doc": "Phaser.Cache.decodedSound",
				          "!type": "fn(key: +String, data: +Object)"
				        },
				        "addDefaultImage": {
				          "!doc": "Phaser.Cache.addDefaultImage",
				          "!type": "fn()"
				        },
				        "checkPhysicsKey": {
				          "!doc": "Phaser.Cache.checkPhysicsKey",
				          "!type": "fn(key: +String) -> +Boolean"
				        },
				        "getBitmapData": {
				          "!doc": "Phaser.Cache.getBitmapData",
				          "!type": "fn(key: +String) -> +Phaser.BitmapData"
				        },
				        "removeRenderTexture": {
				          "!doc": "Phaser.Cache.removeRenderTexture",
				          "!type": "fn(key: +String)"
				        },
				        "getFrameByName": {
				          "!doc": "Phaser.Cache.getFrameByName",
				          "!type": "fn(key: +String, name: +String, cache: +Number) -> +Phaser.Frame"
				        },
				        "getText": {
				          "!doc": "Phaser.Cache.getText",
				          "!type": "fn(key: +String) -> +Object"
				        },
				        "getTilemapData": {
				          "!doc": "Phaser.Cache.getTilemapData",
				          "!type": "fn(key: +String) -> +Object"
				        },
				        "addImage": {
				          "!doc": "Phaser.Cache.addImage",
				          "!type": "fn(key: +String, url: +String, data: +Object) -> +Object"
				        },
				        "removeBinary": {
				          "!doc": "Phaser.Cache.removeBinary",
				          "!type": "fn(key: +String)"
				        },
				        "removeTilemap": {
				          "!doc": "Phaser.Cache.removeTilemap",
				          "!type": "fn(key: +String)"
				        },
				        "destroy": {
				          "!doc": "Phaser.Cache.destroy",
				          "!type": "fn()"
				        },
				        "removeText": {
				          "!doc": "Phaser.Cache.removeText",
				          "!type": "fn(key: +String)"
				        },
				        "removeVideo": {
				          "!doc": "Phaser.Cache.removeVideo",
				          "!type": "fn(key: +String)"
				        },
				        "checkKey": {
				          "!doc": "Phaser.Cache.checkKey",
				          "!type": "fn(cache: +Number, key: +String) -> +Boolean"
				        },
				        "getRenderTexture": {
				          "!doc": "Phaser.Cache.getRenderTexture",
				          "!type": "fn(key: +String) -> +Object"
				        },
				        "getURL": {
				          "!doc": "Phaser.Cache.getURL",
				          "!type": "fn(url: +String) -> +Object"
				        },
				        "onSoundUnlock": {
				          "!doc": "Phaser.Cache.onSoundUnlock",
				          "!type": "+Phaser.Signal"
				        },
				        "checkSoundKey": {
				          "!doc": "Phaser.Cache.checkSoundKey",
				          "!type": "fn(key: +String) -> +Boolean"
				        },
				        "removeSpriteSheet": {
				          "!doc": "Phaser.Cache.removeSpriteSheet",
				          "!type": "fn(key: +String)"
				        },
				        "removeCanvas": {
				          "!doc": "Phaser.Cache.removeCanvas",
				          "!type": "fn(key: +String)"
				        },
				        "addBitmapData": {
				          "!doc": "Phaser.Cache.addBitmapData",
				          "!type": "fn(key: +String, bitmapData: +Phaser.BitmapData, frameData: +Phaser.FrameData) -> +Phaser.BitmapData"
				        },
				        "addShader": {
				          "!doc": "Phaser.Cache.addShader",
				          "!type": "fn(key: +String, url: +String, data: +Object)"
				        },
				        "getBinary": {
				          "!doc": "Phaser.Cache.getBinary",
				          "!type": "fn(key: +String) -> +Object"
				        },
				        "getImage": {
				          "!doc": "Phaser.Cache.getImage",
				          "!type": "fn(key: +String, full: +Boolean) -> +Phaser.Image"
				        },
				        "checkBitmapDataKey": {
				          "!doc": "Phaser.Cache.checkBitmapDataKey",
				          "!type": "fn(key: +String) -> +Boolean"
				        },
				        "removeSound": {
				          "!doc": "Phaser.Cache.removeSound",
				          "!type": "fn(key: +String)"
				        },
				        "getJSON": {
				          "!doc": "Phaser.Cache.getJSON",
				          "!type": "fn(key: +String, clone: +Boolean) -> +Object"
				        },
				        "updateFrameData": {
				          "!doc": "Phaser.Cache.updateFrameData",
				          "!type": "fn(key: +String, frameData: +Number, cache: +Number)"
				        },
				        "checkTilemapKey": {
				          "!doc": "Phaser.Cache.checkTilemapKey",
				          "!type": "fn(key: +String) -> +Boolean"
				        },
				        "clearGLTextures": {
				          "!doc": "Phaser.Cache.clearGLTextures",
				          "!type": "fn()"
				        },
				        "reloadSoundComplete": {
				          "!doc": "Phaser.Cache.reloadSoundComplete",
				          "!type": "fn(key: +String)"
				        },
				        "game": {
				          "!doc": "Phaser.Cache.game",
				          "!type": "+Phaser.Game"
				        },
				        "getBitmapFont": {
				          "!doc": "Phaser.Cache.getBitmapFont",
				          "!type": "fn(key: +String) -> +Phaser.BitmapFont"
				        },
				        "addSound": {
				          "!doc": "Phaser.Cache.addSound",
				          "!type": "fn(key: +String, url: +String, data: +Object, webAudio: +Boolean, audioTag: +Boolean)"
				        },
				        "getFrame": {
				          "!doc": "Phaser.Cache.getFrame",
				          "!type": "fn(key: +String, cache: +Number) -> +Phaser.Frame"
				        },
				        "checkXMLKey": {
				          "!doc": "Phaser.Cache.checkXMLKey",
				          "!type": "fn(key: +String) -> +Boolean"
				        },
				        "addTilemap": {
				          "!doc": "Phaser.Cache.addTilemap",
				          "!type": "fn(key: +String, url: +String, mapData: +Object, format: +Number)"
				        },
				        "getBaseTexture": {
				          "!doc": "Phaser.Cache.getBaseTexture",
				          "!type": "fn(key: +String, cache: +Number) -> +PIXI.BaseTexture"
				        },
				        "getPhysicsData": {
				          "!doc": "Phaser.Cache.getPhysicsData",
				          "!type": "fn(key: +String, object: +String, fixtureKey: +String) -> +Object"
				        },
				        "isSoundDecoded": {
				          "!doc": "Phaser.Cache.isSoundDecoded",
				          "!type": "fn(key: +String) -> +Boolean"
				        },
				        "checkBinaryKey": {
				          "!doc": "Phaser.Cache.checkBinaryKey",
				          "!type": "fn(key: +String) -> +Boolean"
				        },
				        "addBitmapFont": {
				          "!doc": "Phaser.Cache.addBitmapFont",
				          "!type": "fn(key: +String, url: +String, data: +Object, atlasData: +Object, atlasType: +String, xSpacing: +Number, ySpacing: +Number)"
				        },
				        "isSoundReady": {
				          "!doc": "Phaser.Cache.isSoundReady",
				          "!type": "fn(key: +String) -> +Boolean"
				        },
				        "checkURL": {
				          "!doc": "Phaser.Cache.checkURL",
				          "!type": "fn(url: +String) -> +Boolean"
				        },
				        "getCanvas": {
				          "!doc": "Phaser.Cache.getCanvas",
				          "!type": "fn(key: +String) -> +Object"
				        },
				        "removeBitmapData": {
				          "!doc": "Phaser.Cache.removeBitmapData",
				          "!type": "fn(key: +String)"
				        },
				        "updateSound": {
				          "!doc": "Phaser.Cache.updateSound",
				          "!type": "fn(key: +String)"
				        },
				        "getShader": {
				          "!doc": "Phaser.Cache.getShader",
				          "!type": "fn(key: +String) -> +String"
				        },
				        "getFrameData": {
				          "!doc": "Phaser.Cache.getFrameData",
				          "!type": "fn(key: +String, cache: +Number) -> +Phaser.FrameData"
				        },
				        "addMissingImage": {
				          "!doc": "Phaser.Cache.addMissingImage",
				          "!type": "fn()"
				        },
				        "addText": {
				          "!doc": "Phaser.Cache.addText",
				          "!type": "fn(key: +String, url: +String, data: +Object)"
				        },
				        "checkTextureKey": {
				          "!doc": "Phaser.Cache.checkTextureKey",
				          "!type": "fn(key: +String) -> +Boolean"
				        },
				        "getXML": {
				          "!doc": "Phaser.Cache.getXML",
				          "!type": "fn(key: +String) -> +Object"
				        },
				        "getFrameByIndex": {
				          "!doc": "Phaser.Cache.getFrameByIndex",
				          "!type": "fn(key: +String, index: +Number, cache: +Number) -> +Phaser.Frame"
				        },
				        "addCanvas": {
				          "!doc": "Phaser.Cache.addCanvas",
				          "!type": "fn(key: +String, canvas: +HTMLCanvasElement, context: +CanvasRenderingContext2D)"
				        },
				        "getKeys": {
				          "!doc": "Phaser.Cache.getKeys",
				          "!type": "fn(cache: +Number) -> +Array"
				        },
				        "addBinary": {
				          "!doc": "Phaser.Cache.addBinary",
				          "!type": "fn(key: +String, binaryData: +Object)"
				        },
				        "removeImage": {
				          "!doc": "Phaser.Cache.removeImage",
				          "!type": "fn(key: +String, removeFromPixi: +Boolean)"
				        },
				        "removePhysics": {
				          "!doc": "Phaser.Cache.removePhysics",
				          "!type": "fn(key: +String)"
				        },
				        "getPixiTexture": {
				          "!doc": "Phaser.Cache.getPixiTexture",
				          "!type": "fn(key: +String) -> +PIXI.Texture"
				        },
				        "checkRenderTextureKey": {
				          "!doc": "Phaser.Cache.checkRenderTextureKey",
				          "!type": "fn(key: +String) -> +Boolean"
				        },
				        "checkCanvasKey": {
				          "!doc": "Phaser.Cache.checkCanvasKey",
				          "!type": "fn(key: +String) -> +Boolean"
				        },
				        "removeShader": {
				          "!doc": "Phaser.Cache.removeShader",
				          "!type": "fn(key: +String)"
				        },
				        "removeTextureAtlas": {
				          "!doc": "Phaser.Cache.removeTextureAtlas",
				          "!type": "fn(key: +String)"
				        },
				        "getTextureFrame": {
				          "!doc": "Phaser.Cache.getTextureFrame",
				          "!type": "fn(key: +String) -> +Phaser.Frame"
				        },
				        "autoResolveURL": {
				          "!doc": "Phaser.Cache.autoResolveURL",
				          "!type": "+Boolean"
				        },
				        "getPixiBaseTexture": {
				          "!doc": "Phaser.Cache.getPixiBaseTexture",
				          "!type": "fn(key: +String) -> +PIXI.BaseTexture"
				        },
				        "getSoundData": {
				          "!doc": "Phaser.Cache.getSoundData",
				          "!type": "fn(key: +String) -> +Object"
				        },
				        "getSound": {
				          "!doc": "Phaser.Cache.getSound",
				          "!type": "fn(key: +String) -> +Phaser.Sound"
				        }
				      },
				      "SHADER": "+Number",
				      "TEXTURE": "+Number",
				      "IMAGE": "+Number",
				      "CANVAS": "+Number",
				      "BITMAPFONT": "+Number",
				      "XML": "+Number",
				      "SOUND": "+Number",
				      "RENDER_TEXTURE": "+Number",
				      "PHYSICS": "+Number",
				      "!type": "fn(game: +Phaser.Game)",
				      "BITMAPDATA": "+Number"
				    },
				    "Ellipse": {
				      "!doc": "Phaser.Ellipse",
				      "!type": "fn(x: +Number, y: +Number, width: +Number, height: +Number)",
				      "prototype": {
				        "bottom": {
				          "!doc": "Phaser.Ellipse.bottom",
				          "!type": "+Number"
				        },
				        "right": {
				          "!doc": "Phaser.Ellipse.right",
				          "!type": "+Number"
				        },
				        "type": {
				          "!doc": "Phaser.Ellipse.type",
				          "!type": "+Number"
				        },
				        "getBounds": {
				          "!doc": "Phaser.Ellipse.getBounds",
				          "!type": "fn() -> +Phaser.Rectangle"
				        },
				        "copyFrom": {
				          "!doc": "Phaser.Ellipse.copyFrom",
				          "!type": "fn(source: +Object) -> +Phaser.Ellipse"
				        },
				        "empty": {
				          "!doc": "Phaser.Ellipse.empty",
				          "!type": "+Boolean"
				        },
				        "copyTo": {
				          "!doc": "Phaser.Ellipse.copyTo",
				          "!type": "fn(dest: +Object) -> +Object"
				        },
				        "random": {
				          "!doc": "Phaser.Ellipse.random",
				          "!type": "fn(out: +Phaser.Point) -> +Phaser.Point"
				        },
				        "contains": {
				          "!doc": "Phaser.Ellipse.contains",
				          "!type": "fn(x: +Number, y: +Number) -> +Boolean"
				        },
				        "top": {
				          "!doc": "Phaser.Ellipse.top",
				          "!type": "+Number"
				        },
				        "left": {
				          "!doc": "Phaser.Ellipse.left",
				          "!type": "+Object"
				        },
				        "clone": {
				          "!doc": "Phaser.Ellipse.clone",
				          "!type": "fn(output: +Phaser.Ellipse) -> +Phaser.Ellipse"
				        },
				        "x": {
				          "!doc": "Phaser.Ellipse.x",
				          "!type": "+Number"
				        },
				        "width": {
				          "!doc": "Phaser.Ellipse.width",
				          "!type": "+Number"
				        },
				        "setTo": {
				          "!doc": "Phaser.Ellipse.setTo",
				          "!type": "fn(x: +Number, y: +Number, width: +Number, height: +Number) -> +Phaser.Ellipse"
				        },
				        "y": {
				          "!doc": "Phaser.Ellipse.y",
				          "!type": "+Number"
				        },
				        "toString": {
				          "!doc": "Phaser.Ellipse.toString",
				          "!type": "fn() -> +String"
				        },
				        "height": {
				          "!doc": "Phaser.Ellipse.height",
				          "!type": "+Number"
				        }
				      }
				    },
				    "Loader": {
				      "PHYSICS_PHASER_JSON": "+Number",
				      "!doc": "Phaser.Loader",
				      "TEXTURE_ATLAS_XML_STARLING": "+Number",
				      "TEXTURE_ATLAS_JSON_HASH": "+Number",
				      "!type": "fn(game: +Phaser.Game)",
				      "TEXTURE_ATLAS_JSON_PYXEL": "+Number",
				      "prototype": {
				        "progressFloat": {
				          "!doc": "Phaser.Loader.progressFloat",
				          "!type": "+Number"
				        },
				        "_withSyncPointDepth;": {
				          "!doc": "Phaser.Loader._withSyncPointDepth;",
				          "!type": "+Number"
				        },
				        "atlas": {
				          "!doc": "Phaser.Loader.atlas",
				          "!type": "fn(key: +String, textureURL: +String, atlasURL: +String, atlasData: +Object, format: +Number) -> +Phaser.Loader"
				        },
				        "atlasJSONHash": {
				          "!doc": "Phaser.Loader.atlasJSONHash",
				          "!type": "fn(key: +String, textureURL: +String, atlasURL: +String, atlasData: +Object) -> +Phaser.Loader"
				        },
				        "checkKeyExists": {
				          "!doc": "Phaser.Loader.checkKeyExists",
				          "!type": "fn(type: +String, key: +String) -> +Boolean"
				        },
				        "resetLocked": {
				          "!doc": "Phaser.Loader.resetLocked",
				          "!type": "+Boolean"
				        },
				        "onFileError": {
				          "!doc": "Phaser.Loader.onFileError",
				          "!type": "+Phaser.Signal"
				        },
				        "bitmapFont": {
				          "!doc": "Phaser.Loader.bitmapFont",
				          "!type": "fn(key: +String, textureURL: +String, atlasURL: +String, atlasData: +Object, xSpacing: +Number, ySpacing: +Number) -> +Phaser.Loader"
				        },
				        "getAsset": {
				          "!doc": "Phaser.Loader.getAsset",
				          "!type": "fn(type: +String, key: +String) -> +Object"
				        },
				        "totalLoadedPacks": {
				          "!doc": "Phaser.Loader.totalLoadedPacks",
				          "!type": "fn() -> +Number"
				        },
				        "path": {
				          "!doc": "Phaser.Loader.path",
				          "!type": "+String"
				        },
				        "removeAll": {
				          "!doc": "Phaser.Loader.removeAll",
				          "!type": "fn()"
				        },
				        "xml": {
				          "!doc": "Phaser.Loader.xml",
				          "!type": "fn(key: +String, url: +String, overwrite: +Boolean) -> +Phaser.Loader"
				        },
				        "text": {
				          "!doc": "Phaser.Loader.text",
				          "!type": "fn(key: +String, url: +String, overwrite: +Boolean) -> +Phaser.Loader"
				        },
				        "atlasJSONArray": {
				          "!doc": "Phaser.Loader.atlasJSONArray",
				          "!type": "fn(key: +String, textureURL: +String, atlasURL: +String, atlasData: +Object) -> +Phaser.Loader"
				        },
				        "useXDomainRequest": {
				          "!doc": "Phaser.Loader.useXDomainRequest",
				          "!type": "+Boolean"
				        },
				        "image": {
				          "!doc": "Phaser.Loader.image",
				          "!type": "fn(key: +String, url: +String, overwrite: +Boolean) -> +Phaser.Loader"
				        },
				        "images": {
				          "!doc": "Phaser.Loader.images",
				          "!type": "fn(keys: +Array, urls: +Array) -> +Phaser.Loader"
				        },
				        "cache": {
				          "!doc": "Phaser.Loader.cache",
				          "!type": "+Phaser.Cache"
				        },
				        "audiosprite": {
				          "!doc": "Phaser.Loader.audiosprite",
				          "!type": "fn(key: +String, urls: +Array, jsonURL: +String, jsonData: +String, autoDecode: +Boolean) -> +Phaser.Loader"
				        },
				        "setPreloadSprite": {
				          "!doc": "Phaser.Loader.setPreloadSprite",
				          "!type": "fn(sprite: +Phaser.Sprite, direction: +Number)"
				        },
				        "onFileComplete": {
				          "!doc": "Phaser.Loader.onFileComplete",
				          "!type": "+Phaser.Signal"
				        },
				        "onLoadStart": {
				          "!doc": "Phaser.Loader.onLoadStart",
				          "!type": "+Phaser.Signal"
				        },
				        "crossOrigin": {
				          "!doc": "Phaser.Loader.crossOrigin",
				          "!type": "+Boolean"
				        },
				        "onFileStart": {
				          "!doc": "Phaser.Loader.onFileStart",
				          "!type": "+Phaser.Signal"
				        },
				        "pack": {
				          "!doc": "Phaser.Loader.pack",
				          "!type": "fn(key: +String, url: +String, data: +Object, callbackContext: +Object) -> +Phaser.Loader"
				        },
				        "script": {
				          "!doc": "Phaser.Loader.script",
				          "!type": "fn(key: +String, url: +String, callback: +Function, callbackContext: +Object) -> +Phaser.Loader"
				        },
				        "isLoading": {
				          "!doc": "Phaser.Loader.isLoading",
				          "!type": "+Boolean"
				        },
				        "maxParallelDownloads": {
				          "!doc": "Phaser.Loader.maxParallelDownloads",
				          "!type": "+Number"
				        },
				        "onLoadComplete": {
				          "!doc": "Phaser.Loader.onLoadComplete",
				          "!type": "+Phaser.Signal"
				        },
				        "onPackComplete": {
				          "!doc": "Phaser.Loader.onPackComplete",
				          "!type": "+Phaser.Signal"
				        },
				        "binary": {
				          "!doc": "Phaser.Loader.binary",
				          "!type": "fn(key: +String, url: +String, callback: +Function, callbackContext: +Object) -> +Phaser.Loader"
				        },
				        "reset": {
				          "!doc": "Phaser.Loader.reset",
				          "!type": "fn(hard: +Boolean, clearEvents: +Boolean)"
				        },
				        "hasLoaded": {
				          "!doc": "Phaser.Loader.hasLoaded",
				          "!type": "+Boolean"
				        },
				        "transformUrl": {
				          "!doc": "Phaser.Loader.transformUrl",
				          "!type": "fn(url: +String, file: +Object) -> +String"
				        },
				        "preloadSprite": {
				          "!doc": "Phaser.Loader.preloadSprite",
				          "!type": "+Object"
				        },
				        "getAssetIndex": {
				          "!doc": "Phaser.Loader.getAssetIndex",
				          "!type": "fn(type: +String, key: +String) -> +Number"
				        },
				        "shader": {
				          "!doc": "Phaser.Loader.shader",
				          "!type": "fn(key: +String, url: +String, overwrite: +Boolean) -> +Phaser.Loader"
				        },
				        "game": {
				          "!doc": "Phaser.Loader.game",
				          "!type": "+Phaser.Game"
				        },
				        "withSyncPoints": {
				          "!doc": "Phaser.Loader.withSyncPoints",
				          "!type": "fn(callback: +Function, callbackContext: +Object) -> +Phaser.Loader"
				        },
				        "video": {
				          "!doc": "Phaser.Loader.video",
				          "!type": "fn(key: +String, urls: +String, loadEvent: +String, asBlob: +Boolean) -> +Phaser.Loader"
				        },
				        "totalQueuedFiles": {
				          "!doc": "Phaser.Loader.totalQueuedFiles",
				          "!type": "fn() -> +Number"
				        },
				        "tilemap": {
				          "!doc": "Phaser.Loader.tilemap",
				          "!type": "fn(key: +String, url: +String, data: +Object, format: +Number) -> +Phaser.Loader"
				        },
				        "removeFile": {
				          "!doc": "Phaser.Loader.removeFile",
				          "!type": "fn(type: +String, key: +String)"
				        },
				        "totalQueuedPacks": {
				          "!doc": "Phaser.Loader.totalQueuedPacks",
				          "!type": "fn() -> +Number"
				        },
				        "physics": {
				          "!doc": "Phaser.Loader.physics",
				          "!type": "fn(key: +String, url: +String, data: +Object, format: +String) -> +Phaser.Loader"
				        },
				        "json": {
				          "!doc": "Phaser.Loader.json",
				          "!type": "fn(key: +String, url: +String, overwrite: +Boolean) -> +Phaser.Loader"
				        },
				        "audio": {
				          "!doc": "Phaser.Loader.audio",
				          "!type": "fn(key: +String, urls: +String, autoDecode: +Boolean) -> +Phaser.Loader"
				        },
				        "spritesheet": {
				          "!doc": "Phaser.Loader.spritesheet",
				          "!type": "fn(key: +String, url: +String, frameWidth: +Number, frameHeight: +Number, frameMax: +Number, margin: +Number, spacing: +Number) -> +Phaser.Loader"
				        },
				        "start": {
				          "!doc": "Phaser.Loader.start",
				          "!type": "fn()"
				        },
				        "atlasXML": {
				          "!doc": "Phaser.Loader.atlasXML",
				          "!type": "fn(key: +String, textureURL: +String, atlasURL: +String, atlasData: +Object) -> +Phaser.Loader"
				        },
				        "addToFileList": {
				          "!doc": "Phaser.Loader.addToFileList",
				          "!type": "fn(type: +String, key: +String, url: +String, properties: +Object, overwrite: +Boolean, extension: +String) -> +Phaser.Loader"
				        },
				        "baseURL": {
				          "!doc": "Phaser.Loader.baseURL",
				          "!type": "+String"
				        },
				        "totalLoadedFiles": {
				          "!doc": "Phaser.Loader.totalLoadedFiles",
				          "!type": "fn() -> +Number"
				        },
				        "addSyncPoint": {
				          "!doc": "Phaser.Loader.addSyncPoint",
				          "!type": "fn(type: +String, key: +String) -> +Phaser.Loader"
				        },
				        "resize": {
				          "!doc": "Phaser.Loader.resize",
				          "!type": "fn()"
				        },
				        "progress": {
				          "!doc": "Phaser.Loader.progress",
				          "!type": "+Number"
				        },
				        "enableParallel": {
				          "!doc": "Phaser.Loader.enableParallel",
				          "!type": "+Number"
				        },
				        "replaceInFileList": {
				          "!doc": "Phaser.Loader.replaceInFileList",
				          "!type": "fn(type: +String, key: +String, url: +String, properties: +Object)"
				        }
				      },
				      "TEXTURE_ATLAS_JSON_ARRAY": "+Number",
				      "PHYSICS_LIME_CORONA_JSON": "+Number"
				    },
				    "Time": {
				      "!doc": "Phaser.Time",
				      "!type": "fn(game: +Phaser.Game)",
				      "prototype": {
				        "game": {
				          "!doc": "Phaser.Time.game",
				          "!type": "+Phaser.Game"
				        },
				        "fpsMin": {
				          "!doc": "Phaser.Time.fpsMin",
				          "!type": "+Number"
				        },
				        "timeToCall": {
				          "!doc": "Phaser.Time.timeToCall",
				          "!type": "+Number"
				        },
				        "update": {
				          "!doc": "Phaser.Time.update",
				          "!type": "fn(time: +Number)"
				        },
				        "totalElapsedSeconds": {
				          "!doc": "Phaser.Time.totalElapsedSeconds",
				          "!type": "fn() -> +Number"
				        },
				        "elapsed": {
				          "!doc": "Phaser.Time.elapsed",
				          "!type": "+Number"
				        },
				        "removeAll": {
				          "!doc": "Phaser.Time.removeAll",
				          "!type": "fn()"
				        },
				        "advancedTiming": {
				          "!doc": "Phaser.Time.advancedTiming",
				          "!type": "+Boolean"
				        },
				        "fpsMax": {
				          "!doc": "Phaser.Time.fpsMax",
				          "!type": "+Number"
				        },
				        "now": {
				          "!doc": "Phaser.Time.now",
				          "!type": "+Number"
				        },
				        "create": {
				          "!doc": "Phaser.Time.create",
				          "!type": "fn(autoDestroy: +Boolean) -> +Phaser.Timer"
				        },
				        "physicsElapsedMS": {
				          "!doc": "Phaser.Time.physicsElapsedMS",
				          "!type": "+Number"
				        },
				        "desiredFpsMult": {
				          "!doc": "Phaser.Time.desiredFpsMult",
				          "!type": "+Number"
				        },
				        "boot": {
				          "!doc": "Phaser.Time.boot",
				          "!type": "fn()"
				        },
				        "suggestedFps": {
				          "!doc": "Phaser.Time.suggestedFps",
				          "!type": "+Number"
				        },
				        "events": {
				          "!doc": "Phaser.Time.events",
				          "!type": "+Phaser.Timer"
				        },
				        "elapsedSecondsSince": {
				          "!doc": "Phaser.Time.elapsedSecondsSince",
				          "!type": "fn(since: +Number) -> +Number"
				        },
				        "add": {
				          "!doc": "Phaser.Time.add",
				          "!type": "fn(timer: +Phaser.Timer) -> +Phaser.Timer"
				        },
				        "elapsedSince": {
				          "!doc": "Phaser.Time.elapsedSince",
				          "!type": "fn(since: +Number) -> +Number"
				        },
				        "frames": {
				          "!doc": "Phaser.Time.frames",
				          "!type": "+Number"
				        },
				        "desiredFps": {
				          "!doc": "Phaser.Time.desiredFps",
				          "!type": "+Number"
				        },
				        "fps": {
				          "!doc": "Phaser.Time.fps",
				          "!type": "+Number"
				        },
				        "refresh": {
				          "!doc": "Phaser.Time.refresh",
				          "!type": "fn()"
				        },
				        "prevTime": {
				          "!doc": "Phaser.Time.prevTime",
				          "!type": "+Number"
				        },
				        "slowMotion": {
				          "!doc": "Phaser.Time.slowMotion",
				          "!type": "+Number"
				        },
				        "msMax": {
				          "!doc": "Phaser.Time.msMax",
				          "!type": "+Number"
				        },
				        "physicsElapsed": {
				          "!doc": "Phaser.Time.physicsElapsed",
				          "!type": "+Number"
				        },
				        "pauseDuration": {
				          "!doc": "Phaser.Time.pauseDuration",
				          "!type": "+Number"
				        },
				        "timeExpected": {
				          "!doc": "Phaser.Time.timeExpected",
				          "!type": "+Number"
				        },
				        "reset": {
				          "!doc": "Phaser.Time.reset",
				          "!type": "fn()"
				        },
				        "msMin": {
				          "!doc": "Phaser.Time.msMin",
				          "!type": "+Number"
				        },
				        "time": {
				          "!doc": "Phaser.Time.time",
				          "!type": "+Number"
				        },
				        "elapsedMS": {
				          "!doc": "Phaser.Time.elapsedMS",
				          "!type": "+Number"
				        }
				      }
				    },
				    "Touch": {
				      "!doc": "Phaser.Touch",
				      "!type": "fn(game: +Phaser.Game)",
				      "prototype": {
				        "onTouchStart": {
				          "!doc": "Phaser.Touch.onTouchStart",
				          "!type": "fn(event: +TouchEvent)"
				        },
				        "game": {
				          "!doc": "Phaser.Touch.game",
				          "!type": "+Phaser.Game"
				        },
				        "onTouchEnter": {
				          "!doc": "Phaser.Touch.onTouchEnter",
				          "!type": "fn(event: +TouchEvent)"
				        },
				        "onTouchMove": {
				          "!doc": "Phaser.Touch.onTouchMove",
				          "!type": "fn(event: +TouchEvent)"
				        },
				        "touchStartCallback": {
				          "!doc": "Phaser.Touch.touchStartCallback",
				          "!type": "+Function"
				        },
				        "start": {
				          "!doc": "Phaser.Touch.start",
				          "!type": "fn()"
				        },
				        "consumeTouchMove": {
				          "!doc": "Phaser.Touch.consumeTouchMove",
				          "!type": "fn()"
				        },
				        "touchLeaveCallback": {
				          "!doc": "Phaser.Touch.touchLeaveCallback",
				          "!type": "+Function"
				        },
				        "callbackContext": {
				          "!doc": "Phaser.Touch.callbackContext",
				          "!type": "+Object"
				        },
				        "onTouchLeave": {
				          "!doc": "Phaser.Touch.onTouchLeave",
				          "!type": "fn(event: +TouchEvent)"
				        },
				        "enabled": {
				          "!doc": "Phaser.Touch.enabled",
				          "!type": "+Boolean"
				        },
				        "touchLockCallbacks": {
				          "!doc": "Phaser.Touch.touchLockCallbacks",
				          "!type": "+Array"
				        },
				        "touchEnterCallback": {
				          "!doc": "Phaser.Touch.touchEnterCallback",
				          "!type": "+Function"
				        },
				        "addTouchLockCallback": {
				          "!doc": "Phaser.Touch.addTouchLockCallback",
				          "!type": "fn(callback: +Function, context: +Object, onEnd: +Boolean)"
				        },
				        "touchMoveCallback": {
				          "!doc": "Phaser.Touch.touchMoveCallback",
				          "!type": "+Function"
				        },
				        "onTouchCancel": {
				          "!doc": "Phaser.Touch.onTouchCancel",
				          "!type": "fn(event: +TouchEvent)"
				        },
				        "stop": {
				          "!doc": "Phaser.Touch.stop",
				          "!type": "fn()"
				        },
				        "touchCancelCallback": {
				          "!doc": "Phaser.Touch.touchCancelCallback",
				          "!type": "+Function"
				        },
				        "removeTouchLockCallback": {
				          "!doc": "Phaser.Touch.removeTouchLockCallback",
				          "!type": "fn(callback: +Function, context: +Object) -> +Boolean"
				        },
				        "touchEndCallback": {
				          "!doc": "Phaser.Touch.touchEndCallback",
				          "!type": "+Function"
				        },
				        "onTouchEnd": {
				          "!doc": "Phaser.Touch.onTouchEnd",
				          "!type": "fn(event: +TouchEvent)"
				        },
				        "event": {
				          "!doc": "Phaser.Touch.event",
				          "!type": "+TouchEvent"
				        },
				        "preventDefault": {
				          "!doc": "Phaser.Touch.preventDefault",
				          "!type": "+Boolean"
				        }
				      }
				    },
				    "RequestAnimationFrame": {
				      "!doc": "Phaser.RequestAnimationFrame",
				      "!type": "fn(game: +Phaser.Game, forceSetTimeOut: +Boolean)",
				      "prototype": {
				        "isRAF": {
				          "!doc": "Phaser.RequestAnimationFrame.isRAF",
				          "!type": "fn() -> +Boolean"
				        },
				        "isSetTimeOut": {
				          "!doc": "Phaser.RequestAnimationFrame.isSetTimeOut",
				          "!type": "fn() -> +Boolean"
				        },
				        "updateSetTimeout": {
				          "!doc": "Phaser.RequestAnimationFrame.updateSetTimeout",
				          "!type": "fn()"
				        },
				        "game": {
				          "!doc": "Phaser.RequestAnimationFrame.game",
				          "!type": "+Phaser.Game"
				        },
				        "stop": {
				          "!doc": "Phaser.RequestAnimationFrame.stop",
				          "!type": "fn()"
				        },
				        "isRunning": {
				          "!doc": "Phaser.RequestAnimationFrame.isRunning",
				          "!type": "+Boolean"
				        },
				        "forceSetTimeOut": {
				          "!doc": "Phaser.RequestAnimationFrame.forceSetTimeOut",
				          "!type": "+Boolean"
				        },
				        "start": {
				          "!doc": "Phaser.RequestAnimationFrame.start",
				          "!type": "fn()"
				        },
				        "updateRAF": {
				          "!doc": "Phaser.RequestAnimationFrame.updateRAF",
				          "!type": "fn()"
				        }
				      }
				    },
				    "SpriteBatch": {
				      "SORT_ASCENDING": "+Number",
				      "RETURN_TOTAL": "+Number",
				      "!doc": "Phaser.SpriteBatch",
				      "RETURN_NONE": "+Number",
				      "!type": "fn(game: +Phaser.Game, parent: +Phaser.Group, name: +String, addToStage: +Boolean)",
				      "SORT_DESCENDING": "+Number",
				      "RETURN_CHILD": "+Number",
				      "prototype": {
				        "xy": {
				          "!doc": "Phaser.SpriteBatch.xy",
				          "!type": "fn(index: +Number, x: +Number, y: +Number)"
				        },
				        "parent": {
				          "!doc": "Phaser.SpriteBatch.parent",
				          "!type": "+PIXI.DisplayObjectContainer"
				        },
				        "descendingSortHandler": {
				          "!doc": "Phaser.SpriteBatch.descendingSortHandler",
				          "!type": "fn(a: +Object, b: +Object)"
				        },
				        "type": {
				          "!doc": "Phaser.SpriteBatch.type",
				          "!type": "+Number"
				        },
				        "moveAll": {
				          "!doc": "Phaser.SpriteBatch.moveAll",
				          "!type": "fn(group: +Phaser.Group, silent: +Boolean) -> +Phaser.Group"
				        },
				        "removeAll": {
				          "!doc": "Phaser.SpriteBatch.removeAll",
				          "!type": "fn(destroy: +Boolean, silent: +Boolean)"
				        },
				        "enableBody": {
				          "!doc": "Phaser.SpriteBatch.enableBody",
				          "!type": "+Boolean"
				        },
				        "children": {
				          "!doc": "Phaser.SpriteBatch.children",
				          "!type": "+Array_DisplayObject_"
				        },
				        "customSort": {
				          "!doc": "Phaser.SpriteBatch.customSort",
				          "!type": "fn(sortHandler: +Function, context: +Object)"
				        },
				        "enableBodyDebug": {
				          "!doc": "Phaser.SpriteBatch.enableBodyDebug",
				          "!type": "+Boolean"
				        },
				        "pivot": {
				          "!doc": "Phaser.SpriteBatch.pivot",
				          "!type": "+Phaser.Point"
				        },
				        "bringToTop": {
				          "!doc": "Phaser.SpriteBatch.bringToTop",
				          "!type": "fn(child: +Object) -> +Object"
				        },
				        "moveUp": {
				          "!doc": "Phaser.SpriteBatch.moveUp",
				          "!type": "fn(child: +Object) -> +Object"
				        },
				        "physicsType": {
				          "!doc": "Phaser.SpriteBatch.physicsType",
				          "!type": "+Number"
				        },
				        "postUpdate": {
				          "!doc": "Phaser.SpriteBatch.postUpdate",
				          "!type": "fn()"
				        },
				        "destroy": {
				          "!doc": "Phaser.SpriteBatch.destroy",
				          "!type": "fn(destroyChildren: +Boolean, soft: +Boolean)"
				        },
				        "cursorIndex": {
				          "!doc": "Phaser.SpriteBatch.cursorIndex",
				          "!type": "+Number"
				        },
				        "getFirstDead": {
				          "!doc": "Phaser.SpriteBatch.getFirstDead",
				          "!type": "fn(createIfNull: +Boolean, x: +Number, y: +Number, key: +String, frame: +String) -> +PIXI.DisplayObject"
				        },
				        "physicsSortDirection": {
				          "!doc": "Phaser.SpriteBatch.physicsSortDirection",
				          "!type": "+Number"
				        },
				        "addAt": {
				          "!doc": "Phaser.SpriteBatch.addAt",
				          "!type": "fn(child: +DisplayObject, index: +Number, silent: +Boolean) -> +PIXI.DisplayObject"
				        },
				        "worldPosition": {
				          "!doc": "Phaser.SpriteBatch.worldPosition",
				          "!type": "+Phaser.Point"
				        },
				        "forEachAlive": {
				          "!doc": "Phaser.SpriteBatch.forEachAlive",
				          "!type": "fn(callback: +Function, callbackContext: +Object, args: +Object)"
				        },
				        "resetCursor": {
				          "!doc": "Phaser.SpriteBatch.resetCursor",
				          "!type": "fn(index: +Number) -> +Object"
				        },
				        "addMultiple": {
				          "!doc": "Phaser.SpriteBatch.addMultiple",
				          "!type": "fn(children: +Array._DisplayObject_, silent: +Boolean) -> +Array._DisplayObject_"
				        },
				        "setProperty": {
				          "!doc": "Phaser.SpriteBatch.setProperty",
				          "!type": "fn(child: +Object, key: +Array, value: +Object, operation: +Number, force: +Boolean) -> +Boolean"
				        },
				        "preUpdate": {
				          "!doc": "Phaser.SpriteBatch.preUpdate",
				          "!type": "fn()"
				        },
				        "hash": {
				          "!doc": "Phaser.SpriteBatch.hash",
				          "!type": "+Array"
				        },
				        "filterArea": {
				          "!doc": "Phaser.SpriteBatch.filterArea",
				          "!type": "+Phaser.Rectangle"
				        },
				        "addToHash": {
				          "!doc": "Phaser.SpriteBatch.addToHash",
				          "!type": "fn(child: +DisplayObject) -> +Boolean"
				        },
				        "worldScale": {
				          "!doc": "Phaser.SpriteBatch.worldScale",
				          "!type": "+Phaser.Point"
				        },
				        "alive": {
				          "!doc": "Phaser.SpriteBatch.alive",
				          "!type": "+Boolean"
				        },
				        "checkProperty": {
				          "!doc": "Phaser.SpriteBatch.checkProperty",
				          "!type": "fn(child: +Object, key: +Array, value: +Object, force: +Boolean) -> +Boolean"
				        },
				        "callbackFromArray": {
				          "!doc": "Phaser.SpriteBatch.callbackFromArray",
				          "!type": "fn(child: +Object, callback: +Array, length: +Number)"
				        },
				        "worldAlpha": {
				          "!doc": "Phaser.SpriteBatch.worldAlpha",
				          "!type": "+Number"
				        },
				        "multiplyAll": {
				          "!doc": "Phaser.SpriteBatch.multiplyAll",
				          "!type": "fn(property: +String, amount: +Number, checkAlive: +Boolean, checkVisible: +Boolean)"
				        },
				        "angle": {
				          "!doc": "Phaser.SpriteBatch.angle",
				          "!type": "+Number"
				        },
				        "iterate": {
				          "!doc": "Phaser.SpriteBatch.iterate",
				          "!type": "fn(key: +String, value: +Object, returnType: +Number, callback: +Function, callbackContext: +Object, args: +Array._any_) -> +Object"
				        },
				        "onDestroy": {
				          "!doc": "Phaser.SpriteBatch.onDestroy",
				          "!type": "+Phaser.Signal"
				        },
				        "set": {
				          "!doc": "Phaser.SpriteBatch.set",
				          "!type": "fn(child: +Phaser.Sprite, key: +String, value: +Object, checkAlive: +Boolean, checkVisible: +Boolean, operation: +Number, force: +Boolean) -> +Boolean"
				        },
				        "getFirstExists": {
				          "!doc": "Phaser.SpriteBatch.getFirstExists",
				          "!type": "fn(exists: +Boolean, createIfNull: +Boolean, x: +Number, y: +Number, key: +String, frame: +String) -> +PIXI.DisplayObject"
				        },
				        "reverse": {
				          "!doc": "Phaser.SpriteBatch.reverse",
				          "!type": "fn()"
				        },
				        "filter": {
				          "!doc": "Phaser.SpriteBatch.filter",
				          "!type": "fn(predicate: +Function, checkExists: +Boolean) -> +Phaser.ArraySet"
				        },
				        "stage": {
				          "!doc": "Phaser.SpriteBatch.stage",
				          "!type": "+Phaser.Stage"
				        },
				        "addAll": {
				          "!doc": "Phaser.SpriteBatch.addAll",
				          "!type": "fn(property: +String, amount: +Number, checkAlive: +Boolean, checkVisible: +Boolean)"
				        },
				        "ignoreDestroy": {
				          "!doc": "Phaser.SpriteBatch.ignoreDestroy",
				          "!type": "+Boolean"
				        },
				        "x": {
				          "!doc": "Phaser.SpriteBatch.x",
				          "!type": "+Number"
				        },
				        "exists": {
				          "!doc": "Phaser.SpriteBatch.exists",
				          "!type": "+Boolean"
				        },
				        "y": {
				          "!doc": "Phaser.SpriteBatch.y",
				          "!type": "+Number"
				        },
				        "z": {
				          "!doc": "Phaser.SpriteBatch.z",
				          "!type": "+Number"
				        },
				        "divideAll": {
				          "!doc": "Phaser.SpriteBatch.divideAll",
				          "!type": "fn(property: +String, amount: +Number, checkAlive: +Boolean, checkVisible: +Boolean)"
				        },
				        "setAllChildren": {
				          "!doc": "Phaser.SpriteBatch.setAllChildren",
				          "!type": "fn(key: +String, value: +Object, checkAlive: +Boolean, checkVisible: +Boolean, operation: +Number, force: +Boolean)"
				        },
				        "physicsBodyType": {
				          "!doc": "Phaser.SpriteBatch.physicsBodyType",
				          "!type": "+Number"
				        },
				        "getIndex": {
				          "!doc": "Phaser.SpriteBatch.getIndex",
				          "!type": "fn(child: +Object) -> +Number"
				        },
				        "getBottom": {
				          "!doc": "Phaser.SpriteBatch.getBottom",
				          "!type": "fn() -> +Object"
				        },
				        "replace": {
				          "!doc": "Phaser.SpriteBatch.replace",
				          "!type": "fn(oldChild: +Object, newChild: +Object) -> +Object"
				        },
				        "resetChild": {
				          "!doc": "Phaser.SpriteBatch.resetChild",
				          "!type": "fn(child: +DisplayObject, x: +Number, y: +Number, key: +String, frame: +String) -> +PIXI.DisplayObject"
				        },
				        "getRandom": {
				          "!doc": "Phaser.SpriteBatch.getRandom",
				          "!type": "fn(startIndex: +Number, length: +Number) -> +Object"
				        },
				        "forEachExists": {
				          "!doc": "Phaser.SpriteBatch.forEachExists",
				          "!type": "fn(callback: +Function, callbackContext: +Object, args: +Object)"
				        },
				        "getTop": {
				          "!doc": "Phaser.SpriteBatch.getTop",
				          "!type": "fn() -> +Object"
				        },
				        "create": {
				          "!doc": "Phaser.SpriteBatch.create",
				          "!type": "fn(x: +Number, y: +Number, key: +String, frame: +String, exists: +Boolean) -> +PIXI.DisplayObject"
				        },
				        "countDead": {
				          "!doc": "Phaser.SpriteBatch.countDead",
				          "!type": "fn() -> +Number"
				        },
				        "subAll": {
				          "!doc": "Phaser.SpriteBatch.subAll",
				          "!type": "fn(property: +String, amount: +Number, checkAlive: +Boolean, checkVisible: +Boolean)"
				        },
				        "fixedToCamera": {
				          "!doc": "Phaser.SpriteBatch.fixedToCamera",
				          "!type": "+Boolean"
				        },
				        "add": {
				          "!doc": "Phaser.SpriteBatch.add",
				          "!type": "fn(child: +DisplayObject, silent: +Boolean) -> +PIXI.DisplayObject"
				        },
				        "visible": {
				          "!doc": "Phaser.SpriteBatch.visible",
				          "!type": "+Boolean"
				        },
				        "swap": {
				          "!doc": "Phaser.SpriteBatch.swap",
				          "!type": "fn(child1: +Object, child2: +Object)"
				        },
				        "cameraOffset": {
				          "!doc": "Phaser.SpriteBatch.cameraOffset",
				          "!type": "+Phaser.Point"
				        },
				        "sort": {
				          "!doc": "Phaser.SpriteBatch.sort",
				          "!type": "fn(key: +String, order: +Number)"
				        },
				        "moveDown": {
				          "!doc": "Phaser.SpriteBatch.moveDown",
				          "!type": "fn(child: +Object) -> +Object"
				        },
				        "hasProperty": {
				          "!doc": "Phaser.SpriteBatch.hasProperty",
				          "!type": "fn(child: +Object, key: +Array._string_) -> +Boolean"
				        },
				        "updateZ": {
				          "!doc": "Phaser.SpriteBatch.updateZ",
				          "!type": "fn()"
				        },
				        "name": {
				          "!doc": "Phaser.SpriteBatch.name",
				          "!type": "+String"
				        },
				        "ascendingSortHandler": {
				          "!doc": "Phaser.SpriteBatch.ascendingSortHandler",
				          "!type": "fn(a: +Object, b: +Object)"
				        },
				        "position": {
				          "!doc": "Phaser.SpriteBatch.position",
				          "!type": "+Phaser.Point"
				        },
				        "removeBetween": {
				          "!doc": "Phaser.SpriteBatch.removeBetween",
				          "!type": "fn(startIndex: +Number, endIndex: +Number, destroy: +Boolean, silent: +Boolean)"
				        },
				        "removeFromHash": {
				          "!doc": "Phaser.SpriteBatch.removeFromHash",
				          "!type": "fn(child: +DisplayObject) -> +Boolean"
				        },
				        "classType": {
				          "!doc": "Phaser.SpriteBatch.classType",
				          "!type": "+Object"
				        },
				        "next": {
				          "!doc": "Phaser.SpriteBatch.next",
				          "!type": "fn() -> +Object"
				        },
				        "cursor": {
				          "!doc": "Phaser.SpriteBatch.cursor",
				          "!type": "+PIXI.DisplayObject"
				        },
				        "worldRotation": {
				          "!doc": "Phaser.SpriteBatch.worldRotation",
				          "!type": "+Number"
				        },
				        "game": {
				          "!doc": "Phaser.SpriteBatch.game",
				          "!type": "+Phaser.Game"
				        },
				        "renderable": {
				          "!doc": "Phaser.SpriteBatch.renderable",
				          "!type": "+Boolean"
				        },
				        "forEachDead": {
				          "!doc": "Phaser.SpriteBatch.forEachDead",
				          "!type": "fn(callback: +Function, callbackContext: +Object, args: +Object)"
				        },
				        "update": {
				          "!doc": "Phaser.SpriteBatch.update",
				          "!type": "fn()"
				        },
				        "scale": {
				          "!doc": "Phaser.SpriteBatch.scale",
				          "!type": "+Phaser.Point"
				        },
				        "countLiving": {
				          "!doc": "Phaser.SpriteBatch.countLiving",
				          "!type": "fn() -> +Number"
				        },
				        "remove": {
				          "!doc": "Phaser.SpriteBatch.remove",
				          "!type": "fn(child: +Object, destroy: +Boolean, silent: +Boolean) -> +Boolean"
				        },
				        "callAll": {
				          "!doc": "Phaser.SpriteBatch.callAll",
				          "!type": "fn(method: +String, context: +String, args: +Object)"
				        },
				        "total": {
				          "!doc": "Phaser.SpriteBatch.total",
				          "!type": "+Number"
				        },
				        "alpha": {
				          "!doc": "Phaser.SpriteBatch.alpha",
				          "!type": "+Number"
				        },
				        "createMultiple": {
				          "!doc": "Phaser.SpriteBatch.createMultiple",
				          "!type": "fn(quantity: +Number, key: +String, frame: +Number, exists: +Boolean)"
				        },
				        "setAll": {
				          "!doc": "Phaser.SpriteBatch.setAll",
				          "!type": "fn(key: +String, value: +Object, checkAlive: +Boolean, checkVisible: +Boolean, operation: +Number, force: +Boolean)"
				        },
				        "callAllExists": {
				          "!doc": "Phaser.SpriteBatch.callAllExists",
				          "!type": "fn(callback: +String, existsValue: +Boolean, parameter: +Object)"
				        },
				        "checkAll": {
				          "!doc": "Phaser.SpriteBatch.checkAll",
				          "!type": "fn(key: +String, value: +Object, checkAlive: +Boolean, checkVisible: +Boolean, force: +Boolean)"
				        },
				        "previous": {
				          "!doc": "Phaser.SpriteBatch.previous",
				          "!type": "fn() -> +Object"
				        },
				        "forEach": {
				          "!doc": "Phaser.SpriteBatch.forEach",
				          "!type": "fn(callback: +Function, callbackContext: +Object, checkExists: +Boolean, args: +Object)"
				        },
				        "rotation": {
				          "!doc": "Phaser.SpriteBatch.rotation",
				          "!type": "+Number"
				        },
				        "length": {
				          "!doc": "Phaser.SpriteBatch.length",
				          "!type": "+Number"
				        },
				        "sendToBack": {
				          "!doc": "Phaser.SpriteBatch.sendToBack",
				          "!type": "fn(child: +Object) -> +Object"
				        },
				        "getAt": {
				          "!doc": "Phaser.SpriteBatch.getAt",
				          "!type": "fn(index: +Number) -> +PIXI.DisplayObject"
				        },
				        "pendingDestroy": {
				          "!doc": "Phaser.SpriteBatch.pendingDestroy",
				          "!type": "+Boolean"
				        },
				        "getFirstAlive": {
				          "!doc": "Phaser.SpriteBatch.getFirstAlive",
				          "!type": "fn(createIfNull: +Boolean, x: +Number, y: +Number, key: +String, frame: +String) -> +PIXI.DisplayObject"
				        },
				        "hitArea": {
				          "!doc": "Phaser.SpriteBatch.hitArea",
				          "!type": "+Phaser.Rectangle"
				        }
				      }
				    },
				    "DeviceButton": {
				      "!doc": "Phaser.DeviceButton",
				      "!type": "fn(parent: +Phaser.Pointer, buttonCode: +Number)",
				      "prototype": {
				        "parent": {
				          "!doc": "Phaser.DeviceButton.parent",
				          "!type": "+Phaser.Pointer"
				        },
				        "repeats": {
				          "!doc": "Phaser.DeviceButton.repeats",
				          "!type": "+Number"
				        },
				        "game": {
				          "!doc": "Phaser.DeviceButton.game",
				          "!type": "+Phaser.Game"
				        },
				        "timeUp": {
				          "!doc": "Phaser.DeviceButton.timeUp",
				          "!type": "+Number"
				        },
				        "ctrlKey": {
				          "!doc": "Phaser.DeviceButton.ctrlKey",
				          "!type": "+Boolean"
				        },
				        "start": {
				          "!doc": "Phaser.DeviceButton.start",
				          "!type": "fn(event: +Object, value: +Number)"
				        },
				        "buttonCode": {
				          "!doc": "Phaser.DeviceButton.buttonCode",
				          "!type": "+Number"
				        },
				        "onFloat": {
				          "!doc": "Phaser.DeviceButton.onFloat",
				          "!type": "+Phaser.Signal"
				        },
				        "destroy": {
				          "!doc": "Phaser.DeviceButton.destroy",
				          "!type": "fn()"
				        },
				        "timeDown": {
				          "!doc": "Phaser.DeviceButton.timeDown",
				          "!type": "+Number"
				        },
				        "isDown": {
				          "!doc": "Phaser.DeviceButton.isDown",
				          "!type": "+Boolean"
				        },
				        "onUp": {
				          "!doc": "Phaser.DeviceButton.onUp",
				          "!type": "+Phaser.Signal"
				        },
				        "duration": {
				          "!doc": "Phaser.DeviceButton.duration",
				          "!type": "+Number"
				        },
				        "shiftKey": {
				          "!doc": "Phaser.DeviceButton.shiftKey",
				          "!type": "+Boolean"
				        },
				        "stop": {
				          "!doc": "Phaser.DeviceButton.stop",
				          "!type": "fn(event: +Object, value: +Number)"
				        },
				        "isUp": {
				          "!doc": "Phaser.DeviceButton.isUp",
				          "!type": "+Boolean"
				        },
				        "padFloat": {
				          "!doc": "Phaser.DeviceButton.padFloat",
				          "!type": "fn(value: +Number)"
				        },
				        "reset": {
				          "!doc": "Phaser.DeviceButton.reset",
				          "!type": "fn()"
				        },
				        "onDown": {
				          "!doc": "Phaser.DeviceButton.onDown",
				          "!type": "+Phaser.Signal"
				        },
				        "justReleased": {
				          "!doc": "Phaser.DeviceButton.justReleased",
				          "!type": "fn(duration: +Number) -> +Boolean"
				        },
				        "altKey": {
				          "!doc": "Phaser.DeviceButton.altKey",
				          "!type": "+Boolean"
				        },
				        "event": {
				          "!doc": "Phaser.DeviceButton.event",
				          "!type": "+Object"
				        },
				        "value": {
				          "!doc": "Phaser.DeviceButton.value",
				          "!type": "+Number"
				        },
				        "justPressed": {
				          "!doc": "Phaser.DeviceButton.justPressed",
				          "!type": "fn(duration: +Number) -> +Boolean"
				        }
				      }
				    },
				    "LoaderParser": {
				      "!doc": "Phaser.LoaderParser",
				      "jsonBitmapFont": {
				        "!doc": "Phaser.LoaderParser.jsonBitmapFont",
				        "!type": "fn(json: +Object, baseTexture: +PIXI.BaseTexture, xSpacing: +Number, ySpacing: +Number) -> +Object"
				      },
				      "!type": "fn()",
				      "prototype": {},
				      "bitmapFont": {
				        "!doc": "Phaser.LoaderParser.bitmapFont",
				        "!type": "fn(xml: +Object, baseTexture: +PIXI.BaseTexture, xSpacing: +Number, ySpacing: +Number) -> +Object"
				      },
				      "xmlBitmapFont": {
				        "!doc": "Phaser.LoaderParser.xmlBitmapFont",
				        "!type": "fn(xml: +Object, baseTexture: +PIXI.BaseTexture, xSpacing: +Number, ySpacing: +Number) -> +Object"
				      }
				    },
				    "Gamepad": {
				      "!doc": "Phaser.Gamepad",
				      "!type": "fn(game: +Phaser.Game)",
				      "prototype": {
				        "game": {
				          "!doc": "Phaser.Gamepad.game",
				          "!type": "+Phaser.Game"
				        },
				        "update": {
				          "!doc": "Phaser.Gamepad.update",
				          "!type": "fn()"
				        },
				        "onUpCallback": {
				          "!doc": "Phaser.Gamepad.onUpCallback",
				          "!type": "+Function"
				        },
				        "pad1": {
				          "!doc": "Phaser.Gamepad.pad1",
				          "!type": "+Phaser.SinglePad"
				        },
				        "padsConnected": {
				          "!doc": "Phaser.Gamepad.padsConnected",
				          "!type": "+Number"
				        },
				        "pad2": {
				          "!doc": "Phaser.Gamepad.pad2",
				          "!type": "+Phaser.SinglePad"
				        },
				        "isDown": {
				          "!doc": "Phaser.Gamepad.isDown",
				          "!type": "fn(buttonCode: +Number) -> +Boolean"
				        },
				        "enabled": {
				          "!doc": "Phaser.Gamepad.enabled",
				          "!type": "+Boolean"
				        },
				        "setDeadZones": {
				          "!doc": "Phaser.Gamepad.setDeadZones",
				          "!type": "fn()"
				        },
				        "justPressed": {
				          "!doc": "Phaser.Gamepad.justPressed",
				          "!type": "fn(buttonCode: +Number, duration: +Number) -> +Boolean"
				        },
				        "addCallbacks": {
				          "!doc": "Phaser.Gamepad.addCallbacks",
				          "!type": "fn(context: +Object, callbacks: +Object)"
				        },
				        "start": {
				          "!doc": "Phaser.Gamepad.start",
				          "!type": "fn()"
				        },
				        "destroy": {
				          "!doc": "Phaser.Gamepad.destroy",
				          "!type": "fn()"
				        },
				        "onFloatCallback": {
				          "!doc": "Phaser.Gamepad.onFloatCallback",
				          "!type": "+Function"
				        },
				        "active": {
				          "!doc": "Phaser.Gamepad.active",
				          "!type": "+Boolean"
				        },
				        "callbackContext": {
				          "!doc": "Phaser.Gamepad.callbackContext",
				          "!type": "+Object"
				        },
				        "stop": {
				          "!doc": "Phaser.Gamepad.stop",
				          "!type": "fn()"
				        },
				        "onDownCallback": {
				          "!doc": "Phaser.Gamepad.onDownCallback",
				          "!type": "+Function"
				        },
				        "pad3": {
				          "!doc": "Phaser.Gamepad.pad3",
				          "!type": "+Phaser.SinglePad"
				        },
				        "onDisconnectCallback": {
				          "!doc": "Phaser.Gamepad.onDisconnectCallback",
				          "!type": "+Function"
				        },
				        "pad4": {
				          "!doc": "Phaser.Gamepad.pad4",
				          "!type": "+Phaser.SinglePad"
				        },
				        "onConnectCallback": {
				          "!doc": "Phaser.Gamepad.onConnectCallback",
				          "!type": "+Function"
				        },
				        "reset": {
				          "!doc": "Phaser.Gamepad.reset",
				          "!type": "fn()"
				        },
				        "onAxisCallback": {
				          "!doc": "Phaser.Gamepad.onAxisCallback",
				          "!type": "+Function"
				        },
				        "supported": {
				          "!doc": "Phaser.Gamepad.supported",
				          "!type": "+Boolean"
				        }
				      }
				    },
				    "EMITTER": {
				      "!doc": "Phaser.EMITTER",
				      "!type": "+Number"
				    },
				    "BITMAPTEXT": {
				      "!doc": "Phaser.BITMAPTEXT",
				      "!type": "+Number"
				    },
				    "GameObjectFactory": {
				      "!doc": "Phaser.GameObjectFactory",
				      "!type": "fn(game: +Phaser.Game)",
				      "prototype": {
				        "game": {
				          "!doc": "Phaser.GameObjectFactory.game",
				          "!type": "+Phaser.Game"
				        },
				        "renderTexture": {
				          "!doc": "Phaser.GameObjectFactory.renderTexture",
				          "!type": "fn(width: +Number, height: +Number, key: +String, addToCache: +Boolean) -> +Phaser.RenderTexture"
				        },
				        "sound": {
				          "!doc": "Phaser.GameObjectFactory.sound",
				          "!type": "fn(key: +String, volume: +Number, loop: +Boolean, connect: +Boolean) -> +Phaser.Sound"
				        },
				        "rope": {
				          "!doc": "Phaser.GameObjectFactory.rope",
				          "!type": "fn(x: +Number, y: +Number, key: +String, frame: +String, points: +Array, group: +Phaser.Group) -> +Phaser.Rope"
				        },
				        "graphics": {
				          "!doc": "Phaser.GameObjectFactory.graphics",
				          "!type": "fn(x: +Number, y: +Number, group: +Phaser.Group) -> +Phaser.Graphics"
				        },
				        "video": {
				          "!doc": "Phaser.GameObjectFactory.video",
				          "!type": "fn(key: +String, url: +String) -> +Phaser.Video"
				        },
				        "tilemap": {
				          "!doc": "Phaser.GameObjectFactory.tilemap",
				          "!type": "fn(key: +String, tileWidth: +Number, tileHeight: +Number, width: +Number, height: +Number) -> +Phaser.Tilemap"
				        },
				        "button": {
				          "!doc": "Phaser.GameObjectFactory.button",
				          "!type": "fn(x: +Number, y: +Number, key: +String, callback: +Function, callbackContext: +Object, overFrame: +String, outFrame: +String, downFrame: +String, upFrame: +String, group: +Phaser.Group) -> +Phaser.Button"
				        },
				        "world": {
				          "!doc": "Phaser.GameObjectFactory.world",
				          "!type": "+Phaser.World"
				        },
				        "sprite": {
				          "!doc": "Phaser.GameObjectFactory.sprite",
				          "!type": "fn(x: +Number, y: +Number, key: +String, frame: +String, group: +Phaser.Group) -> +Phaser.Sprite"
				        },
				        "spriteBatch": {
				          "!doc": "Phaser.GameObjectFactory.spriteBatch",
				          "!type": "fn(parent: +Phaser.Group, name: +String, addToStage: +Boolean) -> +Phaser.SpriteBatch"
				        },
				        "audio": {
				          "!doc": "Phaser.GameObjectFactory.audio",
				          "!type": "fn(key: +String, volume: +Number, loop: +Boolean, connect: +Boolean) -> +Phaser.Sound"
				        },
				        "text": {
				          "!doc": "Phaser.GameObjectFactory.text",
				          "!type": "fn(x: +Number, y: +Number, text: +String, style: +Object, group: +Phaser.Group) -> +Phaser.Text"
				        },
				        "group": {
				          "!doc": "Phaser.GameObjectFactory.group",
				          "!type": "fn(parent: +Object, name: +String, addToStage: +Boolean, enableBody: +Boolean, physicsBodyType: +Number) -> +Phaser.Group"
				        },
				        "audioSprite": {
				          "!doc": "Phaser.GameObjectFactory.audioSprite",
				          "!type": "fn(key: +String) -> +Phaser.AudioSprite"
				        },
				        "image": {
				          "!doc": "Phaser.GameObjectFactory.image",
				          "!type": "fn(x: +Number, y: +Number, key: +String, frame: +String, group: +Phaser.Group) -> +Phaser.Image"
				        },
				        "retroFont": {
				          "!doc": "Phaser.GameObjectFactory.retroFont",
				          "!type": "fn(font: +String, characterWidth: +Number, characterHeight: +Number, chars: +String, charsPerRow: +Number, xSpacing: +Number, ySpacing: +Number, xOffset: +Number, yOffset: +Number) -> +Phaser.RetroFont"
				        },
				        "bitmapText": {
				          "!doc": "Phaser.GameObjectFactory.bitmapText",
				          "!type": "fn(x: +Number, y: +Number, font: +String, text: +String, size: +Number, group: +Phaser.Group) -> +Phaser.BitmapText"
				        },
				        "physicsGroup": {
				          "!doc": "Phaser.GameObjectFactory.physicsGroup",
				          "!type": "fn(physicsBodyType: +Number, parent: +Object, name: +String, addToStage: +Boolean) -> +Phaser.Group"
				        },
				        "filter": {
				          "!doc": "Phaser.GameObjectFactory.filter",
				          "!type": "fn(filter: +String, _any: +Object) -> +Phaser.Filter"
				        },
				        "existing": {
				          "!doc": "Phaser.GameObjectFactory.existing",
				          "!type": "fn(object: +Object) -> +Object"
				        },
				        "tween": {
				          "!doc": "Phaser.GameObjectFactory.tween",
				          "!type": "fn(object: +Object) -> +Phaser.Tween"
				        },
				        "plugin": {
				          "!doc": "Phaser.GameObjectFactory.plugin",
				          "!type": "fn(plugin: +Object, parameter: +any) -> +Phaser.Plugin"
				        },
				        "bitmapData": {
				          "!doc": "Phaser.GameObjectFactory.bitmapData",
				          "!type": "fn(width: +Number, height: +Number, key: +String, addToCache: +Boolean) -> +Phaser.BitmapData"
				        },
				        "tileSprite": {
				          "!doc": "Phaser.GameObjectFactory.tileSprite",
				          "!type": "fn(x: +Number, y: +Number, width: +Number, height: +Number, key: +String, frame: +String, group: +Phaser.Group) -> +Phaser.TileSprite"
				        },
				        "emitter": {
				          "!doc": "Phaser.GameObjectFactory.emitter",
				          "!type": "fn(x: +Number, y: +Number, maxParticles: +Number) -> +Phaser.Particles.Arcade.Emitter"
				        },
				        "creature": {
				          "!doc": "Phaser.GameObjectFactory.creature",
				          "!type": "fn(x: +Number, y: +Number, key: +String, group: +Phaser.Group) -> +Phaser.Creature"
				        }
				      }
				    },
				    "ROPE": {
				      "!doc": "Phaser.ROPE",
				      "!type": "+Number"
				    },
				    "Create": {
				      "PALETTE_JMP": "+Number",
				      "PALETTE_CGA": "+Number",
				      "PALETTE_ARNE": "+Number",
				      "!doc": "Phaser.Create",
				      "PALETTE_C64": "+Number",
				      "PALETTE_JAPANESE_MACHINE": "+Number",
				      "!type": "fn(game: +Phaser.Game)",
				      "prototype": {
				        "game": {
				          "!doc": "Phaser.Create.game",
				          "!type": "+Phaser.Game"
				        },
				        "canvas": {
				          "!doc": "Phaser.Create.canvas",
				          "!type": "+HTMLCanvasElement"
				        },
				        "texture": {
				          "!doc": "Phaser.Create.texture",
				          "!type": "fn(key: +String, data: +Array, pixelWidth: +Number, pixelHeight: +Number, palette: +Number) -> +PIXI.Texture"
				        },
				        "grid": {
				          "!doc": "Phaser.Create.grid",
				          "!type": "fn(key: +String, width: +Number, height: +Number, cellWidth: +Number, cellHeight: +Number, color: +String) -> +PIXI.Texture"
				        },
				        "bmd": {
				          "!doc": "Phaser.Create.bmd",
				          "!type": "+Phaser.BitmapData"
				        },
				        "context": {
				          "!doc": "Phaser.Create.context",
				          "!type": "+CanvasRenderingContext2D"
				        },
				        "palettes": {
				          "!doc": "Phaser.Create.palettes",
				          "!type": "+Array"
				        }
				      }
				    },
				    "LINE": {
				      "!doc": "Phaser.LINE",
				      "!type": "+Number"
				    },
				    "Component": {
				      "BringToTop": {
				        "!doc": "Phaser.Component.BringToTop",
				        "!type": "fn()",
				        "prototype": {
				          "sendToBack": {
				            "!doc": "Phaser.Component.BringToTop.sendToBack",
				            "!type": "fn() -> +PIXI.DisplayObject"
				          },
				          "moveDown": {
				            "!doc": "Phaser.Component.BringToTop.moveDown",
				            "!type": "fn() -> +PIXI.DisplayObject"
				          },
				          "bringToTop": {
				            "!doc": "Phaser.Component.BringToTop.bringToTop",
				            "!type": "fn() -> +PIXI.DisplayObject"
				          },
				          "moveUp": {
				            "!doc": "Phaser.Component.BringToTop.moveUp",
				            "!type": "fn() -> +PIXI.DisplayObject"
				          }
				        }
				      },
				      "LoadTexture": {
				        "!doc": "Phaser.Component.LoadTexture",
				        "!type": "fn()",
				        "prototype": {
				          "resizeFrame": {
				            "!doc": "Phaser.Component.LoadTexture.resizeFrame",
				            "!type": "fn(parent: +Object, width: +Number, height: +Number)"
				          },
				          "frameName": {
				            "!doc": "Phaser.Component.LoadTexture.frameName",
				            "!type": "+String"
				          },
				          "setFrame": {
				            "!doc": "Phaser.Component.LoadTexture.setFrame",
				            "!type": "fn(frame: +Phaser.Frame)"
				          },
				          "loadTexture": {
				            "!doc": "Phaser.Component.LoadTexture.loadTexture",
				            "!type": "fn(key: +String, frame: +String, stopAnimation: +Boolean)"
				          },
				          "resetFrame": {
				            "!doc": "Phaser.Component.LoadTexture.resetFrame",
				            "!type": "fn()"
				          },
				          "frame": {
				            "!doc": "Phaser.Component.LoadTexture.frame",
				            "!type": "+Number"
				          }
				        }
				      },
				      "Health": {
				        "!doc": "Phaser.Component.Health",
				        "!type": "fn()",
				        "prototype": {
				          "damage": {
				            "!doc": "Phaser.Component.Health.damage",
				            "!type": "fn(amount: +Number) -> +Phaser.Sprite"
				          },
				          "heal": {
				            "!doc": "Phaser.Component.Health.heal",
				            "!type": "fn(amount: +Number) -> +Phaser.Sprite"
				          },
				          "health": {
				            "!doc": "Phaser.Component.Health.health",
				            "!type": "+Number"
				          },
				          "maxHealth": {
				            "!doc": "Phaser.Component.Health.maxHealth",
				            "!type": "+Number"
				          }
				        }
				      },
				      "Bounds": {
				        "!doc": "Phaser.Component.Bounds",
				        "!type": "fn()",
				        "prototype": {
				          "offsetX": {
				            "!doc": "Phaser.Component.Bounds.offsetX",
				            "!type": "+Number"
				          },
				          "offsetY": {
				            "!doc": "Phaser.Component.Bounds.offsetY",
				            "!type": "+Number"
				          },
				          "top": {
				            "!doc": "Phaser.Component.Bounds.top",
				            "!type": "+Number"
				          },
				          "left": {
				            "!doc": "Phaser.Component.Bounds.left",
				            "!type": "+Number"
				          },
				          "bottom": {
				            "!doc": "Phaser.Component.Bounds.bottom",
				            "!type": "+Number"
				          },
				          "right": {
				            "!doc": "Phaser.Component.Bounds.right",
				            "!type": "+Number"
				          }
				        }
				      },
				      "Smoothed": {
				        "!doc": "Phaser.Component.Smoothed",
				        "!type": "fn()",
				        "prototype": {"smoothed": {
				          "!doc": "Phaser.Component.Smoothed.smoothed",
				          "!type": "+Boolean"
				        }}
				      },
				      "LifeSpan": {
				        "!doc": "Phaser.Component.LifeSpan",
				        "!type": "fn()",
				        "prototype": {
				          "alive": {
				            "!doc": "Phaser.Component.LifeSpan.alive",
				            "!type": "+Boolean"
				          },
				          "lifespan": {
				            "!doc": "Phaser.Component.LifeSpan.lifespan",
				            "!type": "+Number"
				          },
				          "revive": {
				            "!doc": "Phaser.Component.LifeSpan.revive",
				            "!type": "fn(health: +Number) -> +PIXI.DisplayObject"
				          },
				          "kill": {
				            "!doc": "Phaser.Component.LifeSpan.kill",
				            "!type": "fn() -> +PIXI.DisplayObject"
				          }
				        },
				        "preUpdate": {
				          "!doc": "Phaser.Component.LifeSpan.preUpdate",
				          "!type": "fn()"
				        }
				      },
				      "InCamera": {
				        "!doc": "Phaser.Component.InCamera",
				        "!type": "fn()",
				        "prototype": {"inCamera": {
				          "!doc": "Phaser.Component.InCamera.inCamera",
				          "!type": "+Boolean"
				        }}
				      },
				      "Overlap": {
				        "!doc": "Phaser.Component.Overlap",
				        "!type": "fn()",
				        "prototype": {"overlap": {
				          "!doc": "Phaser.Component.Overlap.overlap",
				          "!type": "fn(displayObject: +Phaser.Sprite) -> +Boolean"
				        }}
				      },
				      "Crop": {
				        "!doc": "Phaser.Component.Crop",
				        "!type": "fn()",
				        "prototype": {
				          "cropRect": {
				            "!doc": "Phaser.Component.Crop.cropRect",
				            "!type": "+Phaser.Rectangle"
				          },
				          "updateCrop": {
				            "!doc": "Phaser.Component.Crop.updateCrop",
				            "!type": "fn()"
				          },
				          "crop": {
				            "!doc": "Phaser.Component.Crop.crop",
				            "!type": "fn(rect: +Phaser.Rectangle, copy: +Boolean)"
				          }
				        }
				      },
				      "InputEnabled": {
				        "!doc": "Phaser.Component.InputEnabled",
				        "!type": "fn()",
				        "prototype": {
				          "input": {
				            "!doc": "Phaser.Component.InputEnabled.input",
				            "!type": "+Phaser.InputHandler"
				          },
				          "inputEnabled": {
				            "!doc": "Phaser.Component.InputEnabled.inputEnabled",
				            "!type": "+Boolean"
				          }
				        }
				      },
				      "ScaleMinMax": {
				        "!doc": "Phaser.Component.ScaleMinMax",
				        "!type": "fn()",
				        "prototype": {
				          "transformCallbackContext": {
				            "!doc": "Phaser.Component.ScaleMinMax.transformCallbackContext",
				            "!type": "+Object"
				          },
				          "transformCallback": {
				            "!doc": "Phaser.Component.ScaleMinMax.transformCallback",
				            "!type": "+Function"
				          },
				          "setScaleMinMax": {
				            "!doc": "Phaser.Component.ScaleMinMax.setScaleMinMax",
				            "!type": "fn(minX: +Number, minY: +Number, maxX: +Number, maxY: +Number)"
				          },
				          "scaleMax": {
				            "!doc": "Phaser.Component.ScaleMinMax.scaleMax",
				            "!type": "+Phaser.Point"
				          },
				          "scaleMin": {
				            "!doc": "Phaser.Component.ScaleMinMax.scaleMin",
				            "!type": "+Phaser.Point"
				          }
				        }
				      },
				      "Angle": {
				        "!doc": "Phaser.Component.Angle",
				        "!type": "fn()",
				        "prototype": {"angle": {
				          "!doc": "Phaser.Component.Angle.angle",
				          "!type": "+Number"
				        }}
				      },
				      "AutoCull": {
				        "!doc": "Phaser.Component.AutoCull",
				        "!type": "fn()",
				        "prototype": {
				          "autoCull": {
				            "!doc": "Phaser.Component.AutoCull.autoCull",
				            "!type": "+Boolean"
				          },
				          "inCamera": {
				            "!doc": "Phaser.Component.AutoCull.inCamera",
				            "!type": "+Boolean"
				          }
				        }
				      },
				      "Delta": {
				        "!doc": "Phaser.Component.Delta",
				        "!type": "fn()",
				        "prototype": {
				          "deltaZ": {
				            "!doc": "Phaser.Component.Delta.deltaZ",
				            "!type": "+Number"
				          },
				          "deltaX": {
				            "!doc": "Phaser.Component.Delta.deltaX",
				            "!type": "+Number"
				          },
				          "deltaY": {
				            "!doc": "Phaser.Component.Delta.deltaY",
				            "!type": "+Number"
				          }
				        }
				      },
				      "PhysicsBody": {
				        "postUpdate": {
				          "!doc": "Phaser.Component.PhysicsBody.postUpdate",
				          "!type": "fn()"
				        },
				        "!doc": "Phaser.Component.PhysicsBody",
				        "!type": "fn()",
				        "prototype": {
				          "x": {
				            "!doc": "Phaser.Component.PhysicsBody.x",
				            "!type": "+Number"
				          },
				          "y": {
				            "!doc": "Phaser.Component.PhysicsBody.y",
				            "!type": "+Number"
				          },
				          "body": {
				            "!doc": "Phaser.Component.PhysicsBody.body",
				            "!type": "+Phaser.Physics.Arcade.Body"
				          }
				        },
				        "preUpdate": {
				          "!doc": "Phaser.Component.PhysicsBody.preUpdate",
				          "!type": "fn()"
				        }
				      },
				      "Destroy": {
				        "!doc": "Phaser.Component.Destroy",
				        "!type": "fn()",
				        "prototype": {
				          "destroy": {
				            "!doc": "Phaser.Component.Destroy.destroy",
				            "!type": "fn(destroyChildren: +Boolean)"
				          },
				          "destroyPhase": {
				            "!doc": "Phaser.Component.Destroy.destroyPhase",
				            "!type": "+Boolean"
				          }
				        }
				      },
				      "InWorld": {
				        "!doc": "Phaser.Component.InWorld",
				        "!type": "fn()",
				        "prototype": {
				          "outOfBoundsKill": {
				            "!doc": "Phaser.Component.InWorld.outOfBoundsKill",
				            "!type": "+Boolean"
				          },
				          "checkWorldBounds": {
				            "!doc": "Phaser.Component.InWorld.checkWorldBounds",
				            "!type": "+Boolean"
				          },
				          "inWorld": {
				            "!doc": "Phaser.Component.InWorld.inWorld",
				            "!type": "+Boolean"
				          }
				        },
				        "preUpdate": {
				          "!doc": "Phaser.Component.InWorld.preUpdate",
				          "!type": "fn()"
				        }
				      },
				      "Animation": {
				        "!doc": "Phaser.Component.Animation",
				        "!type": "fn()",
				        "prototype": {"play": {
				          "!doc": "Phaser.Component.Animation.play",
				          "!type": "fn(name: +String, frameRate: +Number, loop: +Boolean, killOnComplete: +Boolean) -> +Phaser.Animation"
				        }}
				      },
				      "FixedToCamera": {
				        "postUpdate": {
				          "!doc": "Phaser.Component.FixedToCamera.postUpdate",
				          "!type": "fn()"
				        },
				        "!doc": "Phaser.Component.FixedToCamera",
				        "!type": "fn()",
				        "prototype": {
				          "cameraOffset": {
				            "!doc": "Phaser.Component.FixedToCamera.cameraOffset",
				            "!type": "+Phaser.Point"
				          },
				          "fixedToCamera": {
				            "!doc": "Phaser.Component.FixedToCamera.fixedToCamera",
				            "!type": "+Boolean"
				          }
				        }
				      },
				      "Reset": {
				        "!doc": "Phaser.Component.Reset",
				        "!type": "fn()",
				        "prototype": {"reset": {
				          "!doc": "Phaser.Component.Reset.reset",
				          "!type": "fn(x: +Number, y: +Number, health: +Number) -> +PIXI.DisplayObject"
				        }}
				      },
				      "Core": {
				        "init": {
				          "!doc": "Phaser.Component.Core.init",
				          "!type": "fn()"
				        },
				        "install": {
				          "!doc": "Phaser.Component.Core.install",
				          "!type": "fn()"
				        },
				        "!doc": "Phaser.Component.Core",
				        "!type": "fn()",
				        "prototype": {
				          "previousRotation": {
				            "!doc": "Phaser.Component.Core.previousRotation",
				            "!type": "+Number"
				          },
				          "game": {
				            "!doc": "Phaser.Component.Core.game",
				            "!type": "+Phaser.Game"
				          },
				          "components": {
				            "!doc": "Phaser.Component.Core.components",
				            "!type": "+Object"
				          },
				          "debug": {
				            "!doc": "Phaser.Component.Core.debug",
				            "!type": "+Boolean"
				          },
				          "postUpdate": {
				            "!doc": "Phaser.Component.Core.postUpdate",
				            "!type": "fn()"
				          },
				          "update": {
				            "!doc": "Phaser.Component.Core.update",
				            "!type": "fn()"
				          },
				          "previousPosition": {
				            "!doc": "Phaser.Component.Core.previousPosition",
				            "!type": "+Phaser.Point"
				          },
				          "pendingDestroy": {
				            "!doc": "Phaser.Component.Core.pendingDestroy",
				            "!type": "+Boolean"
				          },
				          "world": {
				            "!doc": "Phaser.Component.Core.world",
				            "!type": "+Phaser.Point"
				          },
				          "animations": {
				            "!doc": "Phaser.Component.Core.animations",
				            "!type": "+Phaser.AnimationManager"
				          },
				          "name": {
				            "!doc": "Phaser.Component.Core.name",
				            "!type": "+String"
				          },
				          "exists": {
				            "!doc": "Phaser.Component.Core.exists",
				            "!type": "+Boolean"
				          },
				          "z": {
				            "!doc": "Phaser.Component.Core.z",
				            "!type": "+Number"
				          },
				          "renderOrderID": {
				            "!doc": "Phaser.Component.Core.renderOrderID",
				            "!type": "+Number"
				          },
				          "fresh": {
				            "!doc": "Phaser.Component.Core.fresh",
				            "!type": "+Boolean"
				          },
				          "events": {
				            "!doc": "Phaser.Component.Core.events",
				            "!type": "+Phaser.Events"
				          },
				          "key": {
				            "!doc": "Phaser.Component.Core.key",
				            "!type": "+String"
				          }
				        }
				      }
				    },
				    "MATRIX": {
				      "!doc": "Phaser.MATRIX",
				      "!type": "+Number"
				    },
				    "TILEMAPLAYER": {
				      "!doc": "Phaser.TILEMAPLAYER",
				      "!type": "+Number"
				    },
				    "Sprite": {
				      "init": {
				        "!doc": "Phaser.Sprite.init",
				        "!type": "fn()"
				      },
				      "install": {
				        "!doc": "Phaser.Sprite.install",
				        "!type": "fn()"
				      },
				      "!doc": "Phaser.Sprite",
				      "!type": "fn(game: +Phaser.Game, x: +Number, y: +Number, key: +String, frame: +String)",
				      "prototype": {
				        "play": {
				          "!doc": "Phaser.Sprite.play",
				          "!type": "fn(name: +String, frameRate: +Number, loop: +Boolean, killOnComplete: +Boolean) -> +Phaser.Animation"
				        },
				        "parent": {
				          "!doc": "Phaser.Sprite.parent",
				          "!type": "+PIXI.DisplayObjectContainer"
				        },
				        "lifespan": {
				          "!doc": "Phaser.Sprite.lifespan",
				          "!type": "+Number"
				        },
				        "outOfBoundsKill": {
				          "!doc": "Phaser.Sprite.outOfBoundsKill",
				          "!type": "+Boolean"
				        },
				        "type": {
				          "!doc": "Phaser.Sprite.type",
				          "!type": "+Number"
				        },
				        "body": {
				          "!doc": "Phaser.Sprite.body",
				          "!type": "+Phaser.Physics.Arcade.Body"
				        },
				        "inCamera": {
				          "!doc": "Phaser.Sprite.inCamera",
				          "!type": "+Boolean"
				        },
				        "offsetX": {
				          "!doc": "Phaser.Sprite.offsetX",
				          "!type": "+Number"
				        },
				        "resizeFrame": {
				          "!doc": "Phaser.Sprite.resizeFrame",
				          "!type": "fn(parent: +Object, width: +Number, height: +Number)"
				        },
				        "tintedTexture": {
				          "!doc": "Phaser.Sprite.tintedTexture",
				          "!type": "+Phaser.Canvas"
				        },
				        "offsetY": {
				          "!doc": "Phaser.Sprite.offsetY",
				          "!type": "+Number"
				        },
				        "children": {
				          "!doc": "Phaser.Sprite.children",
				          "!type": "+Array_DisplayObject_"
				        },
				        "pivot": {
				          "!doc": "Phaser.Sprite.pivot",
				          "!type": "+Phaser.Point"
				        },
				        "maxHealth": {
				          "!doc": "Phaser.Sprite.maxHealth",
				          "!type": "+Number"
				        },
				        "revive": {
				          "!doc": "Phaser.Sprite.revive",
				          "!type": "fn(health: +Number) -> +PIXI.DisplayObject"
				        },
				        "fixedToCamera": {
				          "!doc": "Phaser.Sprite.fixedToCamera",
				          "!type": "+Boolean"
				        },
				        "renderOrderID": {
				          "!doc": "Phaser.Sprite.renderOrderID",
				          "!type": "+Number"
				        },
				        "bringToTop": {
				          "!doc": "Phaser.Sprite.bringToTop",
				          "!type": "fn() -> +PIXI.DisplayObject"
				        },
				        "events": {
				          "!doc": "Phaser.Sprite.events",
				          "!type": "+Phaser.Events"
				        },
				        "moveUp": {
				          "!doc": "Phaser.Sprite.moveUp",
				          "!type": "fn() -> +PIXI.DisplayObject"
				        },
				        "physicsType": {
				          "!doc": "Phaser.Sprite.physicsType",
				          "!type": "+Number"
				        },
				        "previousRotation": {
				          "!doc": "Phaser.Sprite.previousRotation",
				          "!type": "+Number"
				        },
				        "visible": {
				          "!doc": "Phaser.Sprite.visible",
				          "!type": "+Boolean"
				        },
				        "postUpdate": {
				          "!doc": "Phaser.Sprite.postUpdate",
				          "!type": "fn()"
				        },
				        "bottom": {
				          "!doc": "Phaser.Sprite.bottom",
				          "!type": "+Number"
				        },
				        "cameraOffset": {
				          "!doc": "Phaser.Sprite.cameraOffset",
				          "!type": "+Phaser.Point"
				        },
				        "smoothed": {
				          "!doc": "Phaser.Sprite.smoothed",
				          "!type": "+Boolean"
				        },
				        "destroy": {
				          "!doc": "Phaser.Sprite.destroy",
				          "!type": "fn(destroyChildren: +Boolean)"
				        },
				        "moveDown": {
				          "!doc": "Phaser.Sprite.moveDown",
				          "!type": "fn() -> +PIXI.DisplayObject"
				        },
				        "updateCrop": {
				          "!doc": "Phaser.Sprite.updateCrop",
				          "!type": "fn()"
				        },
				        "input": {
				          "!doc": "Phaser.Sprite.input",
				          "!type": "+Phaser.InputHandler"
				        },
				        "worldPosition": {
				          "!doc": "Phaser.Sprite.worldPosition",
				          "!type": "+Phaser.Point"
				        },
				        "overlap": {
				          "!doc": "Phaser.Sprite.overlap",
				          "!type": "fn(displayObject: +Phaser.Sprite) -> +Boolean"
				        },
				        "left": {
				          "!doc": "Phaser.Sprite.left",
				          "!type": "+Number"
				        },
				        "loadTexture": {
				          "!doc": "Phaser.Sprite.loadTexture",
				          "!type": "fn(key: +String, frame: +String, stopAnimation: +Boolean)"
				        },
				        "name": {
				          "!doc": "Phaser.Sprite.name",
				          "!type": "+String"
				        },
				        "reset": {
				          "!doc": "Phaser.Sprite.reset",
				          "!type": "fn(x: +Number, y: +Number, health: +Number) -> +PIXI.DisplayObject"
				        },
				        "position": {
				          "!doc": "Phaser.Sprite.position",
				          "!type": "+Phaser.Point"
				        },
				        "preUpdate": {
				          "!doc": "Phaser.Sprite.preUpdate",
				          "!type": "fn() -> +Boolean"
				        },
				        "crop": {
				          "!doc": "Phaser.Sprite.crop",
				          "!type": "fn(rect: +Phaser.Rectangle, copy: +Boolean)"
				        },
				        "frame": {
				          "!doc": "Phaser.Sprite.frame",
				          "!type": "+Number"
				        },
				        "filterArea": {
				          "!doc": "Phaser.Sprite.filterArea",
				          "!type": "+Phaser.Rectangle"
				        },
				        "worldRotation": {
				          "!doc": "Phaser.Sprite.worldRotation",
				          "!type": "+Number"
				        },
				        "damage": {
				          "!doc": "Phaser.Sprite.damage",
				          "!type": "fn(amount: +Number) -> +Phaser.Sprite"
				        },
				        "shader": {
				          "!doc": "Phaser.Sprite.shader",
				          "!type": "+PIXI.AbstractFilter"
				        },
				        "cropRect": {
				          "!doc": "Phaser.Sprite.cropRect",
				          "!type": "+Phaser.Rectangle"
				        },
				        "components": {
				          "!doc": "Phaser.Sprite.components",
				          "!type": "+Object"
				        },
				        "game": {
				          "!doc": "Phaser.Sprite.game",
				          "!type": "+Phaser.Game"
				        },
				        "renderable": {
				          "!doc": "Phaser.Sprite.renderable",
				          "!type": "+Boolean"
				        },
				        "worldScale": {
				          "!doc": "Phaser.Sprite.worldScale",
				          "!type": "+Phaser.Point"
				        },
				        "alive": {
				          "!doc": "Phaser.Sprite.alive",
				          "!type": "+Boolean"
				        },
				        "deltaZ": {
				          "!doc": "Phaser.Sprite.deltaZ",
				          "!type": "+Number"
				        },
				        "transformCallbackContext": {
				          "!doc": "Phaser.Sprite.transformCallbackContext",
				          "!type": "+Object"
				        },
				        "deltaX": {
				          "!doc": "Phaser.Sprite.deltaX",
				          "!type": "+Number"
				        },
				        "deltaY": {
				          "!doc": "Phaser.Sprite.deltaY",
				          "!type": "+Number"
				        },
				        "update": {
				          "!doc": "Phaser.Sprite.update",
				          "!type": "fn()"
				        },
				        "transformCallback": {
				          "!doc": "Phaser.Sprite.transformCallback",
				          "!type": "+Function"
				        },
				        "scale": {
				          "!doc": "Phaser.Sprite.scale",
				          "!type": "+Phaser.Point"
				        },
				        "inWorld": {
				          "!doc": "Phaser.Sprite.inWorld",
				          "!type": "+Boolean"
				        },
				        "tint": {
				          "!doc": "Phaser.Sprite.tint",
				          "!type": "+Number"
				        },
				        "inputEnabled": {
				          "!doc": "Phaser.Sprite.inputEnabled",
				          "!type": "+Boolean"
				        },
				        "worldAlpha": {
				          "!doc": "Phaser.Sprite.worldAlpha",
				          "!type": "+Number"
				        },
				        "world": {
				          "!doc": "Phaser.Sprite.world",
				          "!type": "+Phaser.Point"
				        },
				        "top": {
				          "!doc": "Phaser.Sprite.top",
				          "!type": "+Number"
				        },
				        "setFrame": {
				          "!doc": "Phaser.Sprite.setFrame",
				          "!type": "fn(frame: +Phaser.Frame)"
				        },
				        "animations": {
				          "!doc": "Phaser.Sprite.animations",
				          "!type": "+Phaser.AnimationManager"
				        },
				        "alpha": {
				          "!doc": "Phaser.Sprite.alpha",
				          "!type": "+Number"
				        },
				        "heal": {
				          "!doc": "Phaser.Sprite.heal",
				          "!type": "fn(amount: +Number) -> +Phaser.Sprite"
				        },
				        "angle": {
				          "!doc": "Phaser.Sprite.angle",
				          "!type": "+Number"
				        },
				        "setScaleMinMax": {
				          "!doc": "Phaser.Sprite.setScaleMinMax",
				          "!type": "fn(minX: +Number, minY: +Number, maxX: +Number, maxY: +Number)"
				        },
				        "checkWorldBounds": {
				          "!doc": "Phaser.Sprite.checkWorldBounds",
				          "!type": "+Boolean"
				        },
				        "key": {
				          "!doc": "Phaser.Sprite.key",
				          "!type": "+String"
				        },
				        "debug": {
				          "!doc": "Phaser.Sprite.debug",
				          "!type": "+Boolean"
				        },
				        "frameName": {
				          "!doc": "Phaser.Sprite.frameName",
				          "!type": "+String"
				        },
				        "texture": {
				          "!doc": "Phaser.Sprite.texture",
				          "!type": "+PIXI.Texture"
				        },
				        "rotation": {
				          "!doc": "Phaser.Sprite.rotation",
				          "!type": "+Number"
				        },
				        "health": {
				          "!doc": "Phaser.Sprite.health",
				          "!type": "+Number"
				        },
				        "sendToBack": {
				          "!doc": "Phaser.Sprite.sendToBack",
				          "!type": "fn() -> +PIXI.DisplayObject"
				        },
				        "destroyPhase": {
				          "!doc": "Phaser.Sprite.destroyPhase",
				          "!type": "+Boolean"
				        },
				        "right": {
				          "!doc": "Phaser.Sprite.right",
				          "!type": "+Number"
				        },
				        "kill": {
				          "!doc": "Phaser.Sprite.kill",
				          "!type": "fn() -> +PIXI.DisplayObject"
				        },
				        "resetFrame": {
				          "!doc": "Phaser.Sprite.resetFrame",
				          "!type": "fn()"
				        },
				        "previousPosition": {
				          "!doc": "Phaser.Sprite.previousPosition",
				          "!type": "+Phaser.Point"
				        },
				        "scaleMax": {
				          "!doc": "Phaser.Sprite.scaleMax",
				          "!type": "+Phaser.Point"
				        },
				        "pendingDestroy": {
				          "!doc": "Phaser.Sprite.pendingDestroy",
				          "!type": "+Boolean"
				        },
				        "stage": {
				          "!doc": "Phaser.Sprite.stage",
				          "!type": "+Phaser.Stage"
				        },
				        "blendMode": {
				          "!doc": "Phaser.Sprite.blendMode",
				          "!type": "+Number"
				        },
				        "hitArea": {
				          "!doc": "Phaser.Sprite.hitArea",
				          "!type": "+Phaser.Rectangle"
				        },
				        "anchor": {
				          "!doc": "Phaser.Sprite.anchor",
				          "!type": "+Phaser.Point"
				        },
				        "autoCull": {
				          "!doc": "Phaser.Sprite.autoCull",
				          "!type": "+Boolean"
				        },
				        "x": {
				          "!doc": "Phaser.Sprite.x",
				          "!type": "+Number"
				        },
				        "exists": {
				          "!doc": "Phaser.Sprite.exists",
				          "!type": "+Boolean"
				        },
				        "y": {
				          "!doc": "Phaser.Sprite.y",
				          "!type": "+Number"
				        },
				        "z": {
				          "!doc": "Phaser.Sprite.z",
				          "!type": "+Number"
				        },
				        "fresh": {
				          "!doc": "Phaser.Sprite.fresh",
				          "!type": "+Boolean"
				        },
				        "scaleMin": {
				          "!doc": "Phaser.Sprite.scaleMin",
				          "!type": "+Phaser.Point"
				        }
				      }
				    },
				    "Keyboard": {
				      "!doc": "Phaser.Keyboard",
				      "!type": "fn(game: +Phaser.Game)",
				      "prototype": {
				        "game": {
				          "!doc": "Phaser.Keyboard.game",
				          "!type": "+Phaser.Game"
				        },
				        "onPressCallback": {
				          "!doc": "Phaser.Keyboard.onPressCallback",
				          "!type": "+Function"
				        },
				        "createCursorKeys": {
				          "!doc": "Phaser.Keyboard.createCursorKeys",
				          "!type": "fn() -> +Object"
				        },
				        "pressEvent": {
				          "!doc": "Phaser.Keyboard.pressEvent",
				          "!type": "+Object"
				        },
				        "update": {
				          "!doc": "Phaser.Keyboard.update",
				          "!type": "fn()"
				        },
				        "onUpCallback": {
				          "!doc": "Phaser.Keyboard.onUpCallback",
				          "!type": "+Function"
				        },
				        "addKey": {
				          "!doc": "Phaser.Keyboard.addKey",
				          "!type": "fn(keycode: +Number) -> +Phaser.Key"
				        },
				        "isDown": {
				          "!doc": "Phaser.Keyboard.isDown",
				          "!type": "fn(keycode: +Number) -> +Boolean"
				        },
				        "enabled": {
				          "!doc": "Phaser.Keyboard.enabled",
				          "!type": "+Boolean"
				        },
				        "upDuration": {
				          "!doc": "Phaser.Keyboard.upDuration",
				          "!type": "fn(keycode: +Phaser.KeyCode, duration: +Number) -> +Boolean"
				        },
				        "addKeyCapture": {
				          "!doc": "Phaser.Keyboard.addKeyCapture",
				          "!type": "fn(keycode: +Number)"
				        },
				        "clearCaptures": {
				          "!doc": "Phaser.Keyboard.clearCaptures",
				          "!type": "fn()"
				        },
				        "removeKey": {
				          "!doc": "Phaser.Keyboard.removeKey",
				          "!type": "fn(keycode: +Number)"
				        },
				        "lastKey": {
				          "!doc": "Phaser.Keyboard.lastKey",
				          "!type": "+Phaser.Key"
				        },
				        "processKeyUp": {
				          "!doc": "Phaser.Keyboard.processKeyUp",
				          "!type": "fn(event: +KeyboardEvent)"
				        },
				        "event": {
				          "!doc": "Phaser.Keyboard.event",
				          "!type": "+Object"
				        },
				        "addCallbacks": {
				          "!doc": "Phaser.Keyboard.addCallbacks",
				          "!type": "fn(context: +Object, onDown: +Function, onUp: +Function, onPress: +Function)"
				        },
				        "start": {
				          "!doc": "Phaser.Keyboard.start",
				          "!type": "fn()"
				        },
				        "destroy": {
				          "!doc": "Phaser.Keyboard.destroy",
				          "!type": "fn()"
				        },
				        "callbackContext": {
				          "!doc": "Phaser.Keyboard.callbackContext",
				          "!type": "+Object"
				        },
				        "processKeyPress": {
				          "!doc": "Phaser.Keyboard.processKeyPress",
				          "!type": "fn(event: +KeyboardEvent)"
				        },
				        "downDuration": {
				          "!doc": "Phaser.Keyboard.downDuration",
				          "!type": "fn(keycode: +Number, duration: +Number) -> +Boolean"
				        },
				        "addKeys": {
				          "!doc": "Phaser.Keyboard.addKeys",
				          "!type": "fn(keys: +Object) -> +Object"
				        },
				        "removeKeyCapture": {
				          "!doc": "Phaser.Keyboard.removeKeyCapture",
				          "!type": "fn(keycode: +Number)"
				        },
				        "stop": {
				          "!doc": "Phaser.Keyboard.stop",
				          "!type": "fn()"
				        },
				        "onDownCallback": {
				          "!doc": "Phaser.Keyboard.onDownCallback",
				          "!type": "+Function"
				        },
				        "lastChar": {
				          "!doc": "Phaser.Keyboard.lastChar",
				          "!type": "+String"
				        },
				        "reset": {
				          "!doc": "Phaser.Keyboard.reset",
				          "!type": "fn(hard: +Boolean)"
				        },
				        "processKeyDown": {
				          "!doc": "Phaser.Keyboard.processKeyDown",
				          "!type": "fn(event: +KeyboardEvent)"
				        }
				      }
				    },
				    "TweenData": {
				      "COMPLETE": "+Number",
				      "RUNNING": "+Number",
				      "!doc": "Phaser.TweenData",
				      "PENDING": "+Number",
				      "!type": "fn(parent: +Phaser.Tween)",
				      "LOOPED": "+Number",
				      "prototype": {
				        "parent": {
				          "!doc": "Phaser.TweenData.parent",
				          "!type": "+Phaser.Tween"
				        },
				        "game": {
				          "!doc": "Phaser.TweenData.game",
				          "!type": "+Phaser.Game"
				        },
				        "easingFunction": {
				          "!doc": "Phaser.TweenData.easingFunction",
				          "!type": "+Function"
				        },
				        "inReverse": {
				          "!doc": "Phaser.TweenData.inReverse",
				          "!type": "+Boolean"
				        },
				        "start": {
				          "!doc": "Phaser.TweenData.start",
				          "!type": "fn() -> +Phaser.TweenData"
				        },
				        "update": {
				          "!doc": "Phaser.TweenData.update",
				          "!type": "fn(time: +Number) -> +Number"
				        },
				        "interpolate": {
				          "!doc": "Phaser.TweenData.interpolate",
				          "!type": "+Boolean"
				        },
				        "interpolationContext": {
				          "!doc": "Phaser.TweenData.interpolationContext",
				          "!type": "+Object"
				        },
				        "percent": {
				          "!doc": "Phaser.TweenData.percent",
				          "!type": "+Number"
				        },
				        "duration": {
				          "!doc": "Phaser.TweenData.duration",
				          "!type": "+Number"
				        },
				        "dt": {
				          "!doc": "Phaser.TweenData.dt",
				          "!type": "+Number"
				        },
				        "interpolationFunction": {
				          "!doc": "Phaser.TweenData.interpolationFunction",
				          "!type": "+Function"
				        },
				        "yoyoDelay": {
				          "!doc": "Phaser.TweenData.yoyoDelay",
				          "!type": "+Number"
				        },
				        "delay": {
				          "!doc": "Phaser.TweenData.delay",
				          "!type": "+Number"
				        },
				        "yoyo": {
				          "!doc": "Phaser.TweenData.yoyo",
				          "!type": "+Boolean"
				        },
				        "isRunning": {
				          "!doc": "Phaser.TweenData.isRunning",
				          "!type": "+Boolean"
				        },
				        "isFrom": {
				          "!doc": "Phaser.TweenData.isFrom",
				          "!type": "+Boolean"
				        },
				        "generateData": {
				          "!doc": "Phaser.TweenData.generateData",
				          "!type": "fn(frameRate: +Number) -> +Array"
				        },
				        "from": {
				          "!doc": "Phaser.TweenData.from",
				          "!type": "fn(properties: +Object, duration: +Number, ease: +Function, delay: +Number, repeat: +Number, yoyo: +Boolean) -> +Phaser.TweenData"
				        },
				        "startTime": {
				          "!doc": "Phaser.TweenData.startTime",
				          "!type": "+Number"
				        },
				        "to": {
				          "!doc": "Phaser.TweenData.to",
				          "!type": "fn(properties: +Object, duration: +Number, ease: +Function, delay: +Number, repeat: +Number, yoyo: +Boolean) -> +Phaser.TweenData"
				        },
				        "repeatCounter": {
				          "!doc": "Phaser.TweenData.repeatCounter",
				          "!type": "+Number"
				        },
				        "repeatDelay": {
				          "!doc": "Phaser.TweenData.repeatDelay",
				          "!type": "+Number"
				        },
				        "value": {
				          "!doc": "Phaser.TweenData.value",
				          "!type": "+Number"
				        }
				      }
				    },
				    "Tile": {
				      "!doc": "Phaser.Tile",
				      "!type": "fn(layer: +Object, index: +Number, x: +Number, y: +Number, width: +Number, height: +Number)",
				      "prototype": {
				        "flipped": {
				          "!doc": "Phaser.Tile.flipped",
				          "!type": "+Boolean"
				        },
				        "intersects": {
				          "!doc": "Phaser.Tile.intersects",
				          "!type": "fn(x: +Number, y: +Number, right: +Number, bottom: +Number)"
				        },
				        "collideUp": {
				          "!doc": "Phaser.Tile.collideUp",
				          "!type": "+Boolean"
				        },
				        "collideLeft": {
				          "!doc": "Phaser.Tile.collideLeft",
				          "!type": "+Boolean"
				        },
				        "layer": {
				          "!doc": "Phaser.Tile.layer",
				          "!type": "+Object"
				        },
				        "faceRight": {
				          "!doc": "Phaser.Tile.faceRight",
				          "!type": "+Boolean"
				        },
				        "faceLeft": {
				          "!doc": "Phaser.Tile.faceLeft",
				          "!type": "+Boolean"
				        },
				        "top": {
				          "!doc": "Phaser.Tile.top",
				          "!type": "+Number"
				        },
				        "scanned": {
				          "!doc": "Phaser.Tile.scanned",
				          "!type": "+Boolean"
				        },
				        "alpha": {
				          "!doc": "Phaser.Tile.alpha",
				          "!type": "+Number"
				        },
				        "collisionCallback": {
				          "!doc": "Phaser.Tile.collisionCallback",
				          "!type": "+Function"
				        },
				        "resetCollision": {
				          "!doc": "Phaser.Tile.resetCollision",
				          "!type": "fn()"
				        },
				        "copy": {
				          "!doc": "Phaser.Tile.copy",
				          "!type": "fn(tile: +Phaser.Tile)"
				        },
				        "faceTop": {
				          "!doc": "Phaser.Tile.faceTop",
				          "!type": "+Boolean"
				        },
				        "setCollisionCallback": {
				          "!doc": "Phaser.Tile.setCollisionCallback",
				          "!type": "fn(callback: +Function, context: +Object)"
				        },
				        "height": {
				          "!doc": "Phaser.Tile.height",
				          "!type": "+Number"
				        },
				        "collides": {
				          "!doc": "Phaser.Tile.collides",
				          "!type": "+Boolean"
				        },
				        "faceBottom": {
				          "!doc": "Phaser.Tile.faceBottom",
				          "!type": "+Boolean"
				        },
				        "bottom": {
				          "!doc": "Phaser.Tile.bottom",
				          "!type": "+Number"
				        },
				        "rotation": {
				          "!doc": "Phaser.Tile.rotation",
				          "!type": "+Number"
				        },
				        "canCollide": {
				          "!doc": "Phaser.Tile.canCollide",
				          "!type": "+Boolean"
				        },
				        "destroy": {
				          "!doc": "Phaser.Tile.destroy",
				          "!type": "fn()"
				        },
				        "index": {
				          "!doc": "Phaser.Tile.index",
				          "!type": "+Number"
				        },
				        "collideDown": {
				          "!doc": "Phaser.Tile.collideDown",
				          "!type": "+Boolean"
				        },
				        "right": {
				          "!doc": "Phaser.Tile.right",
				          "!type": "+Number"
				        },
				        "collisionCallbackContext": {
				          "!doc": "Phaser.Tile.collisionCallbackContext",
				          "!type": "+Object"
				        },
				        "collideRight": {
				          "!doc": "Phaser.Tile.collideRight",
				          "!type": "+Boolean"
				        },
				        "setCollision": {
				          "!doc": "Phaser.Tile.setCollision",
				          "!type": "fn(left: +Boolean, right: +Boolean, up: +Boolean, down: +Boolean)"
				        },
				        "left": {
				          "!doc": "Phaser.Tile.left",
				          "!type": "+Number"
				        },
				        "x": {
				          "!doc": "Phaser.Tile.x",
				          "!type": "+Number"
				        },
				        "width": {
				          "!doc": "Phaser.Tile.width",
				          "!type": "+Number"
				        },
				        "y": {
				          "!doc": "Phaser.Tile.y",
				          "!type": "+Number"
				        },
				        "isInteresting": {
				          "!doc": "Phaser.Tile.isInteresting",
				          "!type": "fn(collides: +Boolean, faces: +Boolean) -> +Boolean"
				        },
				        "containsPoint": {
				          "!doc": "Phaser.Tile.containsPoint",
				          "!type": "fn(x: +Number, y: +Number) -> +Boolean"
				        },
				        "properties": {
				          "!doc": "Phaser.Tile.properties",
				          "!type": "+Object"
				        }
				      }
				    },
				    "SPRITE": {
				      "!doc": "Phaser.SPRITE",
				      "!type": "+Number"
				    },
				    "Point": {
				      "negative": {
				        "!doc": "Phaser.Point.negative",
				        "!type": "fn(a: +Phaser.Point, out: +Phaser.Point) -> +Phaser.Point"
				      },
				      "multiplyAdd": {
				        "!doc": "Phaser.Point.multiplyAdd",
				        "!type": "fn(a: +Phaser.Point, b: +Phaser.Point, s: +Number, out: +Phaser.Point) -> +Phaser.Point"
				      },
				      "projectUnit": {
				        "!doc": "Phaser.Point.projectUnit",
				        "!type": "fn(a: +Phaser.Point, b: +Phaser.Point, out: +Phaser.Point) -> +Phaser.Point"
				      },
				      "centroid": {
				        "!doc": "Phaser.Point.centroid",
				        "!type": "fn(points: +Array._Phaser.Point_, out: +Phaser.Point) -> +Phaser.Point"
				      },
				      "!doc": "Phaser.Point",
				      "project": {
				        "!doc": "Phaser.Point.project",
				        "!type": "fn(a: +Phaser.Point, b: +Phaser.Point, out: +Phaser.Point) -> +Phaser.Point"
				      },
				      "interpolate": {
				        "!doc": "Phaser.Point.interpolate",
				        "!type": "fn(a: +Phaser.Point, b: +Phaser.Point, f: +Number, out: +Phaser.Point) -> +Phaser.Point"
				      },
				      "parse": {
				        "!doc": "Phaser.Point.parse",
				        "!type": "fn(obj: +Object, xProp: +String, yProp: +String) -> +Phaser.Point"
				      },
				      "!type": "fn(x: +Number, y: +Number)",
				      "prototype": {
				        "rotate": {
				          "!doc": "Phaser.Point.rotate",
				          "!type": "fn(x: +Number, y: +Number, angle: +Number, asDegrees: +Boolean, distance: +Number) -> +Phaser.Point"
				        },
				        "distance": {
				          "!doc": "Phaser.Point.distance",
				          "!type": "fn(dest: +Object, round: +Boolean) -> +Number"
				        },
				        "setMagnitude": {
				          "!doc": "Phaser.Point.setMagnitude",
				          "!type": "fn(magnitude: +Number) -> +Phaser.Point"
				        },
				        "perp": {
				          "!doc": "Phaser.Point.perp",
				          "!type": "fn() -> +Phaser.Point"
				        },
				        "dot": {
				          "!doc": "Phaser.Point.dot",
				          "!type": "fn(a: +Phaser.Point) -> +Number"
				        },
				        "getMagnitudeSq": {
				          "!doc": "Phaser.Point.getMagnitudeSq",
				          "!type": "fn() -> +Number"
				        },
				        "type": {
				          "!doc": "Phaser.Point.type",
				          "!type": "+Number"
				        },
				        "copyTo": {
				          "!doc": "Phaser.Point.copyTo",
				          "!type": "fn(dest: +Object) -> +Object"
				        },
				        "normalize": {
				          "!doc": "Phaser.Point.normalize",
				          "!type": "fn() -> +Phaser.Point"
				        },
				        "angle": {
				          "!doc": "Phaser.Point.angle",
				          "!type": "fn(a: +Phaser.Point, asDegrees: +Boolean) -> +Number"
				        },
				        "isZero": {
				          "!doc": "Phaser.Point.isZero",
				          "!type": "fn() -> +Boolean"
				        },
				        "divide": {
				          "!doc": "Phaser.Point.divide",
				          "!type": "fn(x: +Number, y: +Number) -> +Phaser.Point"
				        },
				        "multiply": {
				          "!doc": "Phaser.Point.multiply",
				          "!type": "fn(x: +Number, y: +Number) -> +Phaser.Point"
				        },
				        "floor": {
				          "!doc": "Phaser.Point.floor",
				          "!type": "fn() -> +Phaser.Point"
				        },
				        "clamp": {
				          "!doc": "Phaser.Point.clamp",
				          "!type": "fn(min: +Number, max: +Number) -> +Phaser.Point"
				        },
				        "rperp": {
				          "!doc": "Phaser.Point.rperp",
				          "!type": "fn() -> +Phaser.Point"
				        },
				        "add": {
				          "!doc": "Phaser.Point.add",
				          "!type": "fn(x: +Number, y: +Number) -> +Phaser.Point"
				        },
				        "set": {
				          "!doc": "Phaser.Point.set",
				          "!type": "fn(x: +Number, y: +Number) -> +Phaser.Point"
				        },
				        "invert": {
				          "!doc": "Phaser.Point.invert",
				          "!type": "fn() -> +Phaser.Point"
				        },
				        "subtract": {
				          "!doc": "Phaser.Point.subtract",
				          "!type": "fn(x: +Number, y: +Number) -> +Phaser.Point"
				        },
				        "cross": {
				          "!doc": "Phaser.Point.cross",
				          "!type": "fn(a: +Phaser.Point) -> +Number"
				        },
				        "ceil": {
				          "!doc": "Phaser.Point.ceil",
				          "!type": "fn() -> +Phaser.Point"
				        },
				        "getMagnitude": {
				          "!doc": "Phaser.Point.getMagnitude",
				          "!type": "fn() -> +Number"
				        },
				        "copyFrom": {
				          "!doc": "Phaser.Point.copyFrom",
				          "!type": "fn(source: +Object) -> +Phaser.Point"
				        },
				        "clampY": {
				          "!doc": "Phaser.Point.clampY",
				          "!type": "fn(min: +Number, max: +Number) -> +Phaser.Point"
				        },
				        "clampX": {
				          "!doc": "Phaser.Point.clampX",
				          "!type": "fn(min: +Number, max: +Number) -> +Phaser.Point"
				        },
				        "normalRightHand": {
				          "!doc": "Phaser.Point.normalRightHand",
				          "!type": "fn() -> +Phaser.Point"
				        },
				        "equals": {
				          "!doc": "Phaser.Point.equals",
				          "!type": "fn(a: +Phaser.Point) -> +Boolean"
				        },
				        "clone": {
				          "!doc": "Phaser.Point.clone",
				          "!type": "fn(output: +Phaser.Point) -> +Phaser.Point"
				        },
				        "x": {
				          "!doc": "Phaser.Point.x",
				          "!type": "+Number"
				        },
				        "setTo": {
				          "!doc": "Phaser.Point.setTo",
				          "!type": "fn(x: +Number, y: +Number) -> +Phaser.Point"
				        },
				        "y": {
				          "!doc": "Phaser.Point.y",
				          "!type": "+Number"
				        },
				        "toString": {
				          "!doc": "Phaser.Point.toString",
				          "!type": "fn() -> +String"
				        }
				      }
				    },
				    "WEBGL": {
				      "!doc": "Phaser.WEBGL",
				      "!type": "+Number"
				    },
				    "Mouse": {
				      "LEFT_BUTTON": "+Number",
				      "MIDDLE_BUTTON": "+Number",
				      "RIGHT_BUTTON": "+Number",
				      "FORWARD_BUTTON": "+Number",
				      "!doc": "Phaser.Mouse",
				      "WHEEL_DOWN": "+Number",
				      "BACK_BUTTON": "+Number",
				      "WHEEL_UP": "+Number",
				      "NO_BUTTON": "+Number",
				      "!type": "fn(game: +Phaser.Game)",
				      "prototype": {
				        "game": {
				          "!doc": "Phaser.Mouse.game",
				          "!type": "+Phaser.Game"
				        },
				        "requestPointerLock": {
				          "!doc": "Phaser.Mouse.requestPointerLock",
				          "!type": "fn()"
				        },
				        "mouseOutCallback": {
				          "!doc": "Phaser.Mouse.mouseOutCallback",
				          "!type": "+Function"
				        },
				        "mouseWheelCallback": {
				          "!doc": "Phaser.Mouse.mouseWheelCallback",
				          "!type": "+Function"
				        },
				        "wheelDelta": {
				          "!doc": "Phaser.Mouse.wheelDelta",
				          "!type": "+Number"
				        },
				        "releasePointerLock": {
				          "!doc": "Phaser.Mouse.releasePointerLock",
				          "!type": "fn()"
				        },
				        "onMouseWheel": {
				          "!doc": "Phaser.Mouse.onMouseWheel",
				          "!type": "fn(event: +MouseEvent)"
				        },
				        "mouseOverCallback": {
				          "!doc": "Phaser.Mouse.mouseOverCallback",
				          "!type": "+Function"
				        },
				        "enabled": {
				          "!doc": "Phaser.Mouse.enabled",
				          "!type": "+Boolean"
				        },
				        "onMouseOut": {
				          "!doc": "Phaser.Mouse.onMouseOut",
				          "!type": "fn(event: +MouseEvent)"
				        },
				        "button": {
				          "!doc": "Phaser.Mouse.button",
				          "!type": "+Number"
				        },
				        "pointerLock": {
				          "!doc": "Phaser.Mouse.pointerLock",
				          "!type": "+Phaser.Signal"
				        },
				        "locked": {
				          "!doc": "Phaser.Mouse.locked",
				          "!type": "+Boolean"
				        },
				        "event": {
				          "!doc": "Phaser.Mouse.event",
				          "!type": "+MouseEvent"
				        },
				        "onMouseDown": {
				          "!doc": "Phaser.Mouse.onMouseDown",
				          "!type": "fn(event: +MouseEvent)"
				        },
				        "onMouseOver": {
				          "!doc": "Phaser.Mouse.onMouseOver",
				          "!type": "fn(event: +MouseEvent)"
				        },
				        "mouseDownCallback": {
				          "!doc": "Phaser.Mouse.mouseDownCallback",
				          "!type": "+Function"
				        },
				        "start": {
				          "!doc": "Phaser.Mouse.start",
				          "!type": "fn()"
				        },
				        "capture": {
				          "!doc": "Phaser.Mouse.capture",
				          "!type": "+Boolean"
				        },
				        "onMouseUpGlobal": {
				          "!doc": "Phaser.Mouse.onMouseUpGlobal",
				          "!type": "fn(event: +MouseEvent)"
				        },
				        "callbackContext": {
				          "!doc": "Phaser.Mouse.callbackContext",
				          "!type": "+Object"
				        },
				        "onMouseMove": {
				          "!doc": "Phaser.Mouse.onMouseMove",
				          "!type": "fn(event: +MouseEvent)"
				        },
				        "stopOnGameOut": {
				          "!doc": "Phaser.Mouse.stopOnGameOut",
				          "!type": "+Boolean"
				        },
				        "mouseUpCallback": {
				          "!doc": "Phaser.Mouse.mouseUpCallback",
				          "!type": "+Function"
				        },
				        "input": {
				          "!doc": "Phaser.Mouse.input",
				          "!type": "+Phaser.Input"
				        },
				        "stop": {
				          "!doc": "Phaser.Mouse.stop",
				          "!type": "fn()"
				        },
				        "pointerLockChange": {
				          "!doc": "Phaser.Mouse.pointerLockChange",
				          "!type": "fn(event: +Event)"
				        },
				        "onMouseUp": {
				          "!doc": "Phaser.Mouse.onMouseUp",
				          "!type": "fn(event: +MouseEvent)"
				        }
				      }
				    },
				    "BitmapText": {
				      "init": {
				        "!doc": "Phaser.BitmapText.init",
				        "!type": "fn()"
				      },
				      "install": {
				        "!doc": "Phaser.BitmapText.install",
				        "!type": "fn()"
				      },
				      "!doc": "Phaser.BitmapText",
				      "!type": "fn(game: +Phaser.Game, x: +Number, y: +Number, font: +String, text: +String, size: +Number, align: +String)",
				      "prototype": {
				        "parent": {
				          "!doc": "Phaser.BitmapText.parent",
				          "!type": "+PIXI.DisplayObjectContainer"
				        },
				        "lifespan": {
				          "!doc": "Phaser.BitmapText.lifespan",
				          "!type": "+Number"
				        },
				        "outOfBoundsKill": {
				          "!doc": "Phaser.BitmapText.outOfBoundsKill",
				          "!type": "+Boolean"
				        },
				        "purgeGlyphs": {
				          "!doc": "Phaser.BitmapText.purgeGlyphs",
				          "!type": "fn() -> +Number"
				        },
				        "type": {
				          "!doc": "Phaser.BitmapText.type",
				          "!type": "+Number"
				        },
				        "align": {
				          "!doc": "Phaser.BitmapText.align",
				          "!type": "+String"
				        },
				        "body": {
				          "!doc": "Phaser.BitmapText.body",
				          "!type": "+Phaser.Physics.Arcade.Body"
				        },
				        "inCamera": {
				          "!doc": "Phaser.BitmapText.inCamera",
				          "!type": "+Boolean"
				        },
				        "offsetX": {
				          "!doc": "Phaser.BitmapText.offsetX",
				          "!type": "+Number"
				        },
				        "offsetY": {
				          "!doc": "Phaser.BitmapText.offsetY",
				          "!type": "+Number"
				        },
				        "children": {
				          "!doc": "Phaser.BitmapText.children",
				          "!type": "+Array_DisplayObject_"
				        },
				        "pivot": {
				          "!doc": "Phaser.BitmapText.pivot",
				          "!type": "+Phaser.Point"
				        },
				        "revive": {
				          "!doc": "Phaser.BitmapText.revive",
				          "!type": "fn(health: +Number) -> +PIXI.DisplayObject"
				        },
				        "text": {
				          "!doc": "Phaser.BitmapText.text",
				          "!type": "+String"
				        },
				        "fixedToCamera": {
				          "!doc": "Phaser.BitmapText.fixedToCamera",
				          "!type": "+Boolean"
				        },
				        "renderOrderID": {
				          "!doc": "Phaser.BitmapText.renderOrderID",
				          "!type": "+Number"
				        },
				        "events": {
				          "!doc": "Phaser.BitmapText.events",
				          "!type": "+Phaser.Events"
				        },
				        "physicsType": {
				          "!doc": "Phaser.BitmapText.physicsType",
				          "!type": "+Number"
				        },
				        "maxWidth": {
				          "!doc": "Phaser.BitmapText.maxWidth",
				          "!type": "+Number"
				        },
				        "previousRotation": {
				          "!doc": "Phaser.BitmapText.previousRotation",
				          "!type": "+Number"
				        },
				        "visible": {
				          "!doc": "Phaser.BitmapText.visible",
				          "!type": "+Boolean"
				        },
				        "postUpdate": {
				          "!doc": "Phaser.BitmapText.postUpdate",
				          "!type": "fn()"
				        },
				        "bottom": {
				          "!doc": "Phaser.BitmapText.bottom",
				          "!type": "+Number"
				        },
				        "cameraOffset": {
				          "!doc": "Phaser.BitmapText.cameraOffset",
				          "!type": "+Phaser.Point"
				        },
				        "smoothed": {
				          "!doc": "Phaser.BitmapText.smoothed",
				          "!type": "+Boolean"
				        },
				        "destroy": {
				          "!doc": "Phaser.BitmapText.destroy",
				          "!type": "fn(destroyChildren: +Boolean)"
				        },
				        "textWidth": {
				          "!doc": "Phaser.BitmapText.textWidth",
				          "!type": "+Number"
				        },
				        "input": {
				          "!doc": "Phaser.BitmapText.input",
				          "!type": "+Phaser.InputHandler"
				        },
				        "worldPosition": {
				          "!doc": "Phaser.BitmapText.worldPosition",
				          "!type": "+Phaser.Point"
				        },
				        "left": {
				          "!doc": "Phaser.BitmapText.left",
				          "!type": "+Number"
				        },
				        "name": {
				          "!doc": "Phaser.BitmapText.name",
				          "!type": "+String"
				        },
				        "reset": {
				          "!doc": "Phaser.BitmapText.reset",
				          "!type": "fn(x: +Number, y: +Number, health: +Number) -> +PIXI.DisplayObject"
				        },
				        "fontSize": {
				          "!doc": "Phaser.BitmapText.fontSize",
				          "!type": "+Number"
				        },
				        "position": {
				          "!doc": "Phaser.BitmapText.position",
				          "!type": "+Phaser.Point"
				        },
				        "preUpdate": {
				          "!doc": "Phaser.BitmapText.preUpdate",
				          "!type": "fn() -> +Boolean"
				        },
				        "worldRotation": {
				          "!doc": "Phaser.BitmapText.worldRotation",
				          "!type": "+Number"
				        },
				        "filterArea": {
				          "!doc": "Phaser.BitmapText.filterArea",
				          "!type": "+Phaser.Rectangle"
				        },
				        "game": {
				          "!doc": "Phaser.BitmapText.game",
				          "!type": "+Phaser.Game"
				        },
				        "components": {
				          "!doc": "Phaser.BitmapText.components",
				          "!type": "+Object"
				        },
				        "renderable": {
				          "!doc": "Phaser.BitmapText.renderable",
				          "!type": "+Boolean"
				        },
				        "worldScale": {
				          "!doc": "Phaser.BitmapText.worldScale",
				          "!type": "+Phaser.Point"
				        },
				        "alive": {
				          "!doc": "Phaser.BitmapText.alive",
				          "!type": "+Boolean"
				        },
				        "update": {
				          "!doc": "Phaser.BitmapText.update",
				          "!type": "fn()"
				        },
				        "scale": {
				          "!doc": "Phaser.BitmapText.scale",
				          "!type": "+Phaser.Point"
				        },
				        "inWorld": {
				          "!doc": "Phaser.BitmapText.inWorld",
				          "!type": "+Boolean"
				        },
				        "tint": {
				          "!doc": "Phaser.BitmapText.tint",
				          "!type": "+Number"
				        },
				        "inputEnabled": {
				          "!doc": "Phaser.BitmapText.inputEnabled",
				          "!type": "+Boolean"
				        },
				        "worldAlpha": {
				          "!doc": "Phaser.BitmapText.worldAlpha",
				          "!type": "+Number"
				        },
				        "world": {
				          "!doc": "Phaser.BitmapText.world",
				          "!type": "+Phaser.Point"
				        },
				        "top": {
				          "!doc": "Phaser.BitmapText.top",
				          "!type": "+Number"
				        },
				        "animations": {
				          "!doc": "Phaser.BitmapText.animations",
				          "!type": "+Phaser.AnimationManager"
				        },
				        "alpha": {
				          "!doc": "Phaser.BitmapText.alpha",
				          "!type": "+Number"
				        },
				        "angle": {
				          "!doc": "Phaser.BitmapText.angle",
				          "!type": "+Number"
				        },
				        "checkWorldBounds": {
				          "!doc": "Phaser.BitmapText.checkWorldBounds",
				          "!type": "+Boolean"
				        },
				        "key": {
				          "!doc": "Phaser.BitmapText.key",
				          "!type": "+String"
				        },
				        "dirty": {
				          "!doc": "Phaser.BitmapText.dirty",
				          "!type": "+Boolean"
				        },
				        "debug": {
				          "!doc": "Phaser.BitmapText.debug",
				          "!type": "+Boolean"
				        },
				        "rotation": {
				          "!doc": "Phaser.BitmapText.rotation",
				          "!type": "+Number"
				        },
				        "destroyPhase": {
				          "!doc": "Phaser.BitmapText.destroyPhase",
				          "!type": "+Boolean"
				        },
				        "right": {
				          "!doc": "Phaser.BitmapText.right",
				          "!type": "+Number"
				        },
				        "kill": {
				          "!doc": "Phaser.BitmapText.kill",
				          "!type": "fn() -> +PIXI.DisplayObject"
				        },
				        "previousPosition": {
				          "!doc": "Phaser.BitmapText.previousPosition",
				          "!type": "+Phaser.Point"
				        },
				        "textHeight": {
				          "!doc": "Phaser.BitmapText.textHeight",
				          "!type": "+Number"
				        },
				        "pendingDestroy": {
				          "!doc": "Phaser.BitmapText.pendingDestroy",
				          "!type": "+Boolean"
				        },
				        "stage": {
				          "!doc": "Phaser.BitmapText.stage",
				          "!type": "+Phaser.Stage"
				        },
				        "hitArea": {
				          "!doc": "Phaser.BitmapText.hitArea",
				          "!type": "+Phaser.Rectangle"
				        },
				        "anchor": {
				          "!doc": "Phaser.BitmapText.anchor",
				          "!type": "+Phaser.Point"
				        },
				        "autoCull": {
				          "!doc": "Phaser.BitmapText.autoCull",
				          "!type": "+Boolean"
				        },
				        "x": {
				          "!doc": "Phaser.BitmapText.x",
				          "!type": "+Number"
				        },
				        "exists": {
				          "!doc": "Phaser.BitmapText.exists",
				          "!type": "+Boolean"
				        },
				        "y": {
				          "!doc": "Phaser.BitmapText.y",
				          "!type": "+Number"
				        },
				        "z": {
				          "!doc": "Phaser.BitmapText.z",
				          "!type": "+Number"
				        },
				        "fresh": {
				          "!doc": "Phaser.BitmapText.fresh",
				          "!type": "+Boolean"
				        },
				        "setText": {
				          "!doc": "Phaser.BitmapText.setText",
				          "!type": "fn(text: +String)"
				        },
				        "font": {
				          "!doc": "Phaser.BitmapText.font",
				          "!type": "+String"
				        }
				      }
				    },
				    "Timer": {
				      "HALF": "+Number",
				      "QUARTER": "+Number",
				      "!doc": "Phaser.Timer",
				      "MINUTE": "+Number",
				      "SECOND": "+Number",
				      "!type": "fn(game: +Phaser.Game, autoDestroy: +Boolean)",
				      "prototype": {
				        "next": {
				          "!doc": "Phaser.Timer.next",
				          "!type": "+Number"
				        },
				        "game": {
				          "!doc": "Phaser.Timer.game",
				          "!type": "+Phaser.Game"
				        },
				        "paused": {
				          "!doc": "Phaser.Timer.paused",
				          "!type": "+Boolean"
				        },
				        "update": {
				          "!doc": "Phaser.Timer.update",
				          "!type": "fn(time: +Number) -> +Boolean"
				        },
				        "remove": {
				          "!doc": "Phaser.Timer.remove",
				          "!type": "fn(event: +Phaser.TimerEvent)"
				        },
				        "running": {
				          "!doc": "Phaser.Timer.running",
				          "!type": "+Boolean"
				        },
				        "elapsed": {
				          "!doc": "Phaser.Timer.elapsed",
				          "!type": "+Number"
				        },
				        "duration": {
				          "!doc": "Phaser.Timer.duration",
				          "!type": "+Number"
				        },
				        "removeAll": {
				          "!doc": "Phaser.Timer.removeAll",
				          "!type": "fn()"
				        },
				        "seconds": {
				          "!doc": "Phaser.Timer.seconds",
				          "!type": "+Number"
				        },
				        "expired": {
				          "!doc": "Phaser.Timer.expired",
				          "!type": "+Boolean"
				        },
				        "loop": {
				          "!doc": "Phaser.Timer.loop",
				          "!type": "fn(delay: +Number, callback: +Function, callbackContext: +Object, arguments: +any) -> +Phaser.TimerEvent"
				        },
				        "nextTick": {
				          "!doc": "Phaser.Timer.nextTick",
				          "!type": "+Number"
				        },
				        "repeat": {
				          "!doc": "Phaser.Timer.repeat",
				          "!type": "fn(delay: +Number, repeatCount: +Number, callback: +Function, callbackContext: +Object, arguments: +any) -> +Phaser.TimerEvent"
				        },
				        "events": {
				          "!doc": "Phaser.Timer.events",
				          "!type": "+Array._Phaser.TimerEvent_"
				        },
				        "order": {
				          "!doc": "Phaser.Timer.order",
				          "!type": "fn()"
				        },
				        "add": {
				          "!doc": "Phaser.Timer.add",
				          "!type": "fn(delay: +Number, callback: +Function, callbackContext: +Object, arguments: +any) -> +Phaser.TimerEvent"
				        },
				        "resume": {
				          "!doc": "Phaser.Timer.resume",
				          "!type": "fn()"
				        },
				        "autoDestroy": {
				          "!doc": "Phaser.Timer.autoDestroy",
				          "!type": "+Boolean"
				        },
				        "clearPendingEvents": {
				          "!doc": "Phaser.Timer.clearPendingEvents",
				          "!type": "fn()"
				        },
				        "ms": {
				          "!doc": "Phaser.Timer.ms",
				          "!type": "+Number"
				        },
				        "onComplete": {
				          "!doc": "Phaser.Timer.onComplete",
				          "!type": "+Phaser.Signal"
				        },
				        "start": {
				          "!doc": "Phaser.Timer.start",
				          "!type": "fn(delay: +Number)"
				        },
				        "length": {
				          "!doc": "Phaser.Timer.length",
				          "!type": "+Number"
				        },
				        "destroy": {
				          "!doc": "Phaser.Timer.destroy",
				          "!type": "fn()"
				        },
				        "timeCap": {
				          "!doc": "Phaser.Timer.timeCap",
				          "!type": "+Number"
				        },
				        "pause": {
				          "!doc": "Phaser.Timer.pause",
				          "!type": "fn()"
				        },
				        "adjustEvents": {
				          "!doc": "Phaser.Timer.adjustEvents",
				          "!type": "fn()"
				        },
				        "stop": {
				          "!doc": "Phaser.Timer.stop",
				          "!type": "fn(clearEvents: +Boolean)"
				        }
				      }
				    },
				    "Filter": {
				      "!doc": "Phaser.Filter",
				      "!type": "fn(game: +Phaser.Game, uniforms: +Object, fragmentSrc: +Array)",
				      "prototype": {
				        "dirty": {
				          "!doc": "Phaser.Filter.dirty",
				          "!type": "+Boolean"
				        },
				        "init": {
				          "!doc": "Phaser.Filter.init",
				          "!type": "fn()"
				        },
				        "padding": {
				          "!doc": "Phaser.Filter.padding",
				          "!type": "+Number"
				        },
				        "game": {
				          "!doc": "Phaser.Filter.game",
				          "!type": "+Phaser.Game"
				        },
				        "setResolution": {
				          "!doc": "Phaser.Filter.setResolution",
				          "!type": "fn(width: +Number, height: +Number)"
				        },
				        "update": {
				          "!doc": "Phaser.Filter.update",
				          "!type": "fn(pointer: +Phaser.Pointer)"
				        },
				        "destroy": {
				          "!doc": "Phaser.Filter.destroy",
				          "!type": "fn()"
				        },
				        "uniforms": {
				          "!doc": "Phaser.Filter.uniforms",
				          "!type": "+Object"
				        },
				        "fragmentSrc": {
				          "!doc": "Phaser.Filter.fragmentSrc",
				          "!type": "+Array"
				        },
				        "type": {
				          "!doc": "Phaser.Filter.type",
				          "!type": "+Number"
				        },
				        "addToWorld": {
				          "!doc": "Phaser.Filter.addToWorld",
				          "!type": "fn(x: +Number, y: +Number, width: +Number, height: +Number, anchorX: +Number, anchorY: +Number) -> +Phaser.Image"
				        },
				        "width": {
				          "!doc": "Phaser.Filter.width",
				          "!type": "+Number"
				        },
				        "prevPoint": {
				          "!doc": "Phaser.Filter.prevPoint",
				          "!type": "+Phaser.Point"
				        },
				        "height": {
				          "!doc": "Phaser.Filter.height",
				          "!type": "+Number"
				        }
				      }
				    },
				    "POINTER": {
				      "!doc": "Phaser.POINTER",
				      "!type": "+Number"
				    },
				    "ArrayUtils": {
				      "rotate": {
				        "!doc": "Phaser.ArrayUtils.rotate",
				        "!type": "fn(array: +Array._any_) -> +Object"
				      },
				      "rotateMatrix": {
				        "!doc": "Phaser.ArrayUtils.rotateMatrix",
				        "!type": "fn(matrix: +Array._Array._any__, direction: +Number) -> +Array._Array._any__"
				      },
				      "!doc": "Phaser.ArrayUtils",
				      "removeRandomItem": {
				        "!doc": "Phaser.ArrayUtils.removeRandomItem",
				        "!type": "fn(objects: +Array._any_, startIndex: +Number, length: +Number) -> +Object"
				      },
				      "transposeMatrix": {
				        "!doc": "Phaser.ArrayUtils.transposeMatrix",
				        "!type": "fn(array: +Array._Array._any__) -> +Array._Array._any__"
				      },
				      "findClosest": {
				        "!doc": "Phaser.ArrayUtils.findClosest",
				        "!type": "fn(value: +Number, arr: +Array._number_) -> +Number"
				      },
				      "!type": "fn()",
				      "getRandomItem": {
				        "!doc": "Phaser.ArrayUtils.getRandomItem",
				        "!type": "fn(objects: +Array._any_, startIndex: +Number, length: +Number) -> +Object"
				      },
				      "shuffle": {
				        "!doc": "Phaser.ArrayUtils.shuffle",
				        "!type": "fn(array: +Array._any_) -> +Array._any_"
				      },
				      "prototype": {
				        "numberArray": {
				          "!doc": "Phaser.ArrayUtils.numberArray",
				          "!type": "fn(start: +Number, end: +Number) -> +Array._number_"
				        },
				        "numberArrayStep": {
				          "!doc": "Phaser.ArrayUtils.numberArrayStep",
				          "!type": "fn(start: +Number, end: +Number, step: +Number) -> +Array"
				        }
				      }
				    },
				    "POINT": {
				      "!doc": "Phaser.POINT",
				      "!type": "+Number"
				    },
				    "Plugin": {
				      "!doc": "Phaser.Plugin",
				      "!type": "fn(game: +Phaser.Game, parent: +Object)",
				      "prototype": {
				        "hasPostRender": {
				          "!doc": "Phaser.Plugin.hasPostRender",
				          "!type": "+Boolean"
				        },
				        "postRender": {
				          "!doc": "Phaser.Plugin.postRender",
				          "!type": "fn()"
				        },
				        "parent": {
				          "!doc": "Phaser.Plugin.parent",
				          "!type": "+Object"
				        },
				        "hasPreUpdate": {
				          "!doc": "Phaser.Plugin.hasPreUpdate",
				          "!type": "+Boolean"
				        },
				        "game": {
				          "!doc": "Phaser.Plugin.game",
				          "!type": "+Phaser.Game"
				        },
				        "visible": {
				          "!doc": "Phaser.Plugin.visible",
				          "!type": "+Boolean"
				        },
				        "hasPostUpdate": {
				          "!doc": "Phaser.Plugin.hasPostUpdate",
				          "!type": "+Boolean"
				        },
				        "update": {
				          "!doc": "Phaser.Plugin.update",
				          "!type": "fn()"
				        },
				        "destroy": {
				          "!doc": "Phaser.Plugin.destroy",
				          "!type": "fn()"
				        },
				        "active": {
				          "!doc": "Phaser.Plugin.active",
				          "!type": "+Boolean"
				        },
				        "hasRender": {
				          "!doc": "Phaser.Plugin.hasRender",
				          "!type": "+Boolean"
				        },
				        "hasUpdate": {
				          "!doc": "Phaser.Plugin.hasUpdate",
				          "!type": "+Boolean"
				        },
				        "preUpdate": {
				          "!doc": "Phaser.Plugin.preUpdate",
				          "!type": "fn()"
				        },
				        "render": {
				          "!doc": "Phaser.Plugin.render",
				          "!type": "fn()"
				        }
				      }
				    }
				  },
				  "CanvasGraphics": {
				    "!doc": "CanvasGraphics",
				    "!type": "fn()",
				    "prototype": {}
				  },
				  "PIXI": {
				    "AbstractFilter": {
				      "!doc": "PIXI.AbstractFilter",
				      "!type": "fn(fragmentSrc: +Array, uniforms: +Object)",
				      "prototype": {
				        "dirty": {
				          "!doc": "PIXI.AbstractFilter.dirty",
				          "!type": "+Boolean"
				        },
				        "padding": {
				          "!doc": "PIXI.AbstractFilter.padding",
				          "!type": "+Number"
				        }
				      }
				    },
				    "CanvasRenderer": {
				      "!doc": "PIXI.CanvasRenderer",
				      "!type": "fn(game: +Phaser.Game)",
				      "prototype": {}
				    },
				    "PixiShader": {
				      "!doc": "PIXI.PixiShader",
				      "!type": "fn(gl: +WebGLContext)",
				      "prototype": {}
				    },
				    "ComplexPrimitiveShader": {
				      "!doc": "PIXI.ComplexPrimitiveShader",
				      "!type": "fn(gl: +WebGLContext)",
				      "prototype": {}
				    },
				    "WebGLShaderManager": {
				      "!doc": "PIXI.WebGLShaderManager",
				      "!type": "fn()",
				      "prototype": {}
				    },
				    "WebGLRenderer": {
				      "!doc": "PIXI.WebGLRenderer",
				      "!type": "fn(game: +Phaser.Game)",
				      "prototype": {}
				    },
				    "PrimitiveShader": {
				      "!doc": "PIXI.PrimitiveShader",
				      "!type": "fn(gl: +WebGLContext)",
				      "prototype": {}
				    },
				    "FilterTexture": {
				      "!doc": "PIXI.FilterTexture",
				      "!type": "fn(gl: +WebGLContext, width: +Number, height: +Number, scaleMode: +Number)",
				      "prototype": {}
				    },
				    "Texture": {
				      "!doc": "PIXI.Texture",
				      "!type": "fn(baseTexture: +BaseTexture, frame: +Rectangle, crop: +Rectangle, trim: +Rectangle)",
				      "prototype": {}
				    },
				    "SpriteBatch": {
				      "!doc": "PIXI.SpriteBatch",
				      "!type": "fn(texture: +Texture)",
				      "prototype": {}
				    },
				    "WebGLMaskManager": {
				      "!doc": "PIXI.WebGLMaskManager",
				      "!type": "fn()",
				      "prototype": {}
				    },
				    "WebGLFastSpriteBatch": {
				      "!doc": "PIXI.WebGLFastSpriteBatch",
				      "!type": "fn()",
				      "prototype": {}
				    },
				    "GraphicsData": {
				      "!doc": "PIXI.GraphicsData",
				      "!type": "fn(lineWidth: +Number, lineColor: +Number, lineAlpha: +Number, fillColor: +Number, fillAlpha: +Number, fill: +Boolean, shape: +Circle)",
				      "prototype": {}
				    },
				    "WebGLFilterManager": {
				      "!doc": "PIXI.WebGLFilterManager",
				      "!type": "fn()",
				      "prototype": {}
				    },
				    "CanvasMaskManager": {
				      "!doc": "PIXI.CanvasMaskManager",
				      "!type": "fn()",
				      "prototype": {}
				    },
				    "Sprite": {
				      "!doc": "PIXI.Sprite",
				      "!type": "fn(texture: +Texture)",
				      "prototype": {
				        "worldRotation": {
				          "!doc": "PIXI.Sprite.worldRotation",
				          "!type": "+Number"
				        },
				        "filterArea": {
				          "!doc": "PIXI.Sprite.filterArea",
				          "!type": "+Phaser.Rectangle"
				        },
				        "shader": {
				          "!doc": "PIXI.Sprite.shader",
				          "!type": "+PIXI.AbstractFilter"
				        },
				        "parent": {
				          "!doc": "PIXI.Sprite.parent",
				          "!type": "+PIXI.DisplayObjectContainer"
				        },
				        "renderable": {
				          "!doc": "PIXI.Sprite.renderable",
				          "!type": "+Boolean"
				        },
				        "visible": {
				          "!doc": "PIXI.Sprite.visible",
				          "!type": "+Boolean"
				        },
				        "worldScale": {
				          "!doc": "PIXI.Sprite.worldScale",
				          "!type": "+Phaser.Point"
				        },
				        "texture": {
				          "!doc": "PIXI.Sprite.texture",
				          "!type": "+PIXI.Texture"
				        },
				        "rotation": {
				          "!doc": "PIXI.Sprite.rotation",
				          "!type": "+Number"
				        },
				        "scale": {
				          "!doc": "PIXI.Sprite.scale",
				          "!type": "+Phaser.Point"
				        },
				        "tint": {
				          "!doc": "PIXI.Sprite.tint",
				          "!type": "+Number"
				        },
				        "worldAlpha": {
				          "!doc": "PIXI.Sprite.worldAlpha",
				          "!type": "+Number"
				        },
				        "worldPosition": {
				          "!doc": "PIXI.Sprite.worldPosition",
				          "!type": "+Phaser.Point"
				        },
				        "tintedTexture": {
				          "!doc": "PIXI.Sprite.tintedTexture",
				          "!type": "+Phaser.Canvas"
				        },
				        "stage": {
				          "!doc": "PIXI.Sprite.stage",
				          "!type": "+Phaser.Stage"
				        },
				        "blendMode": {
				          "!doc": "PIXI.Sprite.blendMode",
				          "!type": "+Number"
				        },
				        "children": {
				          "!doc": "PIXI.Sprite.children",
				          "!type": "+Array_DisplayObject_"
				        },
				        "hitArea": {
				          "!doc": "PIXI.Sprite.hitArea",
				          "!type": "+Phaser.Rectangle"
				        },
				        "anchor": {
				          "!doc": "PIXI.Sprite.anchor",
				          "!type": "+Phaser.Point"
				        },
				        "alpha": {
				          "!doc": "PIXI.Sprite.alpha",
				          "!type": "+Number"
				        },
				        "pivot": {
				          "!doc": "PIXI.Sprite.pivot",
				          "!type": "+Phaser.Point"
				        },
				        "position": {
				          "!doc": "PIXI.Sprite.position",
				          "!type": "+Phaser.Point"
				        }
				      }
				    },
				    "WebGLStencilManager": {
				      "!doc": "PIXI.WebGLStencilManager",
				      "!type": "fn()",
				      "prototype": {}
				    },
				    "CanvasBuffer": {
				      "!doc": "PIXI.CanvasBuffer",
				      "!type": "fn(width: +Number, height: +Number)",
				      "prototype": {}
				    },
				    "WebGLSpriteBatch": {
				      "!doc": "PIXI.WebGLSpriteBatch",
				      "!type": "fn()",
				      "prototype": {}
				    },
				    "PixiFastShader": {
				      "!doc": "PIXI.PixiFastShader",
				      "!type": "fn(gl: +WebGLContext)",
				      "prototype": {}
				    },
				    "Graphics": {
				      "!doc": "PIXI.Graphics",
				      "!type": "fn()",
				      "prototype": {
				        "worldRotation": {
				          "!doc": "PIXI.Graphics.worldRotation",
				          "!type": "+Number"
				        },
				        "filterArea": {
				          "!doc": "PIXI.Graphics.filterArea",
				          "!type": "+Phaser.Rectangle"
				        },
				        "parent": {
				          "!doc": "PIXI.Graphics.parent",
				          "!type": "+PIXI.DisplayObjectContainer"
				        },
				        "renderable": {
				          "!doc": "PIXI.Graphics.renderable",
				          "!type": "+Boolean"
				        },
				        "visible": {
				          "!doc": "PIXI.Graphics.visible",
				          "!type": "+Boolean"
				        },
				        "worldScale": {
				          "!doc": "PIXI.Graphics.worldScale",
				          "!type": "+Phaser.Point"
				        },
				        "rotation": {
				          "!doc": "PIXI.Graphics.rotation",
				          "!type": "+Number"
				        },
				        "scale": {
				          "!doc": "PIXI.Graphics.scale",
				          "!type": "+Phaser.Point"
				        },
				        "worldAlpha": {
				          "!doc": "PIXI.Graphics.worldAlpha",
				          "!type": "+Number"
				        },
				        "worldPosition": {
				          "!doc": "PIXI.Graphics.worldPosition",
				          "!type": "+Phaser.Point"
				        },
				        "stage": {
				          "!doc": "PIXI.Graphics.stage",
				          "!type": "+Phaser.Stage"
				        },
				        "children": {
				          "!doc": "PIXI.Graphics.children",
				          "!type": "+Array_DisplayObject_"
				        },
				        "hitArea": {
				          "!doc": "PIXI.Graphics.hitArea",
				          "!type": "+Phaser.Rectangle"
				        },
				        "alpha": {
				          "!doc": "PIXI.Graphics.alpha",
				          "!type": "+Number"
				        },
				        "pivot": {
				          "!doc": "PIXI.Graphics.pivot",
				          "!type": "+Phaser.Point"
				        },
				        "position": {
				          "!doc": "PIXI.Graphics.position",
				          "!type": "+Phaser.Point"
				        }
				      }
				    },
				    "Strip": {
				      "!doc": "PIXI.Strip",
				      "!type": "fn(texture: +Texture, width: +Number, height: +Number)",
				      "prototype": {
				        "dirty": {
				          "!doc": "PIXI.Strip.dirty",
				          "!type": "+Boolean"
				        },
				        "worldRotation": {
				          "!doc": "PIXI.Strip.worldRotation",
				          "!type": "+Number"
				        },
				        "filterArea": {
				          "!doc": "PIXI.Strip.filterArea",
				          "!type": "+Phaser.Rectangle"
				        },
				        "canvasPadding": {
				          "!doc": "PIXI.Strip.canvasPadding",
				          "!type": "+Number"
				        },
				        "parent": {
				          "!doc": "PIXI.Strip.parent",
				          "!type": "+PIXI.DisplayObjectContainer"
				        },
				        "renderable": {
				          "!doc": "PIXI.Strip.renderable",
				          "!type": "+Boolean"
				        },
				        "visible": {
				          "!doc": "PIXI.Strip.visible",
				          "!type": "+Boolean"
				        },
				        "worldScale": {
				          "!doc": "PIXI.Strip.worldScale",
				          "!type": "+Phaser.Point"
				        },
				        "texture": {
				          "!doc": "PIXI.Strip.texture",
				          "!type": "+PIXI.Texture"
				        },
				        "rotation": {
				          "!doc": "PIXI.Strip.rotation",
				          "!type": "+Number"
				        },
				        "scale": {
				          "!doc": "PIXI.Strip.scale",
				          "!type": "+Phaser.Point"
				        },
				        "worldAlpha": {
				          "!doc": "PIXI.Strip.worldAlpha",
				          "!type": "+Number"
				        },
				        "worldPosition": {
				          "!doc": "PIXI.Strip.worldPosition",
				          "!type": "+Phaser.Point"
				        },
				        "stage": {
				          "!doc": "PIXI.Strip.stage",
				          "!type": "+Phaser.Stage"
				        },
				        "blendMode": {
				          "!doc": "PIXI.Strip.blendMode",
				          "!type": "+Number"
				        },
				        "children": {
				          "!doc": "PIXI.Strip.children",
				          "!type": "+Array_DisplayObject_"
				        },
				        "hitArea": {
				          "!doc": "PIXI.Strip.hitArea",
				          "!type": "+Phaser.Rectangle"
				        },
				        "alpha": {
				          "!doc": "PIXI.Strip.alpha",
				          "!type": "+Number"
				        },
				        "pivot": {
				          "!doc": "PIXI.Strip.pivot",
				          "!type": "+Phaser.Point"
				        },
				        "position": {
				          "!doc": "PIXI.Strip.position",
				          "!type": "+Phaser.Point"
				        },
				        "DrawModes": {
				          "!doc": "PIXI.Strip.DrawModes",
				          "!type": "+Object"
				        }
				      },
				      "DrawModes": {
				        "!doc": "PIXI.Strip.DrawModes",
				        "!type": "+Object"
				      }
				    },
				    "DisplayObject": {
				      "!doc": "PIXI.DisplayObject",
				      "!type": "fn()",
				      "prototype": {
				        "worldRotation": {
				          "!doc": "PIXI.DisplayObject.worldRotation",
				          "!type": "+Number"
				        },
				        "filterArea": {
				          "!doc": "PIXI.DisplayObject.filterArea",
				          "!type": "+Phaser.Rectangle"
				        },
				        "parent": {
				          "!doc": "PIXI.DisplayObject.parent",
				          "!type": "+PIXI.DisplayObjectContainer"
				        },
				        "renderable": {
				          "!doc": "PIXI.DisplayObject.renderable",
				          "!type": "+Boolean"
				        },
				        "visible": {
				          "!doc": "PIXI.DisplayObject.visible",
				          "!type": "+Boolean"
				        },
				        "worldScale": {
				          "!doc": "PIXI.DisplayObject.worldScale",
				          "!type": "+Phaser.Point"
				        },
				        "rotation": {
				          "!doc": "PIXI.DisplayObject.rotation",
				          "!type": "+Number"
				        },
				        "scale": {
				          "!doc": "PIXI.DisplayObject.scale",
				          "!type": "+Phaser.Point"
				        },
				        "worldAlpha": {
				          "!doc": "PIXI.DisplayObject.worldAlpha",
				          "!type": "+Number"
				        },
				        "worldPosition": {
				          "!doc": "PIXI.DisplayObject.worldPosition",
				          "!type": "+Phaser.Point"
				        },
				        "stage": {
				          "!doc": "PIXI.DisplayObject.stage",
				          "!type": "+Phaser.Stage"
				        },
				        "hitArea": {
				          "!doc": "PIXI.DisplayObject.hitArea",
				          "!type": "+Phaser.Rectangle"
				        },
				        "alpha": {
				          "!doc": "PIXI.DisplayObject.alpha",
				          "!type": "+Number"
				        },
				        "pivot": {
				          "!doc": "PIXI.DisplayObject.pivot",
				          "!type": "+Phaser.Point"
				        },
				        "position": {
				          "!doc": "PIXI.DisplayObject.position",
				          "!type": "+Phaser.Point"
				        }
				      }
				    },
				    "Rope": {
				      "!doc": "PIXI.Rope",
				      "!type": "fn(texture: +Texture, points: +Array)",
				      "prototype": {
				        "dirty": {
				          "!doc": "PIXI.Rope.dirty",
				          "!type": "+Boolean"
				        },
				        "worldRotation": {
				          "!doc": "PIXI.Rope.worldRotation",
				          "!type": "+Number"
				        },
				        "filterArea": {
				          "!doc": "PIXI.Rope.filterArea",
				          "!type": "+Phaser.Rectangle"
				        },
				        "canvasPadding": {
				          "!doc": "PIXI.Rope.canvasPadding",
				          "!type": "+Number"
				        },
				        "parent": {
				          "!doc": "PIXI.Rope.parent",
				          "!type": "+PIXI.DisplayObjectContainer"
				        },
				        "renderable": {
				          "!doc": "PIXI.Rope.renderable",
				          "!type": "+Boolean"
				        },
				        "visible": {
				          "!doc": "PIXI.Rope.visible",
				          "!type": "+Boolean"
				        },
				        "worldScale": {
				          "!doc": "PIXI.Rope.worldScale",
				          "!type": "+Phaser.Point"
				        },
				        "texture": {
				          "!doc": "PIXI.Rope.texture",
				          "!type": "+PIXI.Texture"
				        },
				        "rotation": {
				          "!doc": "PIXI.Rope.rotation",
				          "!type": "+Number"
				        },
				        "scale": {
				          "!doc": "PIXI.Rope.scale",
				          "!type": "+Phaser.Point"
				        },
				        "worldAlpha": {
				          "!doc": "PIXI.Rope.worldAlpha",
				          "!type": "+Number"
				        },
				        "worldPosition": {
				          "!doc": "PIXI.Rope.worldPosition",
				          "!type": "+Phaser.Point"
				        },
				        "stage": {
				          "!doc": "PIXI.Rope.stage",
				          "!type": "+Phaser.Stage"
				        },
				        "blendMode": {
				          "!doc": "PIXI.Rope.blendMode",
				          "!type": "+Number"
				        },
				        "children": {
				          "!doc": "PIXI.Rope.children",
				          "!type": "+Array_DisplayObject_"
				        },
				        "hitArea": {
				          "!doc": "PIXI.Rope.hitArea",
				          "!type": "+Phaser.Rectangle"
				        },
				        "alpha": {
				          "!doc": "PIXI.Rope.alpha",
				          "!type": "+Number"
				        },
				        "pivot": {
				          "!doc": "PIXI.Rope.pivot",
				          "!type": "+Phaser.Point"
				        },
				        "position": {
				          "!doc": "PIXI.Rope.position",
				          "!type": "+Phaser.Point"
				        },
				        "DrawModes": {
				          "!doc": "PIXI.Rope.DrawModes",
				          "!type": "+Object"
				        }
				      },
				      "DrawModes": {
				        "!doc": "PIXI.Rope.DrawModes",
				        "!type": "+Object"
				      }
				    },
				    "WebGLBlendModeManager": {
				      "!doc": "PIXI.WebGLBlendModeManager",
				      "!type": "fn(gl: +WebGLContext)",
				      "prototype": {}
				    },
				    "StripShader": {
				      "!doc": "PIXI.StripShader",
				      "!type": "fn(gl: +WebGLContext)",
				      "prototype": {}
				    },
				    "TilingSprite": {
				      "!doc": "PIXI.TilingSprite",
				      "!type": "fn(texture: +Texture, width: +Number, height: +Number)",
				      "prototype": {
				        "worldRotation": {
				          "!doc": "PIXI.TilingSprite.worldRotation",
				          "!type": "+Number"
				        },
				        "filterArea": {
				          "!doc": "PIXI.TilingSprite.filterArea",
				          "!type": "+Phaser.Rectangle"
				        },
				        "shader": {
				          "!doc": "PIXI.TilingSprite.shader",
				          "!type": "+PIXI.AbstractFilter"
				        },
				        "parent": {
				          "!doc": "PIXI.TilingSprite.parent",
				          "!type": "+PIXI.DisplayObjectContainer"
				        },
				        "renderable": {
				          "!doc": "PIXI.TilingSprite.renderable",
				          "!type": "+Boolean"
				        },
				        "tileScaleOffset": {
				          "!doc": "PIXI.TilingSprite.tileScaleOffset",
				          "!type": "+Phaser.Point"
				        },
				        "tilePosition": {
				          "!doc": "PIXI.TilingSprite.tilePosition",
				          "!type": "+Phaser.Point"
				        },
				        "worldScale": {
				          "!doc": "PIXI.TilingSprite.worldScale",
				          "!type": "+Phaser.Point"
				        },
				        "tilePattern": {
				          "!doc": "PIXI.TilingSprite.tilePattern",
				          "!type": "+PIXI.Texture"
				        },
				        "scale": {
				          "!doc": "PIXI.TilingSprite.scale",
				          "!type": "+Phaser.Point"
				        },
				        "canvasBuffer": {
				          "!doc": "PIXI.TilingSprite.canvasBuffer",
				          "!type": "+PIXI.CanvasBuffer"
				        },
				        "tint": {
				          "!doc": "PIXI.TilingSprite.tint",
				          "!type": "+Number"
				        },
				        "worldAlpha": {
				          "!doc": "PIXI.TilingSprite.worldAlpha",
				          "!type": "+Number"
				        },
				        "tintedTexture": {
				          "!doc": "PIXI.TilingSprite.tintedTexture",
				          "!type": "+Phaser.Canvas"
				        },
				        "children": {
				          "!doc": "PIXI.TilingSprite.children",
				          "!type": "+Array_DisplayObject_"
				        },
				        "alpha": {
				          "!doc": "PIXI.TilingSprite.alpha",
				          "!type": "+Number"
				        },
				        "pivot": {
				          "!doc": "PIXI.TilingSprite.pivot",
				          "!type": "+Phaser.Point"
				        },
				        "height": {
				          "!doc": "PIXI.TilingSprite.height",
				          "!type": "+Number"
				        },
				        "visible": {
				          "!doc": "PIXI.TilingSprite.visible",
				          "!type": "+Boolean"
				        },
				        "tileScale": {
				          "!doc": "PIXI.TilingSprite.tileScale",
				          "!type": "+Phaser.Point"
				        },
				        "texture": {
				          "!doc": "PIXI.TilingSprite.texture",
				          "!type": "+PIXI.Texture"
				        },
				        "textureDebug": {
				          "!doc": "PIXI.TilingSprite.textureDebug",
				          "!type": "+Boolean"
				        },
				        "rotation": {
				          "!doc": "PIXI.TilingSprite.rotation",
				          "!type": "+Number"
				        },
				        "worldPosition": {
				          "!doc": "PIXI.TilingSprite.worldPosition",
				          "!type": "+Phaser.Point"
				        },
				        "stage": {
				          "!doc": "PIXI.TilingSprite.stage",
				          "!type": "+Phaser.Stage"
				        },
				        "blendMode": {
				          "!doc": "PIXI.TilingSprite.blendMode",
				          "!type": "+Number"
				        },
				        "hitArea": {
				          "!doc": "PIXI.TilingSprite.hitArea",
				          "!type": "+Phaser.Rectangle"
				        },
				        "anchor": {
				          "!doc": "PIXI.TilingSprite.anchor",
				          "!type": "+Phaser.Point"
				        },
				        "width": {
				          "!doc": "PIXI.TilingSprite.width",
				          "!type": "+Number"
				        },
				        "position": {
				          "!doc": "PIXI.TilingSprite.position",
				          "!type": "+Phaser.Point"
				        },
				        "refreshTexture": {
				          "!doc": "PIXI.TilingSprite.refreshTexture",
				          "!type": "+Boolean"
				        },
				        "tilingTexture": {
				          "!doc": "PIXI.TilingSprite.tilingTexture",
				          "!type": "+PIXI.Texture"
				        }
				      }
				    },
				    "Event": {
				      "!doc": "PIXI.Event",
				      "!type": "fn(target: +Object, name: +String, data: +Object)",
				      "prototype": {}
				    },
				    "RenderTexture": {
				      "!doc": "PIXI.RenderTexture",
				      "!type": "fn(width: +Number, height: +Number, renderer: +CanvasRenderer, scaleMode: +Number, resolution: +Number)",
				      "prototype": {}
				    },
				    "DisplayObjectContainer": {
				      "!doc": "PIXI.DisplayObjectContainer",
				      "!type": "fn()",
				      "prototype": {
				        "worldRotation": {
				          "!doc": "PIXI.DisplayObjectContainer.worldRotation",
				          "!type": "+Number"
				        },
				        "filterArea": {
				          "!doc": "PIXI.DisplayObjectContainer.filterArea",
				          "!type": "+Phaser.Rectangle"
				        },
				        "parent": {
				          "!doc": "PIXI.DisplayObjectContainer.parent",
				          "!type": "+PIXI.DisplayObjectContainer"
				        },
				        "renderable": {
				          "!doc": "PIXI.DisplayObjectContainer.renderable",
				          "!type": "+Boolean"
				        },
				        "visible": {
				          "!doc": "PIXI.DisplayObjectContainer.visible",
				          "!type": "+Boolean"
				        },
				        "worldScale": {
				          "!doc": "PIXI.DisplayObjectContainer.worldScale",
				          "!type": "+Phaser.Point"
				        },
				        "rotation": {
				          "!doc": "PIXI.DisplayObjectContainer.rotation",
				          "!type": "+Number"
				        },
				        "scale": {
				          "!doc": "PIXI.DisplayObjectContainer.scale",
				          "!type": "+Phaser.Point"
				        },
				        "worldAlpha": {
				          "!doc": "PIXI.DisplayObjectContainer.worldAlpha",
				          "!type": "+Number"
				        },
				        "worldPosition": {
				          "!doc": "PIXI.DisplayObjectContainer.worldPosition",
				          "!type": "+Phaser.Point"
				        },
				        "stage": {
				          "!doc": "PIXI.DisplayObjectContainer.stage",
				          "!type": "+Phaser.Stage"
				        },
				        "children": {
				          "!doc": "PIXI.DisplayObjectContainer.children",
				          "!type": "+Array_DisplayObject_"
				        },
				        "hitArea": {
				          "!doc": "PIXI.DisplayObjectContainer.hitArea",
				          "!type": "+Phaser.Rectangle"
				        },
				        "alpha": {
				          "!doc": "PIXI.DisplayObjectContainer.alpha",
				          "!type": "+Number"
				        },
				        "pivot": {
				          "!doc": "PIXI.DisplayObjectContainer.pivot",
				          "!type": "+Phaser.Point"
				        },
				        "position": {
				          "!doc": "PIXI.DisplayObjectContainer.position",
				          "!type": "+Phaser.Point"
				        }
				      }
				    },
				    "BaseTexture": {
				      "!doc": "PIXI.BaseTexture",
				      "!type": "fn(source: +String, scaleMode: +Number)",
				      "prototype": {}
				    }
				  }
				}



;
})